# Thi workflow does the backward compatibility tests
# between the Embedding SDK package of version N and Embedding SDK Bundle of version N - 1
# N - 1 is a target of a PR
name: Embedding SDK backward-compatibility E2E Component Tests

on:
  workflow_call:
    inputs:
      cached-embedding-sdk-dist-artifact-name:
        required: true
        type: string

jobs:
  files-changed:
    name: "SDK backward-compatibility E2E > Check which files changed"
    runs-on: ubuntu-22.04
    timeout-minutes: 3
    outputs:
      e2e_embedding_sdk: ${{ steps.changes.outputs.e2e_embedding_sdk }}
    steps:
      - uses: actions/checkout@v4
      - name: Test which files changed
        uses: dorny/paths-filter@v3.0.0
        id: changes
        with:
          token: ${{ github.token }}
          filters: .github/file-paths.yaml

  decide-target-ref:
    runs-on: ubuntu-latest
    outputs:
      target-ref: ${{ steps.get-target-ref.outputs.value }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Decide ref to checkout
        id: get-target-ref
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "value=${{ github.base_ref }}" >> "$GITHUB_OUTPUT"
          else
            echo "value=$(git rev-parse HEAD^1)" >> "$GITHUB_OUTPUT"
          fi

  # if this is a test on a release branch, we need to check the build requirements
  get-build-requirements:
    name: "SDK backward-compatibility E2E > [Backport only] Get build requirements"
    needs: [decide-target-ref]
    if: |
      !cancelled() &&
      contains(github.base_ref || github.ref, 'release-x')
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    outputs:
      java_version: ${{ fromJson(steps.dependencies.outputs.result).java_version }}
      node_version: ${{ fromJson(steps.dependencies.outputs.result).node_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.decide-target-ref.outputs.target-ref }}
          sparse-checkout: release
      - name: Prepare build scripts
        run: cd ${{ github.workspace }}/release && yarn && yarn build
      - name: Get build dependencies
        uses: actions/github-script@v7
        id: dependencies
        with:
          script: | # js
            const {
              getBuildRequirements,
              getVersionFromReleaseBranch,
            } = require('${{ github.workspace }}/release/dist/index.cjs');
            const targetBranchName = '${{ github.base_ref || github.ref }}';

            const version = getVersionFromReleaseBranch(targetBranchName);
            const requirements = getBuildRequirements(version);

            return {
              java_version: requirements.java,
              node_version: requirements.node,
            };

  e2e-tests:
    name: "SDK backward-compatibility E2E > Run e2e tests"
    needs: [files-changed, decide-target-ref, get-build-requirements]
    if: |
      !cancelled() &&
      needs.files-changed.outputs.e2e_embedding_sdk == 'true'
    runs-on: ubuntu-22.04
    timeout-minutes: 45
    env:
      MB_EDITION: ee
      DISPLAY: ""
      # Any env starting with `CYPRESS_` will be available to all Cypress tests via `Cypress.env()`
      # Example: you can get `CYPRESS_FOO` with `Cypress.env("FOO")`
      CYPRESS_MB_ALL_FEATURES_TOKEN: ${{ secrets.MB_ALL_FEATURES_TOKEN }}
      CYPRESS_MB_STARTER_CLOUD_TOKEN: ${{ secrets.MB_STARTER_CLOUD_TOKEN }}
      CYPRESS_MB_PRO_CLOUD_TOKEN: ${{ secrets.MB_PRO_CLOUD_TOKEN }}
      CYPRESS_MB_PRO_SELF_HOSTED_TOKEN: ${{ secrets.MB_PRO_SELF_HOSTED_TOKEN }}
      CYPRESS_PULL_REQUEST_ID: ${{ github.event.pull_request.number || '' }}
      COMMIT_INFO_MESSAGE: ${{ github.event.pull_request.title || github.event.head_commit.message || github.event.head.sha }}
      TZ: US/Pacific # to make node match the instance tz
      CYPRESS_CI: true

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.decide-target-ref.outputs.target-ref }}

      - name: Prepare back-end environment
        uses: ./.github/actions/prepare-backend
        with:
          m2-cache-key: uberjar
          java-version: "${{ needs.get-build-requirements.outputs.java_version || 21 }}"

      - name: Prepare front-end environment
        uses: ./.github/actions/prepare-frontend
        with:
          node-version: "${{ needs.get-build-requirements.outputs.node_version }}"

      - name: Build uberjar with ./bin/build.sh
        run: ./bin/build.sh

      - name: Retrieve Embedding SDK dist artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.cached-embedding-sdk-dist-artifact-name }}
          path: ${{ github.workspace }}/resources/embedding-sdk

      - name: Prepare Cypress environment
        id: cypress-prep
        uses: ./.github/actions/prepare-cypress

      - name: Run Metabase
        run: node e2e/runner/run_cypress_ci.js start

      - name: Make app db snapshot
        run: node e2e/runner/run_cypress_ci.js snapshot --browser ${{ steps.cypress-prep.outputs.chrome-path }}

      - name: Run component tests for Embedding SDK
        run: |
          node e2e/runner/run_cypress_ci.js component \
            --browser ${{ steps.cypress-prep.outputs.chrome-path }} \
            --env grepTags="-@skip-backward-compatibility",grepOmitFiltered=true

      - name: Upload Test Results
        uses: ./.github/actions/upload-test-results
        if: always()
        with:
          input-path: ./target/junit
          output-name: e2e-embedding-sdk
          bucket: ${{ vars.AWS_S3_TEST_RESULTS_BUCKET }}
          aws-access-key-id: ${{ secrets.AWS_TEST_RESULTS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_TEST_RESULTS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
          trunk-api-token: ${{ secrets.TRUNK_API_TOKEN }}

      - name: Upload Cypress Artifacts upon failure
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-recording-embedding-sdk-cross-version
          path: |
            ./cypress
            ./logs/test.log
          if-no-files-found: ignore

      - name: Publish Summary
        if: failure()
        uses: actions/github-script@v7
        with:
          script: | #js
            const {
               generateReport,
               parseReport,
               formatSummary
             } = require("./.github/scripts/handle-mochawesome-report.js");

             const report = await generateReport();
             const results = parseReport(report);
             const summary = formatSummary(results);

             await core.summary.addRaw(summary).write();
