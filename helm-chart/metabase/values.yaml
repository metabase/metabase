replicaCount: 1

image:
  repository: metabase/metabase
  pullPolicy: IfNotPresent
  command: []
  tag: "latest"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: ""

podAnnotations: {}

podSecurityContext: {}

securityContext: {}

service:
  name: metabase
  type: ClusterIP
  externalPort: 80
  internalPort: 3000

livenessProbe:
  initialDelaySeconds: 120
  timeoutSeconds: 30
  failureThreshold: 6

readinessProbe:
  initialDelaySeconds: 30
  timeoutSeconds: 3
  periodSeconds: 5

ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts:
    - host: metabase.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []

extraArgs:
  # - api-documentation 
  # - driver-methods
  # - dump [path] [path & args]
  # - dump-to-h2 [h2-filename & opts]
  # - help []
  # - load [path] [path & args]
  # - load-from-h2 [] [h2-connection-string]
  # - migrate [direction]
  # - profile []
  # - refresh-integration-test-db-metadata []
  # - reset-password [email-address]
  # - rotate-encryption-key [new-key]
  # - version []

extraEnv:
  # JAVA_OPTS: "-Dcom.sun.management.jmxremote.port=1099 -Dcom.sun.management.jmxremote.rmi.port=1099 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.local.only=false -Djava.rmi.server.hostname=metabase.local"

initContainers: []
  # - name: init-mydb
  #   image: busybox:1.28
  #   command: ['sh', '-c', "until nslookup mydb.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for mydb; sleep 2; done"]

extraVolumeMounts: []
  # - name: metabase-plugins
  #   mountPath: /app/plugins

extraVolumes: []
  # - name: metabase-plugins
  #   persistentVolumeClaim:
  #     claimName: pv-metabase-plugins

config:
  debug:
    namespaceTrace: ""
  database:
    type: h2
    automigrate: ""
    connectionTimeoutMs: ""
  jetty:
    maxThreads: ""
    minThreads: ""
    host: ""
    asyncResponseTimeout: ""
    daemon: ""
    join: ""
    maxIdleTime: ""
    maxQueued: ""
    requestHeaderSize: ""
  dw:
    maxConnectionPoolSize: ""
    asyncQueryThreadPoolSize: ""
    jdbcDataWarehouseMaxConnectionPoolSize: ""
    redshiftFetchSize: ""
  security:
    passComplexity: ""
    passLength: ""
    sessionAge: ""
    sessionCookies: ""
    sourceAddressHeader: ""
  email:
    fromAddress: ""
    admin: ""
  sso:
    googleAuthAutoCreateAccountDomains: ""
    googleAuthClientId: ""
    jwtAttributeEmail: ""
    jwtAttributeFirstName: ""
    jwtAttributeGroups: ""
    jwtAttributeLastName: ""
    jwtEnabled: ""
    jwtGroupMappings: ""
    jwtGroupSync: ""
    jwtIdentityProviderUri: ""
    ldapAttributeEmail: ""
    ldapAttributeFirstName: ""
    ldapAttributeLastName: ""
    ldapBindDN: ""
    ldapEnabled: ""
    ldapGroupBase: ""
    ldapGroupMappings: ""
    ldapGroupSync: ""
    ldapSyncUserAttributes: ""
    ldapSyncUserAttributesBlacklist: ""
    ldapUserBase: ""
    ldapuserFilter: ""
    samlApplicationName: ""
    samlAttributeEmail: ""
    samlAttributeFirstName: ""
    samlAttributeGroup: ""
    samlAttributeLastName: ""
    samlEnabled: ""
    samlGroupMappings: ""
    samlGroupSync: ""
    samlIdPURI: ""
    samlKeystoreAlias: ""
    sendNewSSOUserAdminEmail: ""
  application:
    landingPage: ""
    favicon_url: ""
    logo_url: ""
    anon_tracking_enabled: ""
    name: ""
    breakoutBinWidth: ""
    breakoutBinNum: ""
    checkForUpdates: ""
    disableSessionThrottle: ""
    embeddingAppOrigin: ""
    enableEmbedding: ""
    enableNestedQueries: ""
    enablePasswordLogin: ""
    enablePublicSharing: ""
    enableQueryCaching: ""
    queryCachingMaxKb: ""
    queryCachingMaxTTL: ""
    queryCachingMinTTL: ""
    queryCachingTTLRatio: ""
    enableXrays: ""
    mapTileServerURL: ""
    metabotEnabled: ""
    pluginsDir: ""
    reportTimezone: ""
    showHomepageData: ""
    showHomepageXrays: ""
    siteLocale: ""
    siteName: ""
    siteURL: ""
    siteUUID: ""
    sshHearbeatIntervalSec: ""
    versionInfoURL: ""
  
secrets:
  existingSecret:
    name:
    connectionURIKey:
    usernameKey:
    passwordKey:
  database:
    username: ""
    password: ""
    connString: ""
    host: ""
    dbName: ""
    port: ""
  config:
    encryptionKey: ""
    embeddingToken: ""
    api_key: ""
    setupToken: ""
    slackToken: ""
  email:
    host: ""
    username: ""
    password: ""
    port: ""
    security: ""
  sso:
    jwt: ""
    samlIdentityProviderCertificate: ""
  ldap:
    host: ""
    port: ""
    security: ""
    password: ""
  cache:
    backend: ""
  

resources: {}

autoscaling:
  enabled: false

nodeSelector: {}

tolerations: []

affinity: {}
