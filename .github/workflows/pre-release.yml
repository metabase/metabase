name: Pre-release [WIP]

on:
  workflow_dispatch:
    inputs:
      commit:
        description: 'A full-length commit SHA-1 hash'
        required: true
      version:
        description: 'Intended version (e.g. v0.46.3)'
        required: true

env:
  MAX_HASH_LENGTH: 8
  CUSTOM_REPO: ${{ secrets.CUSTOM_RELEASE_REPO }}

jobs:
  check-commit:
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    steps:
    - name: Ensure that the intended version (${{ github.event.inputs.version }}) was never released before
      run: |
        if [[ "${{ github.event.inputs.version }}" = v* ]]; then
          echo "Checking if ${{ github.event.inputs.version }} conflicts with a past release..."
        else
          echo "ERROR: the intended version must start with 'v', e.g. 'v0.46.3."
          echo "ABORT!"
          exit -1
        fi
        CANONICAL_REFS=https://github.com/metabase/metabase/archive/refs
        URL=${CANONICAL_REFS}/tags/${{ github.event.inputs.version }}.zip
        HTTP_CODE=$(curl -s -L -o /dev/null --head -w "%{HTTP_CODE}" ${URL})
        if [[ $HTTP_CODE =~ "200" ]]; then
          echo "ERROR: that version was already released in the past."
          echo "ABORT!"
          exit -1
        else
          if [[ $HTTP_CODE =~ "404" ]]; then
            echo "That version has not been released yet."
            echo "Proceeding to the next step..."
            exit 0
          else
            echo "ERROR: Unhandled case of HTTP $HTTP_CODE while checking ${URL}"
            echo "ABORT!"
            exit -1
          fi
        fi

    - name: Check out the code to verify the release branch
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # IMPORTANT! to get all the branches
    - name: Ensure that the specified commit exists in the latest release branch
      run: |
        echo "Checking if the specified commit is in a release branch..."
        COMMIT=${{ github.event.inputs.commit }}
        git branch -a --contains $COMMIT > branches.txt
        if [[ $(grep -c master branches.txt) =~ 1 ]]; then
          echo "Found in master branch. ABORT!"
          exit -1
        fi
        if [[ $(grep -c 'release-x' branches.txt) =~ 1 ]]; then
          echo "Found the commit $COMMIT in:"
          git branch -a --contains $COMMIT
          echo "Proceeding to the next step..."
          exit 0
        else
          echo "Commit $COMMIT is not found in a single release branch"
          echo "ABORT!."
          exit -1
        fi

  build:
    if: ${{ github.repository }} != 'metabase/metabase'
    runs-on: ubuntu-22.04
    needs: check-commit
    name: Build Metabase ${{ matrix.edition }} @${{ github.event.inputs.commit }}
    timeout-minutes: 40
    strategy:
      matrix:
        edition: [oss, ee]
    env:
      MB_EDITION: ${{ matrix.edition }}
      INTERACTIVE: false
    steps:
    - name: Fail early if custom docker release repo is missing
      if: ${{ env.CUSTOM_REPO == null }}
      run: exit 1
    - name: Check out the code
      uses: actions/checkout@v3
      with:
        ref: ${{ github.event.inputs.commit }}
    - name: Prepare front-end environment
      uses: ./.github/actions/prepare-frontend
    - name: Prepare back-end environment
      uses: ./.github/actions/prepare-backend
      with:
        m2-cache-key: pre-release-build
    - name: Build
      run: ./bin/build.sh

    - name: Determine the canonical version ## EE is always v1.x.y, OSS is always v0.x.y
      uses: actions/github-script@v6
      id: canonical_version
      env:
        INTENDED_VERSION: ${{ github.event.inputs.version }}
        EDITION: ${{ matrix.edition }}
      with:
        result-encoding: string
        script: |
          var canonical_version;
          const ver = process.env.INTENDED_VERSION;
          if (process.env.EDITION === "ee") {
            canonical_version = ver.replace(/^v0\./, "v1."); // always e.g. v1.47.2
          } else {
            canonical_version = ver.replace(/^v1\./, "v0."); // always e.g. v0.45.6
          }
          console.log("The canonical version of this", process.env.EDITION, "edition is", canonical_version);
          return canonical_version;
    - name: Adjust the tag in the version.properties file
      run: |
        jar xf ./target/uberjar/metabase.jar version.properties
        sed -i 's/tag=.*/tag=${{ steps.canonical_version.outputs.result }}/' version.properties
        zip ./target/uberjar/metabase.jar version.properties
    - name: Show the updated version.properties
      run: echo "Updated version.properties:" && cat version.properties

    - name: Prepare uberjar artifact
      uses: ./.github/actions/prepare-uberjar-artifact

  check-uberjar-health:
    runs-on: ubuntu-22.04
    name: Is ${{ matrix.edition }} (java ${{ matrix.java-version }}) healthy?
    needs: build
    timeout-minutes: 10
    strategy:
      matrix:
        edition: [oss, ee]
        java-version: [11, 17]
    steps:
    - name: Prepare JRE (Java Run-time Environment)
      uses: actions/setup-java@v3
      with:
        java-package: jre
        java-version: ${{ matrix.java-version }}
        distribution: 'temurin'
    - run: java -version
    - uses: actions/download-artifact@v3
      name: Retrieve uberjar artifact
      with:
        name: metabase-${{ matrix.edition }}-uberjar
    - name: Launch uberjar (and keep it running)
      run: java -jar ./target/uberjar/metabase.jar &
    - name: Wait for Metabase to start
      run: while ! curl -s 'http://localhost:3000/api/health' | grep '{"status":"ok"}'; do sleep 1; done

  containerize:
    runs-on: ubuntu-22.04
    needs: check-uberjar-health
    timeout-minutes: 15
    strategy:
      matrix:
        edition: [oss, ee]
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    steps:
    - name: Check out the code
      uses: actions/checkout@v3
      with:
        ref: ${{ github.event.inputs.commit }}
    - name: Truncate commit hash
      run: |
        commit_id=${{ github.event.inputs.commit }}
        truncated_hash=${commit_id:0:${{ env.MAX_HASH_LENGTH }}}

        echo "COMMIT_IDENTIFIER=$truncated_hash" >> $GITHUB_ENV
      shell: bash
    - uses: actions/download-artifact@v3
      name: Retrieve uberjar artifact
      with:
        name: metabase-${{ matrix.edition }}-uberjar
    - name: Move the Uberjar to the context dir
      run: mv ./target/uberjar/metabase.jar bin/docker/.
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v2
      with:
        driver-opts: network=host
    - name: Build ${{ matrix.edition }} container
      uses: docker/build-push-action@v3
      with:
        context: bin/docker/.
        platforms: linux/amd64
        network: host
        tags: localhost:5000/local-metabase:${{ env.COMMIT_IDENTIFIER }}-${{ matrix.edition }}
        no-cache: true
        push: true

    - name: Launch container
      run: docker run --rm -dp 3000:3000 localhost:5000/local-metabase:${{ env.COMMIT_IDENTIFIER }}-${{ matrix.edition }}
      timeout-minutes: 5
    - name: Wait for Metabase to start
      run: while ! curl -s 'http://localhost:3000/api/health' | grep '{"status":"ok"}'; do sleep 1; done
      timeout-minutes: 3

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_RELEASE_USERNAME }}
        password: ${{ secrets.DOCKERHUB_RELEASE_TOKEN }}
    - name: Determine the target Docker Hub repository
      run: |
          echo "DOCKERHUB_REPO=${{ github.repository_owner }}/${{ env.CUSTOM_REPO }}" >> $GITHUB_ENV
          echo "IMAGE_NAME=${{ env.COMMIT_IDENTIFIER }}-${{ matrix.edition }}" >> $GITHUB_ENV
    - name: Retag and push container image to Docker Hub
      run: |
        echo "Pushing container image ${{ env.IMAGE_NAME}} to ${{ env.DOCKERHUB_REPO }} ..."
        docker tag localhost:5000/local-metabase:${{ env.IMAGE_NAME }} ${{ env.DOCKERHUB_REPO }}:${{ env.IMAGE_NAME }}
        docker push ${{ env.DOCKERHUB_REPO }}:${{ env.IMAGE_NAME }}
        echo "Finished!"

  verify-docker-pull:
    runs-on: ubuntu-22.04
    needs: containerize
    timeout-minutes: 15
    strategy:
      matrix:
        edition: [oss, ee]
    steps:
    - name: Truncate commit hash
      run: |
        commit_id=${{ github.event.inputs.commit }}
        truncated_hash=${commit_id:0:${{ env.MAX_HASH_LENGTH }}}

        echo "COMMIT_IDENTIFIER=$truncated_hash" >> $GITHUB_ENV
      shell: bash
    - name: Login to Docker Hub # authenticated, to avoid being rate-throttled
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_RELEASE_USERNAME }}
        password: ${{ secrets.DOCKERHUB_RELEASE_TOKEN }}
    - name: Determine the container image to pull
      run: |
          echo "DOCKERHUB_REPO=${{ github.repository_owner }}/${{ env.CUSTOM_REPO }}" >> $GITHUB_ENV
          echo "IMAGE_NAME=${{ env.COMMIT_IDENTIFIER }}-${{ matrix.edition }}" >> $GITHUB_ENV
    - name: Pull the container image
      run: |
        echo "Pulling container image ${{ env.DOCKERHUB_REPO }}:${{ env.IMAGE_NAME }} ..."
        docker pull ${{ env.DOCKERHUB_REPO }}:${{ env.IMAGE_NAME }}
        echo "Successful!"
    - name: Launch container
      run: docker run --rm -dp 3000:3000 ${{ env.DOCKERHUB_REPO }}:${{ env.IMAGE_NAME }}
      timeout-minutes: 5
    - name: Wait for Metabase to start
      run: while ! curl -s 'http://localhost:3000/api/health' | grep '{"status":"ok"}'; do sleep 1; done
      timeout-minutes: 3
