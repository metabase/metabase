commit 06afa5f12133fe9192f2ff3a68b11f27d9296502
Author: Anton Kulyk <kuliks.anton@gmail.com>
Date:   Wed Nov 30 15:50:21 2022 +0000

    Migrate new collection form to formik (#26820)
    
    * Add basic `CreateCollectionForm`
    
    * Add `CreateCollectionModal`
    
    * Use new form in "New" menu
    
    * Remove no longer needed `onChangeLocation`
    
    * Use new form in collections ellipsis menu
    
    * Add unit tests
    
    * Don't use legacy form lib in collection plugin
    
    * Add `canManageCollectionAuthorityLevel` utility
    
    * Update `FormCollectionAuthorityLevel`
    
    * Add authority level field to new collection form
    
    * Remove old collection form
    
    * Tweak how authority level form field is exposed

diff --git a/enterprise/frontend/src/metabase-enterprise/collections/components/FormCollectionAuthorityLevel.styled.tsx b/enterprise/frontend/src/metabase-enterprise/collections/components/FormCollectionAuthorityLevel.styled.tsx
deleted file mode 100644
index 6ce24048b7..0000000000
--- a/enterprise/frontend/src/metabase-enterprise/collections/components/FormCollectionAuthorityLevel.styled.tsx
+++ /dev/null
@@ -1,16 +0,0 @@
-import styled from "@emotion/styled";
-import CheckBox from "metabase/core/components/CheckBox";
-import { color } from "metabase/lib/colors";
-
-export const FormFieldRoot = styled.div`
-  display: flex;
-  align-items: center;
-  justify-content: space-between;
-`;
-
-export const Label = styled(CheckBox.Label)`
-  color: ${color("text-dark")};
-  font-size: 1em;
-  font-weight: bold;
-  margin-bottom: 1px;
-`;
diff --git a/enterprise/frontend/src/metabase-enterprise/collections/components/FormCollectionAuthorityLevel.tsx b/enterprise/frontend/src/metabase-enterprise/collections/components/FormCollectionAuthorityLevel.tsx
index 1e8abb074c..9eb4beb0ca 100644
--- a/enterprise/frontend/src/metabase-enterprise/collections/components/FormCollectionAuthorityLevel.tsx
+++ b/enterprise/frontend/src/metabase-enterprise/collections/components/FormCollectionAuthorityLevel.tsx
@@ -1,22 +1,58 @@
-import React from "react";
-import { SegmentedControl } from "metabase/components/SegmentedControl/SegmentedControl";
-import { FormFieldRoot } from "./FormCollectionAuthorityLevel.styled";
+import React, { HTMLAttributes } from "react";
+import { useField } from "formik";
+import { t } from "ttag";
 
-interface Props {
-  field: any;
-  options: any;
+import { useUniqueId } from "metabase/hooks/use-unique-id";
+
+import FormField from "metabase/core/components/FormField";
+import { SegmentedControl } from "metabase/components/SegmentedControl";
+
+import { REGULAR_COLLECTION, OFFICIAL_COLLECTION } from "../constants";
+
+interface Props extends HTMLAttributes<HTMLDivElement> {
+  name: string;
+  title?: string;
 }
 
-export function FormCollectionAuthorityLevel({ field, options }: Props) {
+const OPTIONS = [
+  {
+    name: REGULAR_COLLECTION.name,
+    value: REGULAR_COLLECTION.type,
+    icon: REGULAR_COLLECTION.icon,
+  },
+  {
+    name: OFFICIAL_COLLECTION.name,
+    value: OFFICIAL_COLLECTION.type,
+    icon: OFFICIAL_COLLECTION.icon,
+    selectedColor: OFFICIAL_COLLECTION.color,
+  },
+];
+
+export function FormCollectionAuthorityLevel({
+  className,
+  style,
+  name = "authority_level",
+  title = t`Collection type`,
+}: Props) {
+  const id = useUniqueId();
+  const [{ value }, { error, touched }, { setValue }] = useField(name);
+
   return (
-    <FormFieldRoot>
+    <FormField
+      className={className}
+      style={style}
+      title={title}
+      htmlFor={id}
+      infoTooltip={t`The contents of Official collections will get a badge by their name and will be more likely to show up in search results.`}
+      error={touched ? error : undefined}
+    >
       <SegmentedControl
-        value={field.value}
-        onChange={field.onChange}
-        options={options}
+        value={value}
+        onChange={setValue}
+        options={OPTIONS}
         variant="fill-background"
         inactiveColor="text-dark"
       />
-    </FormFieldRoot>
+    </FormField>
   );
 }
diff --git a/enterprise/frontend/src/metabase-enterprise/collections/index.ts b/enterprise/frontend/src/metabase-enterprise/collections/index.ts
index 8d2d54ab9e..32bf86bd55 100644
--- a/enterprise/frontend/src/metabase-enterprise/collections/index.ts
+++ b/enterprise/frontend/src/metabase-enterprise/collections/index.ts
@@ -2,7 +2,6 @@ import { t } from "ttag";
 import {
   PLUGIN_COLLECTIONS,
   PLUGIN_COLLECTION_COMPONENTS,
-  PLUGIN_FORM_WIDGETS,
 } from "metabase/plugins";
 
 import type { Collection } from "metabase-types/api";
@@ -51,29 +50,8 @@ PLUGIN_COLLECTIONS.getAuthorityLevelMenuItems = (
   }
 };
 
-PLUGIN_COLLECTIONS.getAuthorityLevelFormFields = () => [
-  {
-    name: "authority_level",
-    title: t`Collection type`,
-    info: t`The contents of Official collections will get a badge by their name and will be more likely to show up in search results.`,
-    type: "collectionAuthorityLevel",
-    options: [
-      {
-        name: REGULAR_COLLECTION.name,
-        value: REGULAR_COLLECTION.type,
-        icon: REGULAR_COLLECTION.icon,
-      },
-      {
-        name: OFFICIAL_COLLECTION.name,
-        value: OFFICIAL_COLLECTION.type,
-        icon: OFFICIAL_COLLECTION.icon,
-        selectedColor: OFFICIAL_COLLECTION.color,
-      },
-    ],
-  },
-];
-
-PLUGIN_FORM_WIDGETS.collectionAuthorityLevel = FormCollectionAuthorityLevel;
+PLUGIN_COLLECTION_COMPONENTS.FormCollectionAuthorityLevelPicker =
+  FormCollectionAuthorityLevel;
 
 PLUGIN_COLLECTION_COMPONENTS.CollectionAuthorityLevelIcon =
   CollectionAuthorityLevelIcon;
diff --git a/frontend/src/metabase/collections/containers/CollectionCreate/CollectionCreate.tsx b/frontend/src/metabase/collections/containers/CollectionCreate/CollectionCreate.tsx
deleted file mode 100644
index 1565db8625..0000000000
--- a/frontend/src/metabase/collections/containers/CollectionCreate/CollectionCreate.tsx
+++ /dev/null
@@ -1,103 +0,0 @@
-import React, { useCallback, useEffect, useState } from "react";
-import { connect } from "react-redux";
-import { withRouter } from "react-router";
-import { goBack } from "react-router-redux";
-import _ from "underscore";
-
-import { Collection as BaseCollection, CollectionId } from "metabase-types/api";
-import { State } from "metabase-types/store";
-
-import Collections from "metabase/entities/collections";
-
-import CollectionCreateForm from "./CollectionCreateForm";
-
-type Collection = BaseCollection & {
-  parent_id: CollectionId;
-};
-
-interface CollectionCreateOwnProps {
-  goBack?: () => void;
-  onClose?: () => void;
-  onSaved?: (collection: Collection) => void;
-}
-
-interface CollectionCreateStateProps {
-  initialCollectionId: CollectionId;
-}
-
-interface CollectionCreateProps
-  extends CollectionCreateOwnProps,
-    CollectionCreateStateProps {}
-
-function mapStateToProps(state: State, props: CollectionCreateOwnProps) {
-  return {
-    initialCollectionId: Collections.selectors.getInitialCollectionId(
-      state,
-      props,
-    ),
-  };
-}
-
-const mapDispatchToProps = {
-  goBack,
-};
-
-function CollectionCreate({
-  initialCollectionId,
-  goBack,
-  onClose,
-  onSaved,
-}: CollectionCreateProps) {
-  const [parentCollectionId, setParentCollectionId] =
-    useState<CollectionId>(initialCollectionId);
-  const [hasSetParentCollection, setHasSetParentCollection] = useState(false);
-
-  useEffect(() => {
-    if (!hasSetParentCollection) {
-      setParentCollectionId(initialCollectionId);
-    }
-  }, [initialCollectionId, hasSetParentCollection]);
-
-  const onChangeValues = useCallback(
-    (collection: Collection) => {
-      if (collection.parent_id !== parentCollectionId) {
-        setParentCollectionId(collection.parent_id);
-        setHasSetParentCollection(true);
-      }
-    },
-    [parentCollectionId],
-  );
-
-  const handleClose = useCallback(() => {
-    if (onClose) {
-      onClose();
-    } else {
-      goBack?.();
-    }
-  }, [goBack, onClose]);
-
-  const handleSave = useCallback(
-    (collection: Collection) => {
-      if (onSaved) {
-        onSaved(collection);
-      } else {
-        goBack?.();
-      }
-    },
-    [goBack, onSaved],
-  );
-
-  return (
-    <CollectionCreateForm
-      parentCollectionId={parentCollectionId}
-      onChange={onChangeValues}
-      onSaved={handleSave}
-      onClose={handleClose}
-    />
-  );
-}
-
-export default _.compose(
-  withRouter,
-  connect(mapStateToProps, mapDispatchToProps),
-)(CollectionCreate);
diff --git a/frontend/src/metabase/collections/containers/CollectionCreate/CollectionCreateForm.tsx b/frontend/src/metabase/collections/containers/CollectionCreate/CollectionCreateForm.tsx
deleted file mode 100644
index ca7e29e045..0000000000
--- a/frontend/src/metabase/collections/containers/CollectionCreate/CollectionCreateForm.tsx
+++ /dev/null
@@ -1,64 +0,0 @@
-import React from "react";
-import { connect } from "react-redux";
-import { withRouter } from "react-router";
-import _ from "underscore";
-
-import { Collection as BaseCollection, CollectionId } from "metabase-types/api";
-import { State } from "metabase-types/store";
-
-import Collections from "metabase/entities/collections";
-import { PLUGIN_COLLECTIONS } from "metabase/plugins";
-
-const { REGULAR_COLLECTION } = PLUGIN_COLLECTIONS;
-
-type Collection = BaseCollection & {
-  parent_id: CollectionId;
-};
-
-interface CollectionCreateFormOwnProps {
-  parentCollectionId: CollectionId;
-  onChange: (collection: Collection) => void;
-  onSaved?: (collection: Collection) => void;
-  onClose?: () => void;
-}
-
-interface CollectionCreateFormStateProps {
-  form: unknown;
-}
-
-interface CollectionCreateFormProps
-  extends CollectionCreateFormOwnProps,
-    CollectionCreateFormStateProps {}
-
-function mapStateToProps(state: State, props: CollectionCreateFormOwnProps) {
-  return {
-    form: Collections.selectors.getForm(state, props),
-  };
-}
-
-function CollectionCreateForm({
-  form,
-  parentCollectionId,
-  onChange,
-  onSaved,
-  onClose,
-}: CollectionCreateFormProps) {
-  return (
-    <Collections.ModalForm
-      form={form}
-      collection={{
-        parent_id: parentCollectionId,
-        authority_level: REGULAR_COLLECTION.type,
-      }}
-      overwriteOnInitialValuesChange
-      onChange={onChange}
-      onSaved={onSaved}
-      onClose={onClose}
-    />
-  );
-}
-
-export default _.compose(
-  withRouter,
-  connect(mapStateToProps),
-)(CollectionCreateForm);
diff --git a/frontend/src/metabase/collections/containers/CollectionCreate/index.ts b/frontend/src/metabase/collections/containers/CollectionCreate/index.ts
deleted file mode 100644
index eba57ce7ec..0000000000
--- a/frontend/src/metabase/collections/containers/CollectionCreate/index.ts
+++ /dev/null
@@ -1 +0,0 @@
-export { default } from "./CollectionCreate";
diff --git a/frontend/src/metabase/collections/containers/CreateCollectionForm.tsx b/frontend/src/metabase/collections/containers/CreateCollectionForm.tsx
new file mode 100644
index 0000000000..06a94d6cce
--- /dev/null
+++ b/frontend/src/metabase/collections/containers/CreateCollectionForm.tsx
@@ -0,0 +1,154 @@
+import React, { useCallback, useMemo } from "react";
+import { t } from "ttag";
+import _ from "underscore";
+import * as Yup from "yup";
+import { connect } from "react-redux";
+import { withRouter } from "react-router";
+
+import Button from "metabase/core/components/Button";
+import Form from "metabase/core/components/Form";
+import FormFooter from "metabase/core/components/FormFooter";
+import FormProvider from "metabase/core/components/FormProvider";
+import FormInput from "metabase/core/components/FormInput";
+import FormTextArea from "metabase/core/components/FormTextArea";
+import FormSubmitButton from "metabase/core/components/FormSubmitButton";
+import FormErrorMessage from "metabase/core/components/FormErrorMessage";
+
+import * as Errors from "metabase/core/utils/errors";
+
+import { color } from "metabase/lib/colors";
+
+import Collections, {
+  DEFAULT_COLLECTION_COLOR_ALIAS,
+} from "metabase/entities/collections";
+
+import FormCollectionPicker from "metabase/collections/containers/FormCollectionPicker";
+
+import type { Collection } from "metabase-types/api";
+import type { State } from "metabase-types/store";
+
+import FormAuthorityLevelFieldContainer from "./FormAuthorityLevelFieldContainer";
+
+const COLLECTION_SCHEMA = Yup.object({
+  name: Yup.string()
+    .required(Errors.required)
+    .max(100, Errors.maxLength)
+    .default(""),
+  description: Yup.string().nullable().max(255, Errors.maxLength).default(null),
+  color: Yup.string()
+    .nullable()
+    .default(() => color(DEFAULT_COLLECTION_COLOR_ALIAS)),
+  authority_level: Yup.mixed().oneOf(["official", null]).default(null),
+  parent_id: Yup.number().nullable(),
+});
+
+interface CreateCollectionProperties {
+  name: string;
+  description: string | null;
+  color: string | null;
+  parent_id: Collection["id"];
+}
+
+export interface CreateCollectionFormOwnProps {
+  collectionId?: Collection["id"]; // can be used by `getInitialCollectionId`
+  onCreate?: (collection: Collection) => void;
+  onCancel?: () => void;
+}
+
+interface CreateCollectionFormStateProps {
+  initialCollectionId: Collection["id"];
+}
+
+interface CreateCollectionFormDispatchProps {
+  handleCreateCollection: (
+    collection: CreateCollectionProperties,
+  ) => Promise<Collection>;
+}
+
+type Props = CreateCollectionFormOwnProps &
+  CreateCollectionFormStateProps &
+  CreateCollectionFormDispatchProps;
+
+function mapStateToProps(
+  state: State,
+  props: CreateCollectionFormOwnProps,
+): CreateCollectionFormStateProps {
+  return {
+    initialCollectionId: Collections.selectors.getInitialCollectionId(
+      state,
+      props,
+    ),
+  };
+}
+
+const mapDispatchToProps = {
+  handleCreateCollection: Collections.actions.create,
+};
+
+function CreateCollectionForm({
+  initialCollectionId,
+  handleCreateCollection,
+  onCreate,
+  onCancel,
+}: Props) {
+  const initialValues = useMemo(
+    () => ({
+      ...COLLECTION_SCHEMA.getDefault(),
+      parent_id: initialCollectionId,
+    }),
+    [initialCollectionId],
+  );
+
+  const handleCreate = useCallback(
+    async (values: CreateCollectionProperties) => {
+      const action = await handleCreateCollection(values);
+      const collection = Collections.HACK_getObjectFromAction(action);
+      onCreate?.(collection);
+    },
+    [handleCreateCollection, onCreate],
+  );
+
+  return (
+    <FormProvider
+      initialValues={initialValues}
+      validationSchema={COLLECTION_SCHEMA}
+      onSubmit={handleCreate}
+    >
+      {({ dirty, values }) => (
+        <Form>
+          <FormInput
+            name="name"
+            title={t`Name`}
+            placeholder={t`My new fantastic collection`}
+            autoFocus
+          />
+          <FormTextArea
+            name="description"
+            title={t`Description`}
+            placeholder={t`It's optional but oh, so helpful`}
+            nullable
+          />
+          <FormCollectionPicker
+            name="parent_id"
+            title={t`Collection it's saved in`}
+          />
+          <FormAuthorityLevelFieldContainer
+            collectionParentId={values.parent_id}
+          />
+          <FormFooter>
+            <FormErrorMessage inline />
+            {!!onCancel && (
+              <Button type="button" onClick={onCancel}>{t`Cancel`}</Button>
+            )}
+            <FormSubmitButton title={t`Create`} disabled={!dirty} primary />
+          </FormFooter>
+        </Form>
+      )}
+    </FormProvider>
+  );
+}
+
+export default _.compose(
+  withRouter,
+  connect(mapStateToProps, mapDispatchToProps),
+)(CreateCollectionForm);
diff --git a/frontend/src/metabase/collections/containers/CreateCollectionForm.unit.spec.tsx b/frontend/src/metabase/collections/containers/CreateCollectionForm.unit.spec.tsx
new file mode 100644
index 0000000000..6175efa161
--- /dev/null
+++ b/frontend/src/metabase/collections/containers/CreateCollectionForm.unit.spec.tsx
@@ -0,0 +1,110 @@
+import React from "react";
+import userEvent from "@testing-library/user-event";
+import xhrMock from "xhr-mock";
+
+import { renderWithProviders, screen } from "__support__/ui";
+import { setupEnterpriseTest } from "__support__/enterprise";
+
+import { User } from "metabase-types/api";
+import { createMockCollection, createMockUser } from "metabase-types/api/mocks";
+
+import CreateCollectionForm from "./CreateCollectionForm";
+
+type SetupOpts = {
+  user?: User;
+  onCancel?: (() => void) | null;
+};
+
+function setup({ user, onCancel = jest.fn() }: SetupOpts = {}) {
+  xhrMock.post("/api/collection", (req, res) =>
+    res.status(200).body(createMockCollection(req.body())),
+  );
+
+  renderWithProviders(<CreateCollectionForm onCancel={onCancel} />, {
+    currentUser: user,
+  });
+
+  return { onCancel };
+}
+
+describe("CreateCollectionForm", () => {
+  beforeEach(() => {
+    xhrMock.setup();
+    xhrMock.get("/api/collection", {
+      body: JSON.stringify([
+        {
+          id: "root",
+          name: "Our analytics",
+          can_write: true,
+        },
+      ]),
+    });
+  });
+
+  afterEach(() => {
+    xhrMock.teardown();
+  });
+
+  it("displays correct blank state", () => {
+    setup();
+
+    expect(screen.getByLabelText("Name")).toBeInTheDocument();
+    expect(screen.getByLabelText("Name")).toHaveValue("");
+
+    expect(screen.getByLabelText("Description")).toBeInTheDocument();
+    expect(screen.getByLabelText("Description")).toHaveValue("");
+
+    expect(screen.getByText(/Collection it's saved in/i)).toBeInTheDocument();
+    expect(screen.getByText("Our analytics")).toBeInTheDocument();
+
+    expect(screen.getByRole("button", { name: "Cancel" })).toBeInTheDocument();
+    expect(screen.getByRole("button", { name: "Create" })).toBeInTheDocument();
+  });
+
+  it("can't submit if name is empty", () => {
+    setup();
+    expect(screen.getByRole("button", { name: "Create" })).toBeDisabled();
+  });
+
+  it("doesn't show cancel button if onCancel props is not set", () => {
+    setup({ onCancel: null });
+    expect(
+      screen.queryByRole("button", { name: "Cancel" }),
+    ).not.toBeInTheDocument();
+  });
+
+  it("calls onCancel when cancel button is clicked", () => {
+    const { onCancel } = setup();
+    userEvent.click(screen.getByRole("button", { name: "Cancel" }));
+    expect(onCancel).toHaveBeenCalledTimes(1);
+  });
+
+  describe("Collection authority level", () => {
+    describe("Free plan", () => {
+      it("is not shown", () => {
+        setup();
+        expect(
+          screen.queryByLabelText(/Collection type/i),
+        ).not.toBeInTheDocument();
+      });
+    });
+
+    describe("Paid plan", () => {
+      beforeEach(() => {
+        setupEnterpriseTest();
+      });
+
+      it("is shown", async () => {
+        setup();
+        expect(await screen.findByText(/Collection type/i)).toBeInTheDocument();
+        expect(screen.getByText(/Regular/i)).toBeInTheDocument();
+        expect(screen.getByText(/Official/i)).toBeInTheDocument();
+      });
+
+      it("isn't shown if user is not admin", async () => {
+        setup({ user: createMockUser({ is_superuser: false }) });
+        expect(screen.queryByText(/Collection type/i)).not.toBeInTheDocument();
+      });
+    });
+  });
+});
diff --git a/frontend/src/metabase/collections/containers/CreateCollectionModal.tsx b/frontend/src/metabase/collections/containers/CreateCollectionModal.tsx
new file mode 100644
index 0000000000..600165357b
--- /dev/null
+++ b/frontend/src/metabase/collections/containers/CreateCollectionModal.tsx
@@ -0,0 +1,70 @@
+import React, { useCallback } from "react";
+import { t } from "ttag";
+import { connect } from "react-redux";
+import { push } from "react-router-redux";
+import type { LocationDescriptor } from "history";
+
+import ModalContent from "metabase/components/ModalContent";
+
+import * as Urls from "metabase/lib/urls";
+
+import type { Collection } from "metabase-types/api";
+import type { State } from "metabase-types/store";
+
+import CreateCollectionForm, {
+  CreateCollectionFormOwnProps,
+} from "./CreateCollectionForm";
+
+interface CreateCollectionModalOwnProps
+  extends Omit<CreateCollectionFormOwnProps, "onCancel"> {
+  onClose?: () => void;
+}
+
+interface CreateCollectionModalDispatchProps {
+  onChangeLocation: (location: LocationDescriptor) => void;
+}
+
+type Props = CreateCollectionModalOwnProps & CreateCollectionModalDispatchProps;
+
+const mapDispatchToProps = {
+  onChangeLocation: push,
+};
+
+function CreateCollectionModal({
+  onCreate,
+  onChangeLocation,
+  onClose,
+  ...props
+}: Props) {
+  const handleCreate = useCallback(
+    (collection: Collection) => {
+      if (typeof onCreate === "function") {
+        onCreate(collection);
+      } else {
+        onClose?.();
+        onChangeLocation(Urls.collection(collection));
+      }
+    },
+    [onCreate, onChangeLocation, onClose],
+  );
+
+  return (
+    <ModalContent title={t`New collection`} onClose={onClose}>
+      <CreateCollectionForm
+        {...props}
+        onCreate={handleCreate}
+        onCancel={onClose}
+      />
+    </ModalContent>
+  );
+}
+
+export default connect<
+  unknown,
+  CreateCollectionModalDispatchProps,
+  CreateCollectionModalOwnProps,
+  State
+>(
+  null,
+  mapDispatchToProps,
+)(CreateCollectionModal);
diff --git a/frontend/src/metabase/collections/containers/FormAuthorityLevelFieldContainer.tsx b/frontend/src/metabase/collections/containers/FormAuthorityLevelFieldContainer.tsx
new file mode 100644
index 0000000000..c3108c4ac7
--- /dev/null
+++ b/frontend/src/metabase/collections/containers/FormAuthorityLevelFieldContainer.tsx
@@ -0,0 +1,64 @@
+import React, { useMemo } from "react";
+import { connect } from "react-redux";
+import _ from "underscore";
+
+import { getUserIsAdmin } from "metabase/selectors/user";
+
+import type { Collection } from "metabase-types/api";
+import type { State } from "metabase-types/store";
+
+import Collections from "metabase/entities/collections";
+import { canManageCollectionAuthorityLevel } from "metabase/collections/utils";
+
+import { PLUGIN_COLLECTION_COMPONENTS } from "metabase/plugins";
+
+type CollectionsMap = Record<Collection["id"], Collection>;
+
+interface OwnProps {
+  collectionParentId: Collection["id"];
+}
+
+interface StateProps {
+  isAdmin: boolean;
+  collectionsMap: CollectionsMap;
+}
+
+type FormAuthorityLevelFieldContainerProps = OwnProps & StateProps;
+
+function mapStateToProps(state: State): StateProps {
+  const { collections } = state.entities;
+  return {
+    isAdmin: getUserIsAdmin(state),
+    collectionsMap: collections || ({} as CollectionsMap),
+  };
+}
+
+function FormAuthorityLevelFieldContainer({
+  collectionParentId,
+  collectionsMap,
+  isAdmin,
+}: FormAuthorityLevelFieldContainerProps) {
+  const canManageAuthorityLevel = useMemo(
+    () =>
+      isAdmin &&
+      canManageCollectionAuthorityLevel(
+        { parent_id: collectionParentId },
+        collectionsMap,
+      ),
+    [collectionParentId, collectionsMap, isAdmin],
+  );
+
+  if (!canManageAuthorityLevel) {
+    return null;
+  }
+
+  return (
+    <PLUGIN_COLLECTION_COMPONENTS.FormCollectionAuthorityLevelPicker name="authority_level" />
+  );
+}
+
+export default _.compose(
+  // Ensures there's data for the `collectionsMap` prop
+  Collections.loadList({ loadingAndErrorWrapper: false }),
+  connect(mapStateToProps),
+)(FormAuthorityLevelFieldContainer);
diff --git a/frontend/src/metabase/collections/utils.ts b/frontend/src/metabase/collections/utils.ts
index a632ee096a..ddff06f138 100644
--- a/frontend/src/metabase/collections/utils.ts
+++ b/frontend/src/metabase/collections/utils.ts
@@ -1,5 +1,5 @@
 import { t } from "ttag";
-import { Collection, CollectionItem } from "metabase-types/api";
+import { Collection, CollectionId, CollectionItem } from "metabase-types/api";
 
 export function nonPersonalOrArchivedCollection(
   collection: Collection,
@@ -8,7 +8,7 @@ export function nonPersonalOrArchivedCollection(
   return !isPersonalCollection(collection) && !collection.archived;
 }
 
-export function isPersonalCollection(collection: Collection): boolean {
+export function isPersonalCollection(collection: Partial<Collection>): boolean {
   return typeof collection.personal_owner_id === "number";
 }
 
@@ -34,8 +34,7 @@ export function currentUserPersonalCollections(
 
 function getNonRootParentId(collection: Collection) {
   if (Array.isArray(collection.effective_ancestors)) {
-    // eslint-disable-next-line no-unused-vars
-    const [root, nonRootParent] = collection.effective_ancestors;
+    const [, nonRootParent] = collection.effective_ancestors;
     return nonRootParent ? nonRootParent.id : undefined;
   }
   // location is a string like "/1/4" where numbers are parent collection IDs
@@ -80,8 +79,8 @@ export function isFullyParametrized(item: CollectionItem) {
 }
 
 export function coerceCollectionId(
-  collectionId: number | null | undefined,
-): string | number {
+  collectionId: CollectionId | null | undefined,
+): CollectionId {
   return collectionId == null ? "root" : collectionId;
 }
 
@@ -105,3 +104,32 @@ export function isValidCollectionId(
   const id = canonicalCollectionId(collectionId);
   return id === null || typeof id === "number";
 }
+
+function isPersonalOrPersonalChild(
+  collection: Collection,
+  collections: Collection[],
+) {
+  if (!collection) {
+    return false;
+  }
+  return (
+    isPersonalCollection(collection) ||
+    isPersonalCollectionChild(collection, collections)
+  );
+}
+
+export function canManageCollectionAuthorityLevel(
+  collection: Partial<Collection>,
+  collectionMap: Record<CollectionId, Collection>,
+) {
+  if (isPersonalCollection(collection)) {
+    return false;
+  }
+  const parentId = coerceCollectionId(collection.parent_id);
+  const parentCollection = collectionMap[parentId];
+  const collections = Object.values(collectionMap);
+  return (
+    parentCollection &&
+    !isPersonalOrPersonalChild(parentCollection, collections)
+  );
+}
diff --git a/frontend/src/metabase/components/NewItemMenu/NewItemMenu.tsx b/frontend/src/metabase/components/NewItemMenu/NewItemMenu.tsx
index 05cd20bd09..c79b940c4e 100644
--- a/frontend/src/metabase/components/NewItemMenu/NewItemMenu.tsx
+++ b/frontend/src/metabase/components/NewItemMenu/NewItemMenu.tsx
@@ -6,10 +6,10 @@ import EntityMenu from "metabase/components/EntityMenu";
 
 import * as Urls from "metabase/lib/urls";
 
-import CollectionCreate from "metabase/collections/containers/CollectionCreate";
+import CreateCollectionModal from "metabase/collections/containers/CreateCollectionModal";
 import CreateDashboardModal from "metabase/dashboard/containers/CreateDashboardModal";
 
-import type { Collection, CollectionId } from "metabase-types/api";
+import type { CollectionId } from "metabase-types/api";
 
 type ModalType = "new-app" | "new-dashboard" | "new-collection";
 
@@ -23,7 +23,6 @@ export interface NewItemMenuProps {
   hasDataAccess: boolean;
   hasNativeWrite: boolean;
   hasDatabaseWithJsonEngine: boolean;
-  onChangeLocation: (location: string) => void;
   onCloseNavbar: () => void;
 }
 
@@ -37,7 +36,6 @@ const NewItemMenu = ({
   hasDataAccess,
   hasNativeWrite,
   hasDatabaseWithJsonEngine,
-  onChangeLocation,
   onCloseNavbar,
 }: NewItemMenuProps) => {
   const [modal, setModal] = useState<ModalType>();
@@ -46,14 +44,6 @@ const NewItemMenu = ({
     setModal(undefined);
   }, []);
 
-  const handleCollectionSave = useCallback(
-    (collection: Collection) => {
-      handleModalClose();
-      onChangeLocation(Urls.collection(collection));
-    },
-    [handleModalClose, onChangeLocation],
-  );
-
   const menuItems = useMemo(() => {
     const items = [];
 
@@ -130,10 +120,9 @@ const NewItemMenu = ({
         <>
           {modal === "new-collection" ? (
             <Modal onClose={handleModalClose}>
-              <CollectionCreate
+              <CreateCollectionModal
                 collectionId={collectionId}
                 onClose={handleModalClose}
-                onSaved={handleCollectionSave}
               />
             </Modal>
           ) : modal === "new-dashboard" ? (
diff --git a/frontend/src/metabase/containers/NewItemMenu/NewItemMenu.tsx b/frontend/src/metabase/containers/NewItemMenu/NewItemMenu.tsx
index b0d07b81f7..02c80d3506 100644
--- a/frontend/src/metabase/containers/NewItemMenu/NewItemMenu.tsx
+++ b/frontend/src/metabase/containers/NewItemMenu/NewItemMenu.tsx
@@ -1,6 +1,5 @@
 import { ReactNode } from "react";
 import { connect } from "react-redux";
-import { push } from "react-router-redux";
 import { closeNavbar } from "metabase/redux/app";
 import NewItemMenu from "metabase/components/NewItemMenu";
 import {
@@ -25,7 +24,6 @@ interface MenuStateProps {
 }
 
 interface MenuDispatchProps {
-  onChangeLocation: (location: string) => void;
   onCloseNavbar: () => void;
 }
 
@@ -36,7 +34,6 @@ const mapStateToProps = (state: State): MenuStateProps => ({
 });
 
 const mapDispatchToProps = {
-  onChangeLocation: push,
   onCloseNavbar: closeNavbar,
 };
 
diff --git a/frontend/src/metabase/entities/collections/collections.ts b/frontend/src/metabase/entities/collections/collections.ts
index 80ecd3138b..3925687002 100644
--- a/frontend/src/metabase/entities/collections/collections.ts
+++ b/frontend/src/metabase/entities/collections/collections.ts
@@ -13,7 +13,6 @@ import { canonicalCollectionId } from "metabase/collections/utils";
 import type { Collection } from "metabase-types/api";
 import type { GetState, ReduxAction } from "metabase-types/store";
 
-import { getFormSelector } from "./forms";
 import getExpandedCollectionsById from "./getExpandedCollectionsById";
 import getInitialCollectionId from "./getInitialCollectionId";
 import { getCollectionIcon, getCollectionType } from "./utils";
@@ -80,7 +79,6 @@ const Collections = createEntity({
   },
 
   selectors: {
-    getForm: getFormSelector,
     getExpandedCollectionsById: createSelector(
       [state => state.entities.collections || {}, getUserPersonalCollectionId],
       (collections, currentUserPersonalCollectionId) =>
diff --git a/frontend/src/metabase/entities/collections/forms.js b/frontend/src/metabase/entities/collections/forms.js
deleted file mode 100644
index 361c2014b2..0000000000
--- a/frontend/src/metabase/entities/collections/forms.js
+++ /dev/null
@@ -1,97 +0,0 @@
-import { createSelector } from "reselect";
-import { t } from "ttag";
-
-import { PLUGIN_COLLECTIONS } from "metabase/plugins";
-import { color } from "metabase/lib/colors";
-import { getUser } from "metabase/selectors/user";
-
-import {
-  isPersonalCollection,
-  isPersonalCollectionChild,
-} from "metabase/collections/utils";
-
-import { DEFAULT_COLLECTION_COLOR_ALIAS } from "./constants";
-
-export function createNameField() {
-  return {
-    name: "name",
-    title: t`Name`,
-    placeholder: t`My new fantastic collection`,
-    autoFocus: true,
-    validate: name =>
-      (!name && t`Name is required`) ||
-      (name && name.length > 100 && t`Name must be 100 characters or less`),
-  };
-}
-
-export function createDescriptionField() {
-  return {
-    name: "description",
-    title: t`Description`,
-    type: "text",
-    placeholder: t`It's optional but oh, so helpful`,
-    normalize: description => description || null, // expected to be nil or non-empty string
-  };
-}
-
-function createForm({ extraFields = [] } = {}) {
-  return {
-    fields: (
-      values = {
-        color: color("brand"),
-      },
-    ) => [
-      createNameField(),
-      createDescriptionField(),
-      {
-        name: "color",
-        title: t`Color`,
-        type: "hidden",
-        initial: () => color(DEFAULT_COLLECTION_COLOR_ALIAS),
-        validate: color => !color && t`Color is required`,
-      },
-      {
-        name: "parent_id",
-        title: t`Collection it's saved in`,
-        type: "collection",
-      },
-      ...extraFields,
-    ],
-  };
-}
-
-function isPersonalOrPersonalChild(collection, collectionList) {
-  if (!collection) {
-    return false;
-  }
-  return (
-    isPersonalCollection(collection) ||
-    isPersonalCollectionChild(collection, collectionList)
-  );
-}
-
-export const getFormSelector = createSelector(
-  [
-    (state, props) => props.collection || {},
-    (state, props) => props.parentCollectionId,
-    state => state.entities.collections || {},
-    getUser,
-  ],
-  (collection, parentCollectionId, allCollections, user) => {
-    const collectionList = Object.values(allCollections);
-    const extraFields = [];
-
-    const parentId = parentCollectionId || collection?.parent_id;
-    const parentCollection = allCollections[parentId];
-    const canManageAuthorityLevel =
-      user.is_superuser &&
-      !isPersonalCollection(collection) &&
-      !isPersonalOrPersonalChild(parentCollection, collectionList);
-
-    if (canManageAuthorityLevel) {
-      extraFields.push(...PLUGIN_COLLECTIONS.getAuthorityLevelFormFields());
-    }
-
-    return createForm({ extraFields });
-  },
-);
diff --git a/frontend/src/metabase/entities/data-apps/forms.ts b/frontend/src/metabase/entities/data-apps/forms.ts
index fa931ecff5..b5304c26be 100644
--- a/frontend/src/metabase/entities/data-apps/forms.ts
+++ b/frontend/src/metabase/entities/data-apps/forms.ts
@@ -1,4 +1,26 @@
-import { createNameField, createDescriptionField } from "../collections/forms";
+import { t } from "ttag";
+
+function createNameField() {
+  return {
+    name: "name",
+    title: t`Name`,
+    placeholder: t`My new fantastic app`,
+    autoFocus: true,
+    validate: (name?: string) =>
+      (!name && t`Name is required`) ||
+      (name && name.length > 100 && t`Name must be 100 characters or less`),
+  };
+}
+
+function createDescriptionField() {
+  return {
+    name: "description",
+    title: t`Description`,
+    type: "text",
+    placeholder: t`It's optional but oh, so helpful`,
+    normalize: (description?: string) => description || null,
+  };
+}
 
 export function createNewAppForm() {
   return [createNameField(), createDescriptionField()];
diff --git a/frontend/src/metabase/nav/containers/MainNavbar/MainNavbarContainer/MainNavbarContainer.tsx b/frontend/src/metabase/nav/containers/MainNavbar/MainNavbarContainer/MainNavbarContainer.tsx
index d8026974b2..66a614bf86 100644
--- a/frontend/src/metabase/nav/containers/MainNavbar/MainNavbarContainer/MainNavbarContainer.tsx
+++ b/frontend/src/metabase/nav/containers/MainNavbar/MainNavbarContainer/MainNavbarContainer.tsx
@@ -22,7 +22,7 @@ import { logout } from "metabase/auth/actions";
 import { getUser, getUserIsAdmin } from "metabase/selectors/user";
 import { getHasDataAccess, getHasOwnDatabase } from "metabase/selectors/data";
 
-import CollectionCreate from "metabase/collections/containers/CollectionCreate";
+import CreateCollectionModal from "metabase/collections/containers/CreateCollectionModal";
 import {
   currentUserPersonalCollections,
   nonPersonalOrArchivedCollection,
@@ -138,9 +138,9 @@ function MainNavbarContainer({
   const renderModalContent = useCallback(() => {
     if (modal === "MODAL_NEW_COLLECTION") {
       return (
-        <CollectionCreate
+        <CreateCollectionModal
           onClose={closeModal}
-          onSaved={(collection: Collection) => {
+          onCreate={(collection: Collection) => {
             closeModal();
             onChangeLocation(Urls.collection(collection));
           }}
diff --git a/frontend/src/metabase/plugins/index.ts b/frontend/src/metabase/plugins/index.ts
index bcb1968d6a..43e5ddc483 100644
--- a/frontend/src/metabase/plugins/index.ts
+++ b/frontend/src/metabase/plugins/index.ts
@@ -1,4 +1,4 @@
-import React from "react";
+import React, { HTMLAttributes } from "react";
 import { t } from "ttag";
 
 import { IconProps } from "metabase/components/Icon";
@@ -89,9 +89,7 @@ export const PLUGIN_SELECTORS = {
   getLoadingMessage: (state: State) => t`Doing science...`,
 };
 
-export const PLUGIN_FORM_WIDGETS: Record<string, React.ComponentType<any>> = {
-  collectionAuthorityLevel: PluginPlaceholder,
-};
+export const PLUGIN_FORM_WIDGETS: Record<string, React.ComponentType<any>> = {};
 
 // snippet sidebar
 export const PLUGIN_SNIPPET_SIDEBAR_PLUS_MENU_OPTIONS = [];
@@ -115,21 +113,12 @@ type AuthorityLevelMenuItem = {
   action: () => void;
 };
 
-type AuthorityLevelFormField = {
-  name: string;
-  title: string;
-  info?: string;
-  type: string;
-  options?: any[];
-};
-
 export const PLUGIN_COLLECTIONS = {
   AUTHORITY_LEVEL: {
     [JSON.stringify(AUTHORITY_LEVEL_REGULAR.type)]: AUTHORITY_LEVEL_REGULAR,
   },
   REGULAR_COLLECTION: AUTHORITY_LEVEL_REGULAR,
   isRegularCollection: (_: Collection | Bookmark) => true,
-  getAuthorityLevelFormFields: (): AuthorityLevelFormField[] => [],
   getAuthorityLevelMenuItems: (
     _collection: Collection,
     _onUpdate: (collection: Collection, values: Partial<Collection>) => void,
@@ -140,9 +129,15 @@ type CollectionAuthorityLevelIcon = React.ComponentType<
   Omit<IconProps, "name" | "tooltip"> & { collection: Collection }
 >;
 
+type FormCollectionAuthorityLevelPicker = React.ComponentType<
+  HTMLAttributes<HTMLDivElement> & { name: string; title?: string }
+>;
+
 export const PLUGIN_COLLECTION_COMPONENTS = {
   CollectionAuthorityLevelIcon:
     PluginPlaceholder as CollectionAuthorityLevelIcon,
+  FormCollectionAuthorityLevelPicker:
+    PluginPlaceholder as FormCollectionAuthorityLevelPicker,
 };
 
 export const PLUGIN_MODERATION = {
