commit edfc6f865ba0efb2fda2f346c1216492a6e7a6ea
Author: Alexander Polyankin <alexander.polyankin@metabase.com>
Date:   Fri Nov 11 15:32:27 2022 +0200

    Migrate slack forms to formik (#26273)

diff --git a/frontend/src/metabase-types/api/mocks/settings.ts b/frontend/src/metabase-types/api/mocks/settings.ts
index 254d7146a3..d1b645f7e9 100644
--- a/frontend/src/metabase-types/api/mocks/settings.ts
+++ b/frontend/src/metabase-types/api/mocks/settings.ts
@@ -81,11 +81,11 @@ export const createMockSettings = (opts?: Partial<Settings>): Settings => ({
   "show-homepage-pin-message": false,
   "show-lighthouse-illustration": true,
   "show-metabot": true,
-  "slack-token": undefined,
+  "slack-token": null,
   "token-status": createMockTokenStatus(),
   "slack-token-valid?": false,
-  "slack-app-token": undefined,
-  "slack-files-channel": undefined,
+  "slack-app-token": null,
+  "slack-files-channel": null,
   version: createMockVersion(),
   ...opts,
 });
diff --git a/frontend/src/metabase-types/api/mocks/slack.ts b/frontend/src/metabase-types/api/mocks/slack.ts
index b23271ce86..c7a905a0da 100644
--- a/frontend/src/metabase-types/api/mocks/slack.ts
+++ b/frontend/src/metabase-types/api/mocks/slack.ts
@@ -3,5 +3,7 @@ import { SlackSettings } from "metabase-types/api";
 export const createMockSlackSettings = (
   opts?: Partial<SlackSettings>,
 ): SlackSettings => ({
+  "slack-app-token": null,
+  "slack-files-channel": null,
   ...opts,
 });
diff --git a/frontend/src/metabase-types/api/settings.ts b/frontend/src/metabase-types/api/settings.ts
index a3812bacb9..c968f0a41c 100644
--- a/frontend/src/metabase-types/api/settings.ts
+++ b/frontend/src/metabase-types/api/settings.ts
@@ -85,10 +85,10 @@ export interface Settings {
   "show-homepage-pin-message": boolean;
   "show-lighthouse-illustration": boolean;
   "show-metabot": boolean;
-  "slack-token": string | undefined;
+  "slack-token": string | null;
   "slack-token-valid?": boolean;
-  "slack-app-token": string | undefined;
-  "slack-files-channel": string | undefined;
+  "slack-app-token": string | null;
+  "slack-files-channel": string | null;
   "token-status": TokenStatus | undefined;
   version: Version;
 }
diff --git a/frontend/src/metabase-types/api/slack.ts b/frontend/src/metabase-types/api/slack.ts
index 96659065f3..9719863fe9 100644
--- a/frontend/src/metabase-types/api/slack.ts
+++ b/frontend/src/metabase-types/api/slack.ts
@@ -1,4 +1,4 @@
 export interface SlackSettings {
-  "slack-app-token"?: string;
-  "slack-files-channel"?: string;
+  "slack-app-token": string | null;
+  "slack-files-channel": string | null;
 }
diff --git a/frontend/src/metabase-types/api/timeline.ts b/frontend/src/metabase-types/api/timeline.ts
index f8bf8072d2..9deeee97a1 100644
--- a/frontend/src/metabase-types/api/timeline.ts
+++ b/frontend/src/metabase-types/api/timeline.ts
@@ -48,7 +48,7 @@ export interface TimelineEventData {
   name: string;
   description: string | null;
   icon: string;
-  timestamp?: string;
+  timestamp: string;
   timezone: string;
   time_matters: boolean;
   archived: boolean;
diff --git a/frontend/src/metabase/account/password/components/UserPasswordForm/UserPasswordForm.tsx b/frontend/src/metabase/account/password/components/UserPasswordForm/UserPasswordForm.tsx
index 25cd68ace2..d426c2feac 100644
--- a/frontend/src/metabase/account/password/components/UserPasswordForm/UserPasswordForm.tsx
+++ b/frontend/src/metabase/account/password/components/UserPasswordForm/UserPasswordForm.tsx
@@ -10,15 +10,19 @@ import FormErrorMessage from "metabase/core/components/FormErrorMessage";
 import { User } from "metabase-types/api";
 import { UserPasswordData } from "../../types";
 
-const UserPasswordSchema = Yup.object({
-  old_password: Yup.string().required(t`required`),
+const USER_PASSWORD_SCHEMA = Yup.object({
+  old_password: Yup.string()
+    .default("")
+    .required(t`required`),
   password: Yup.string()
+    .default("")
     .required(t`required`)
     .test(async (value = "", context) => {
       const error = await context.options.context?.onValidatePassword(value);
       return error ? context.createError({ message: error }) : true;
     }),
   password_confirm: Yup.string()
+    .default("")
     .required(t`required`)
     .oneOf([Yup.ref("password")], t`passwords do not match`),
 });
@@ -34,10 +38,9 @@ const UserPasswordForm = ({
   onValidatePassword,
   onSubmit,
 }: UserPasswordFormProps): JSX.Element => {
-  const initialValues = useMemo(
-    () => ({ old_password: "", password: "", password_confirm: "" }),
-    [],
-  );
+  const initialValues = useMemo(() => {
+    return USER_PASSWORD_SCHEMA.getDefault();
+  }, []);
 
   const validationContext = useMemo(
     () => ({ onValidatePassword: _.memoize(onValidatePassword) }),
@@ -54,7 +57,7 @@ const UserPasswordForm = ({
   return (
     <FormProvider
       initialValues={initialValues}
-      validationSchema={UserPasswordSchema}
+      validationSchema={USER_PASSWORD_SCHEMA}
       validationContext={validationContext}
       onSubmit={handleSubmit}
     >
diff --git a/frontend/src/metabase/account/profile/components/UserProfileForm/UserProfileForm.tsx b/frontend/src/metabase/account/profile/components/UserProfileForm/UserProfileForm.tsx
index 6b9d650eaa..a284f93559 100644
--- a/frontend/src/metabase/account/profile/components/UserProfileForm/UserProfileForm.tsx
+++ b/frontend/src/metabase/account/profile/components/UserProfileForm/UserProfileForm.tsx
@@ -11,20 +11,21 @@ import FormErrorMessage from "metabase/core/components/FormErrorMessage";
 import { LocaleData, User } from "metabase-types/api";
 import { UserProfileData } from "../../types";
 
-const SsoProfileSchema = Yup.object({
-  locale: Yup.string().nullable(true),
+const SSO_PROFILE_SCHEMA = Yup.object({
+  locale: Yup.string().nullable().default(null),
 });
 
-const LocalProfileSchema = SsoProfileSchema.shape({
-  first_name: Yup.string().max(
-    100,
-    ({ max }) => t`must be ${max} characters or less`,
-  ),
-  last_name: Yup.string().max(
-    100,
-    ({ max }) => t`must be ${max} characters or less`,
-  ),
+const LOCAL_PROFILE_SCHEMA = SSO_PROFILE_SCHEMA.shape({
+  first_name: Yup.string()
+    .nullable()
+    .default(null)
+    .max(100, ({ max }) => t`must be ${max} characters or less`),
+  last_name: Yup.string()
+    .nullable()
+    .default(null)
+    .max(100, ({ max }) => t`must be ${max} characters or less`),
   email: Yup.string()
+    .ensure()
     .required(t`required`)
     .email(t`must be a valid email address`),
 });
@@ -42,18 +43,25 @@ const UserProfileForm = ({
   isSsoUser,
   onSubmit,
 }: UserProfileFormProps): JSX.Element => {
-  const initialValues = useMemo(() => getInitialValues(user), [user]);
-  const localeOptions = useMemo(() => getLocaleOptions(locales), [locales]);
+  const schema = isSsoUser ? SSO_PROFILE_SCHEMA : LOCAL_PROFILE_SCHEMA;
+
+  const initialValues = useMemo(() => {
+    return schema.cast(user, { stripUnknown: true });
+  }, [user, schema]);
+
+  const localeOptions = useMemo(() => {
+    return getLocaleOptions(locales);
+  }, [locales]);
 
   const handleSubmit = useCallback(
-    (data: UserProfileData) => onSubmit(user, getSubmitValues(data)),
+    (values: UserProfileData) => onSubmit(user, values),
     [user, onSubmit],
   );
 
   return (
     <FormProvider
       initialValues={initialValues}
-      validationSchema={isSsoUser ? SsoProfileSchema : LocalProfileSchema}
+      validationSchema={schema}
       enableReinitialize
       onSubmit={handleSubmit}
     >
@@ -65,11 +73,13 @@ const UserProfileForm = ({
                 name="first_name"
                 title={t`First name`}
                 placeholder={t`Johnny`}
+                nullable
               />
               <FormInput
                 name="last_name"
                 title={t`Last name`}
                 placeholder={t`Appleseed`}
+                nullable
               />
               <FormInput
                 name="email"
@@ -92,23 +102,6 @@ const UserProfileForm = ({
   );
 };
 
-const getInitialValues = (user: User): UserProfileData => {
-  return {
-    first_name: user.first_name || "",
-    last_name: user.last_name || "",
-    email: user.email,
-    locale: user.locale,
-  };
-};
-
-const getSubmitValues = (data: UserProfileData): UserProfileData => {
-  return {
-    ...data,
-    first_name: data.first_name || null,
-    last_name: data.last_name || null,
-  };
-};
-
 const getLocaleOptions = (locales: LocaleData[] | null) => {
   const options = _.chain(locales ?? [["en", "English"]])
     .map(([value, name]) => ({ name, value }))
diff --git a/frontend/src/metabase/account/profile/types.ts b/frontend/src/metabase/account/profile/types.ts
index 3518f64ee0..3fbc02ce4e 100644
--- a/frontend/src/metabase/account/profile/types.ts
+++ b/frontend/src/metabase/account/profile/types.ts
@@ -1,6 +1,6 @@
 export interface UserProfileData {
-  first_name: string | null;
-  last_name: string | null;
-  email: string;
+  first_name?: string | null;
+  last_name?: string | null;
+  email?: string;
   locale: string | null;
 }
diff --git a/frontend/src/metabase/admin/settings/slack/components/SlackForm/SlackForm.styled.tsx b/frontend/src/metabase/admin/settings/slack/components/SlackForm/SlackForm.styled.tsx
new file mode 100644
index 0000000000..de4aa58d8b
--- /dev/null
+++ b/frontend/src/metabase/admin/settings/slack/components/SlackForm/SlackForm.styled.tsx
@@ -0,0 +1,7 @@
+import styled from "@emotion/styled";
+import { color } from "metabase/lib/colors";
+
+export const SlackFormMessage = styled.div`
+  color: ${color("text-medium")};
+  margin: 2rem 0 1rem;
+`;
diff --git a/frontend/src/metabase/admin/settings/slack/components/SlackForm/SlackForm.tsx b/frontend/src/metabase/admin/settings/slack/components/SlackForm/SlackForm.tsx
new file mode 100644
index 0000000000..4c3eed89ef
--- /dev/null
+++ b/frontend/src/metabase/admin/settings/slack/components/SlackForm/SlackForm.tsx
@@ -0,0 +1,77 @@
+import React, { useCallback, useMemo } from "react";
+import { t } from "ttag";
+import * as Yup from "yup";
+import Form from "metabase/core/components/Form";
+import FormProvider from "metabase/core/components/FormProvider";
+import FormInput from "metabase/core/components/FormInput";
+import FormSubmitButton from "metabase/core/components/FormSubmitButton";
+import FormErrorMessage from "metabase/core/components/FormErrorMessage";
+import { SlackSettings } from "metabase-types/api";
+import { SlackFormMessage } from "./SlackForm.styled";
+
+const SLACK_SCHEMA = Yup.object({
+  "slack-app-token": Yup.string()
+    .ensure()
+    .required(t`required`),
+  "slack-files-channel": Yup.string()
+    .ensure()
+    .required(t`required`)
+    .lowercase(),
+});
+
+export interface SlackFormProps {
+  initialValues: SlackSettings;
+  isReadOnly?: boolean;
+  onSubmit?: (values: SlackSettings) => void;
+}
+
+const SlackForm = ({
+  initialValues,
+  isReadOnly,
+  onSubmit = () => undefined,
+}: SlackFormProps): JSX.Element => {
+  const handleSubmit = useCallback(
+    (values: SlackSettings) => onSubmit(SLACK_SCHEMA.cast(values)),
+    [onSubmit],
+  );
+
+  return (
+    <FormProvider
+      initialValues={initialValues}
+      validationSchema={!isReadOnly ? SLACK_SCHEMA : undefined}
+      onSubmit={handleSubmit}
+    >
+      <Form>
+        <FormInput
+          name="slack-app-token"
+          title={t`Slack Bot User OAuth Token`}
+          placeholder="xoxb-781236542736-2364535789652-GkwFDQoHqzXDVsC6GzqYUypD"
+          readOnly={isReadOnly}
+        />
+        {!isReadOnly && (
+          <SlackFormMessage>
+            {SLACK_CHANNEL_PROMPT} {SLACK_CHANNEL_DESCRIPTION}
+          </SlackFormMessage>
+        )}
+        <FormInput
+          name="slack-files-channel"
+          title={t`Public channel to store image files`}
+          description={isReadOnly ? SLACK_CHANNEL_DESCRIPTION : undefined}
+          placeholder="metabase_files"
+          readOnly={isReadOnly}
+        />
+        {!isReadOnly && (
+          <>
+            <FormSubmitButton title={t`Save changes`} primary />
+            <FormErrorMessage />
+          </>
+        )}
+      </Form>
+    </FormProvider>
+  );
+};
+
+const SLACK_CHANNEL_PROMPT = t`Finally, open Slack, create a public channel and enter its name below.`;
+const SLACK_CHANNEL_DESCRIPTION = t`This channel shouldn't really be used by anyone — we'll upload charts and tables here before sending out dashboard subscriptions (it's a Slack requirement).`;
+
+export default SlackForm;
diff --git a/frontend/src/metabase/admin/settings/slack/components/SlackForm/index.ts b/frontend/src/metabase/admin/settings/slack/components/SlackForm/index.ts
new file mode 100644
index 0000000000..7f69ad5304
--- /dev/null
+++ b/frontend/src/metabase/admin/settings/slack/components/SlackForm/index.ts
@@ -0,0 +1 @@
+export { default } from "./SlackForm";
diff --git a/frontend/src/metabase/admin/settings/slack/components/SlackSetupForm/SlackSetupForm.tsx b/frontend/src/metabase/admin/settings/slack/components/SlackSetupForm/SlackSetupForm.tsx
index 40849a19e4..b36a86be28 100644
--- a/frontend/src/metabase/admin/settings/slack/components/SlackSetupForm/SlackSetupForm.tsx
+++ b/frontend/src/metabase/admin/settings/slack/components/SlackSetupForm/SlackSetupForm.tsx
@@ -1,33 +1,18 @@
-import React, { useMemo } from "react";
-import { t } from "ttag";
-import Form from "metabase/containers/FormikForm";
+import React from "react";
 import { SlackSettings } from "metabase-types/api";
-import { getSlackForm } from "../../forms";
-import { FormProps } from "./types";
-import { FormMessage } from "./SlackSetupForm.styled";
+import SlackForm from "../SlackForm";
+
+const DEFAULT_SETTINGS: SlackSettings = {
+  "slack-app-token": "",
+  "slack-files-channel": "",
+};
 
 export interface SlackSetupFormProps {
   onSubmit: (settings: SlackSettings) => void;
 }
 
 const SlackSetupForm = ({ onSubmit }: SlackSetupFormProps): JSX.Element => {
-  const form = useMemo(() => getSlackForm(), []);
-
-  return (
-    <Form form={form} onSubmit={onSubmit}>
-      {({ Form, FormField, FormFooter }: FormProps) => (
-        <Form>
-          <FormField name="slack-app-token" />
-          <FormMessage>
-            {t`Finally, open Slack, create a public channel and enter its name below.`}{" "}
-            {t`This channel shouldn't really be used by anyone — we'll upload charts and tables here before sending out dashboard subscriptions (it's a Slack requirement).`}
-          </FormMessage>
-          <FormField name="slack-files-channel" />
-          <FormFooter submitTitle={t`Save changes`} />
-        </Form>
-      )}
-    </Form>
-  );
+  return <SlackForm initialValues={DEFAULT_SETTINGS} onSubmit={onSubmit} />;
 };
 
 export default SlackSetupForm;
diff --git a/frontend/src/metabase/admin/settings/slack/components/SlackStatusForm/SlackStatusForm.tsx b/frontend/src/metabase/admin/settings/slack/components/SlackStatusForm/SlackStatusForm.tsx
index 06bfaa908c..a83ff003f4 100644
--- a/frontend/src/metabase/admin/settings/slack/components/SlackStatusForm/SlackStatusForm.tsx
+++ b/frontend/src/metabase/admin/settings/slack/components/SlackStatusForm/SlackStatusForm.tsx
@@ -1,35 +1,13 @@
-import React, { useCallback, useMemo } from "react";
-import { t } from "ttag";
-import Form from "metabase/containers/FormikForm";
+import React from "react";
 import { SlackSettings } from "metabase-types/api";
-import { getSlackForm } from "../../forms";
-import { FormProps } from "./types";
+import SlackForm from "../SlackForm";
 
 export interface SlackStatusFormProps {
   settings: SlackSettings;
 }
 
 const SlackStatusForm = ({ settings }: SlackStatusFormProps): JSX.Element => {
-  const form = useMemo(() => getSlackForm(true), []);
-  const onSubmit = useCallback(() => undefined, []);
-
-  return (
-    <Form<SlackSettings>
-      form={form}
-      initialValues={settings}
-      onSubmit={onSubmit}
-    >
-      {({ Form, FormField }: FormProps) => (
-        <Form>
-          <FormField name="slack-app-token" />
-          <FormField
-            name="slack-files-channel"
-            description={t`This channel shouldn't really be used by anyone — we'll upload charts and tables here before sending out dashboard subscriptions (it's a Slack requirement).`}
-          />
-        </Form>
-      )}
-    </Form>
-  );
+  return <SlackForm initialValues={settings} isReadOnly />;
 };
 
 export default SlackStatusForm;
diff --git a/frontend/src/metabase/admin/settings/slack/forms.ts b/frontend/src/metabase/admin/settings/slack/forms.ts
deleted file mode 100644
index bed6642d25..0000000000
--- a/frontend/src/metabase/admin/settings/slack/forms.ts
+++ /dev/null
@@ -1,27 +0,0 @@
-import { t } from "ttag";
-import { SlackSettings } from "metabase-types/api";
-import { FormObject } from "metabase-types/forms";
-
-export const getSlackForm = (
-  readOnly?: boolean,
-): FormObject<SlackSettings> => ({
-  fields: [
-    {
-      name: "slack-app-token",
-      type: "input",
-      title: t`Slack Bot User OAuth Token`,
-      placeholder: "xoxb-781236542736-2364535789652-GkwFDQoHqzXDVsC6GzqYUypD",
-      readOnly,
-      validate: (value: string) => !value && t`required`,
-    },
-    {
-      name: "slack-files-channel",
-      type: "input",
-      title: t`Public channel to store image files`,
-      placeholder: "metabase_files",
-      readOnly,
-      validate: (value: string) => !value && t`required`,
-      normalize: (value: string) => value.toLowerCase(),
-    },
-  ],
-});
diff --git a/frontend/src/metabase/auth/components/ForgotPasswordForm/ForgotPasswordForm.tsx b/frontend/src/metabase/auth/components/ForgotPasswordForm/ForgotPasswordForm.tsx
index c3eef6a2e7..f00b5e2f57 100644
--- a/frontend/src/metabase/auth/components/ForgotPasswordForm/ForgotPasswordForm.tsx
+++ b/frontend/src/metabase/auth/components/ForgotPasswordForm/ForgotPasswordForm.tsx
@@ -13,7 +13,7 @@ import {
   PasswordFormTitle,
 } from "./ForgotPasswordForm.styled";
 
-const ForgotPasswordSchema = Yup.object({
+const FORGOT_PASSWORD_SCHEMA = Yup.object({
   email: Yup.string()
     .required(t`required`)
     .email(t`must be a valid email address`),
@@ -43,7 +43,7 @@ const ForgotPasswordForm = ({
       <PasswordFormTitle>{t`Forgot password`}</PasswordFormTitle>
       <FormProvider
         initialValues={initialValues}
-        validationSchema={ForgotPasswordSchema}
+        validationSchema={FORGOT_PASSWORD_SCHEMA}
         onSubmit={handleSubmit}
       >
         <Form>
diff --git a/frontend/src/metabase/auth/components/LoginForm/LoginForm.tsx b/frontend/src/metabase/auth/components/LoginForm/LoginForm.tsx
index c382747183..01814d7d42 100644
--- a/frontend/src/metabase/auth/components/LoginForm/LoginForm.tsx
+++ b/frontend/src/metabase/auth/components/LoginForm/LoginForm.tsx
@@ -9,7 +9,7 @@ import FormInput from "metabase/core/components/FormInput";
 import FormSubmitButton from "metabase/core/components/FormSubmitButton";
 import { LoginData } from "../../types";
 
-const LoginSchema = Yup.object().shape({
+const LOGIN_SCHEMA = Yup.object().shape({
   username: Yup.string()
     .required(t`required`)
     .when("$isLdapEnabled", {
@@ -50,7 +50,7 @@ const LoginForm = ({
   return (
     <FormProvider
       initialValues={initialValues}
-      validationSchema={LoginSchema}
+      validationSchema={LOGIN_SCHEMA}
       validationContext={validationContext}
       onSubmit={onSubmit}
     >
diff --git a/frontend/src/metabase/auth/components/ResetPasswordForm/ResetPasswordForm.tsx b/frontend/src/metabase/auth/components/ResetPasswordForm/ResetPasswordForm.tsx
index c40cfb1361..6c496d38cb 100644
--- a/frontend/src/metabase/auth/components/ResetPasswordForm/ResetPasswordForm.tsx
+++ b/frontend/src/metabase/auth/components/ResetPasswordForm/ResetPasswordForm.tsx
@@ -14,14 +14,16 @@ import {
   PasswordFormTitle,
 } from "./ResetPasswordForm.styled";
 
-const ResetPasswordSchema = Yup.object({
+const RESET_PASSWORD_SCHEMA = Yup.object({
   password: Yup.string()
+    .default("")
     .required(t`required`)
     .test(async (value = "", context) => {
       const error = await context.options.context?.onValidatePassword(value);
       return error ? context.createError({ message: error }) : true;
     }),
   password_confirm: Yup.string()
+    .default("")
     .required(t`required`)
     .oneOf([Yup.ref("password")], t`passwords do not match`),
 });
@@ -35,15 +37,13 @@ const ResetPasswordForm = ({
   onValidatePassword,
   onSubmit,
 }: ResetPasswordFormProps): JSX.Element => {
-  const initialValues = useMemo(
-    () => ({ password: "", password_confirm: "" }),
-    [],
-  );
+  const initialValues = useMemo(() => {
+    return RESET_PASSWORD_SCHEMA.getDefault();
+  }, []);
 
-  const passwordDescription = useMemo(
-    () => MetabaseSettings.passwordComplexityDescription(),
-    [],
-  );
+  const passwordDescription = useMemo(() => {
+    return MetabaseSettings.passwordComplexityDescription();
+  }, []);
 
   const validationContext = useMemo(
     () => ({ onValidatePassword: _.memoize(onValidatePassword) }),
@@ -58,7 +58,7 @@ const ResetPasswordForm = ({
       </PasswordFormMessage>
       <FormProvider
         initialValues={initialValues}
-        validationSchema={ResetPasswordSchema}
+        validationSchema={RESET_PASSWORD_SCHEMA}
         validationContext={validationContext}
         onSubmit={onSubmit}
       >
diff --git a/frontend/src/metabase/core/components/FormCheckBox/FormCheckBox.unit.spec.tsx b/frontend/src/metabase/core/components/FormCheckBox/FormCheckBox.unit.spec.tsx
index 4ab202074b..d45b3ca237 100644
--- a/frontend/src/metabase/core/components/FormCheckBox/FormCheckBox.unit.spec.tsx
+++ b/frontend/src/metabase/core/components/FormCheckBox/FormCheckBox.unit.spec.tsx
@@ -5,7 +5,7 @@ import { render, screen, waitFor } from "@testing-library/react";
 import userEvent from "@testing-library/user-event";
 import FormCheckBox from "./FormCheckBox";
 
-const TestSchema = Yup.object().shape({
+const TEST_SCHEMA = Yup.object({
   value: Yup.boolean().isTrue("error"),
 });
 
@@ -21,7 +21,7 @@ const TestFormCheckBox = ({
   return (
     <Formik
       initialValues={{ value: initialValue }}
-      validationSchema={TestSchema}
+      validationSchema={TEST_SCHEMA}
       onSubmit={onSubmit}
     >
       <Form>
diff --git a/frontend/src/metabase/core/components/FormDateInput/FormDateInput.tsx b/frontend/src/metabase/core/components/FormDateInput/FormDateInput.tsx
index 6838089945..1d91ca7295 100644
--- a/frontend/src/metabase/core/components/FormDateInput/FormDateInput.tsx
+++ b/frontend/src/metabase/core/components/FormDateInput/FormDateInput.tsx
@@ -15,10 +15,19 @@ export interface FormDateInputProps
   name: string;
   title?: string;
   description?: ReactNode;
+  nullable?: boolean;
 }
 
 const FormDateInput = forwardRef(function FormDateInput(
-  { name, className, style, title, description, ...props }: FormDateInputProps,
+  {
+    name,
+    className,
+    style,
+    title,
+    description,
+    nullable,
+    ...props
+  }: FormDateInputProps,
   ref: Ref<HTMLDivElement>,
 ) {
   const id = useUniqueId();
@@ -29,10 +38,14 @@ const FormDateInput = forwardRef(function FormDateInput(
   }, [value]);
 
   const handleChange = useCallback(
-    (date?: Moment) => {
-      setValue(date?.toISOString(true));
+    (date: Moment | undefined) => {
+      if (date) {
+        setValue(date.toISOString(true));
+      } else {
+        setValue(nullable ? null : undefined);
+      }
     },
-    [setValue],
+    [nullable, setValue],
   );
 
   return (
diff --git a/frontend/src/metabase/core/components/FormDateInput/FormDateInput.unit.spec.tsx b/frontend/src/metabase/core/components/FormDateInput/FormDateInput.unit.spec.tsx
index 362236097f..b543874029 100644
--- a/frontend/src/metabase/core/components/FormDateInput/FormDateInput.unit.spec.tsx
+++ b/frontend/src/metabase/core/components/FormDateInput/FormDateInput.unit.spec.tsx
@@ -5,7 +5,7 @@ import { render, screen, waitFor } from "@testing-library/react";
 import userEvent from "@testing-library/user-event";
 import FormDateInput from "./FormDateInput";
 
-const TestSchema = Yup.object().shape({
+const TEST_SCHEMA = Yup.object({
   value: Yup.string().required("error"),
 });
 
@@ -21,7 +21,7 @@ const TestFormDateInput = ({
   return (
     <Formik
       initialValues={{ value: initialValue }}
-      validationSchema={TestSchema}
+      validationSchema={TEST_SCHEMA}
       onSubmit={onSubmit}
     >
       <Form>
diff --git a/frontend/src/metabase/core/components/FormInput/FormInput.tsx b/frontend/src/metabase/core/components/FormInput/FormInput.tsx
index 3cc7b675e5..9a4d57e6ee 100644
--- a/frontend/src/metabase/core/components/FormInput/FormInput.tsx
+++ b/frontend/src/metabase/core/components/FormInput/FormInput.tsx
@@ -1,4 +1,10 @@
-import React, { forwardRef, ReactNode, Ref } from "react";
+import React, {
+  ChangeEvent,
+  forwardRef,
+  ReactNode,
+  Ref,
+  useCallback,
+} from "react";
 import { useField } from "formik";
 import { useUniqueId } from "metabase/hooks/use-unique-id";
 import Input, { InputProps } from "metabase/core/components/Input";
@@ -12,14 +18,30 @@ export interface FormInputProps
   name: string;
   title?: string;
   description?: ReactNode;
+  nullable?: boolean;
 }
 
 const FormInput = forwardRef(function FormInput(
-  { name, className, style, title, description, ...props }: FormInputProps,
+  {
+    name,
+    className,
+    style,
+    title,
+    description,
+    nullable,
+    ...props
+  }: FormInputProps,
   ref: Ref<HTMLDivElement>,
 ) {
   const id = useUniqueId();
-  const [{ value, onChange, onBlur }, { error, touched }] = useField(name);
+  const [{ value, onBlur }, { error, touched }, { setValue }] = useField(name);
+
+  const handleChange = useCallback(
+    ({ target: { value } }: ChangeEvent<HTMLInputElement>) => {
+      setValue(value === "" && nullable ? null : value);
+    },
+    [nullable, setValue],
+  );
 
   return (
     <FormField
@@ -35,10 +57,10 @@ const FormInput = forwardRef(function FormInput(
         {...props}
         id={id}
         name={name}
-        value={value}
+        value={value ?? ""}
         error={touched && error != null}
         fullWidth
-        onChange={onChange}
+        onChange={handleChange}
         onBlur={onBlur}
       />
     </FormField>
diff --git a/frontend/src/metabase/core/components/FormInput/FormInput.unit.spec.tsx b/frontend/src/metabase/core/components/FormInput/FormInput.unit.spec.tsx
index f053d71438..7cf806be10 100644
--- a/frontend/src/metabase/core/components/FormInput/FormInput.unit.spec.tsx
+++ b/frontend/src/metabase/core/components/FormInput/FormInput.unit.spec.tsx
@@ -5,7 +5,7 @@ import { render, screen, waitFor } from "@testing-library/react";
 import userEvent from "@testing-library/user-event";
 import FormInput from "./FormInput";
 
-const TestSchema = Yup.object().shape({
+const TEST_SCHEMA = Yup.object({
   value: Yup.string().required("error"),
 });
 
@@ -18,7 +18,7 @@ const TestFormInput = ({ initialValue = "", onSubmit }: TestFormInputProps) => {
   return (
     <Formik
       initialValues={{ value: initialValue }}
-      validationSchema={TestSchema}
+      validationSchema={TEST_SCHEMA}
       onSubmit={onSubmit}
     >
       <Form>
diff --git a/frontend/src/metabase/core/components/FormNumericInput/FormNumericInput.tsx b/frontend/src/metabase/core/components/FormNumericInput/FormNumericInput.tsx
index 2cfb167ad3..cad0de1e5b 100644
--- a/frontend/src/metabase/core/components/FormNumericInput/FormNumericInput.tsx
+++ b/frontend/src/metabase/core/components/FormNumericInput/FormNumericInput.tsx
@@ -1,4 +1,10 @@
-import React, { forwardRef, ReactNode, Ref } from "react";
+import React, {
+  ChangeEvent,
+  forwardRef,
+  ReactNode,
+  Ref,
+  useCallback,
+} from "react";
 import { useField } from "formik";
 import { useUniqueId } from "metabase/hooks/use-unique-id";
 import NumericInput, {
@@ -14,6 +20,7 @@ export interface FormNumericInputProps
   name: string;
   title?: string;
   description?: ReactNode;
+  nullable?: boolean;
 }
 
 const FormNumericInput = forwardRef(function FormNumericInput(
@@ -23,6 +30,7 @@ const FormNumericInput = forwardRef(function FormNumericInput(
     style,
     title,
     description,
+    nullable,
     ...props
   }: FormNumericInputProps,
   ref: Ref<HTMLDivElement>,
@@ -30,6 +38,13 @@ const FormNumericInput = forwardRef(function FormNumericInput(
   const id = useUniqueId();
   const [{ value, onBlur }, { error, touched }, { setValue }] = useField(name);
 
+  const handleChange = useCallback(
+    (value: number | undefined) => {
+      setValue(value === undefined && nullable ? null : value);
+    },
+    [nullable, setValue],
+  );
+
   return (
     <FormField
       ref={ref}
@@ -44,10 +59,10 @@ const FormNumericInput = forwardRef(function FormNumericInput(
         {...props}
         id={id}
         name={name}
-        value={value}
+        value={value ?? undefined}
         error={touched && error != null}
         fullWidth
-        onChange={setValue}
+        onChange={handleChange}
         onBlur={onBlur}
       />
     </FormField>
diff --git a/frontend/src/metabase/core/components/FormNumericInput/FormNumericInput.unit.spec.tsx b/frontend/src/metabase/core/components/FormNumericInput/FormNumericInput.unit.spec.tsx
index f82aa06766..04857b3ca2 100644
--- a/frontend/src/metabase/core/components/FormNumericInput/FormNumericInput.unit.spec.tsx
+++ b/frontend/src/metabase/core/components/FormNumericInput/FormNumericInput.unit.spec.tsx
@@ -5,7 +5,7 @@ import { render, screen, waitFor } from "@testing-library/react";
 import userEvent from "@testing-library/user-event";
 import FormNumericInput from "./FormNumericInput";
 
-const TestSchema = Yup.object().shape({
+const TEST_SCHEMA = Yup.object({
   value: Yup.number().required("error"),
 });
 
@@ -21,7 +21,7 @@ const TestFormNumericInput = ({
   return (
     <Formik
       initialValues={{ value: initialValue }}
-      validationSchema={TestSchema}
+      validationSchema={TEST_SCHEMA}
       onSubmit={onSubmit}
     >
       <Form>
diff --git a/frontend/src/metabase/core/components/FormRadio/FormRadio.unit.spec.tsx b/frontend/src/metabase/core/components/FormRadio/FormRadio.unit.spec.tsx
index ffce929998..c911b52629 100644
--- a/frontend/src/metabase/core/components/FormRadio/FormRadio.unit.spec.tsx
+++ b/frontend/src/metabase/core/components/FormRadio/FormRadio.unit.spec.tsx
@@ -5,7 +5,7 @@ import { render, screen, waitFor } from "@testing-library/react";
 import userEvent from "@testing-library/user-event";
 import FormRadio from "./FormRadio";
 
-const TestSchema = Yup.object().shape({
+const TEST_SCHEMA = Yup.object({
   value: Yup.string().notOneOf(["bar"], "error"),
 });
 
@@ -24,7 +24,7 @@ const TestFormRadio = ({ initialValue, onSubmit }: TestFormRadioProps) => {
   return (
     <Formik
       initialValues={{ value: initialValue }}
-      validationSchema={TestSchema}
+      validationSchema={TEST_SCHEMA}
       onSubmit={onSubmit}
     >
       <Form>
diff --git a/frontend/src/metabase/core/components/FormSelect/FormSelect.unit.spec.tsx b/frontend/src/metabase/core/components/FormSelect/FormSelect.unit.spec.tsx
index 8828079999..5065da1713 100644
--- a/frontend/src/metabase/core/components/FormSelect/FormSelect.unit.spec.tsx
+++ b/frontend/src/metabase/core/components/FormSelect/FormSelect.unit.spec.tsx
@@ -5,7 +5,7 @@ import { render, screen, waitFor } from "@testing-library/react";
 import userEvent from "@testing-library/user-event";
 import FormSelect from "./FormSelect";
 
-const TestSchema = Yup.object().shape({
+const TEST_SCHEMA = Yup.object({
   value: Yup.string().notOneOf(["bar"], "error"),
 });
 
@@ -24,7 +24,7 @@ const TestFormSelect = ({ initialValue, onSubmit }: TestFormSelectProps) => {
   return (
     <Formik
       initialValues={{ value: initialValue }}
-      validationSchema={TestSchema}
+      validationSchema={TEST_SCHEMA}
       onSubmit={onSubmit}
     >
       <Form>
diff --git a/frontend/src/metabase/core/components/FormTextArea/FormTextArea.tsx b/frontend/src/metabase/core/components/FormTextArea/FormTextArea.tsx
index 9b408cb995..bb1bb4b5bf 100644
--- a/frontend/src/metabase/core/components/FormTextArea/FormTextArea.tsx
+++ b/frontend/src/metabase/core/components/FormTextArea/FormTextArea.tsx
@@ -1,4 +1,10 @@
-import React, { forwardRef, ReactNode, Ref } from "react";
+import React, {
+  ChangeEvent,
+  forwardRef,
+  ReactNode,
+  Ref,
+  useCallback,
+} from "react";
 import { useField } from "formik";
 import { useUniqueId } from "metabase/hooks/use-unique-id";
 import TextArea, { TextAreaProps } from "metabase/core/components/TextArea";
@@ -12,6 +18,7 @@ export interface FormTextAreaProps
   name: string;
   title?: string;
   description?: ReactNode;
+  nullable?: boolean;
   infoLabel?: string;
   infoTooltip?: string;
 }
@@ -23,6 +30,7 @@ const FormTextArea = forwardRef(function FormTextArea(
     style,
     title,
     description,
+    nullable,
     infoLabel,
     infoTooltip,
     ...props
@@ -30,7 +38,14 @@ const FormTextArea = forwardRef(function FormTextArea(
   ref: Ref<HTMLDivElement>,
 ) {
   const id = useUniqueId();
-  const [{ value, onChange, onBlur }, { error, touched }] = useField(name);
+  const [{ value, onBlur }, { error, touched }, { setValue }] = useField(name);
+
+  const handleChange = useCallback(
+    ({ target: { value } }: ChangeEvent<HTMLTextAreaElement>) => {
+      setValue(value === "" && nullable ? null : value);
+    },
+    [nullable, setValue],
+  );
 
   return (
     <FormField
@@ -48,10 +63,10 @@ const FormTextArea = forwardRef(function FormTextArea(
         {...props}
         id={id}
         name={name}
-        value={value}
+        value={value ?? ""}
         error={touched && error != null}
         fullWidth
-        onChange={onChange}
+        onChange={handleChange}
         onBlur={onBlur}
       />
     </FormField>
diff --git a/frontend/src/metabase/core/components/FormToggle/FormToggle.unit.spec.tsx b/frontend/src/metabase/core/components/FormToggle/FormToggle.unit.spec.tsx
index dcb58a7ff6..d43345fd47 100644
--- a/frontend/src/metabase/core/components/FormToggle/FormToggle.unit.spec.tsx
+++ b/frontend/src/metabase/core/components/FormToggle/FormToggle.unit.spec.tsx
@@ -5,7 +5,7 @@ import { render, screen, waitFor } from "@testing-library/react";
 import userEvent from "@testing-library/user-event";
 import FormToggle from "./FormToggle";
 
-const TestSchema = Yup.object().shape({
+const TEST_SCHEMA = Yup.object({
   value: Yup.boolean().isTrue("error"),
 });
 
@@ -21,7 +21,7 @@ const TestFormToggle = ({
   return (
     <Formik
       initialValues={{ value: initialValue }}
-      validationSchema={TestSchema}
+      validationSchema={TEST_SCHEMA}
       onSubmit={onSubmit}
     >
       <Form>
diff --git a/frontend/src/metabase/setup/components/InviteUserForm/InviteUserForm.tsx b/frontend/src/metabase/setup/components/InviteUserForm/InviteUserForm.tsx
index 88d309873d..64415ac089 100644
--- a/frontend/src/metabase/setup/components/InviteUserForm/InviteUserForm.tsx
+++ b/frontend/src/metabase/setup/components/InviteUserForm/InviteUserForm.tsx
@@ -1,4 +1,4 @@
-import React, { useCallback, useMemo } from "react";
+import React, { useMemo } from "react";
 import { t } from "ttag";
 import * as Yup from "yup";
 import Form from "metabase/core/components/Form";
@@ -8,16 +8,17 @@ import FormSubmitButton from "metabase/core/components/FormSubmitButton";
 import { InviteInfo, UserInfo } from "metabase-types/store";
 import { UserFieldGroup } from "./InviteUserForm.styled";
 
-const InviteUserSchema = Yup.object({
-  first_name: Yup.string().max(
-    100,
-    ({ max }) => t`must be ${max} characters or less`,
-  ),
-  last_name: Yup.string().max(
-    100,
-    ({ max }) => t`must be ${max} characters or less`,
-  ),
+const INVITE_USER_SCHEMA = Yup.object({
+  first_name: Yup.string()
+    .nullable()
+    .default(null)
+    .max(100, ({ max }) => t`must be ${max} characters or less`),
+  last_name: Yup.string()
+    .nullable()
+    .default(null)
+    .max(100, ({ max }) => t`must be ${max} characters or less`),
   email: Yup.string()
+    .default("")
     .required(t`required`)
     .email(t`must be a valid email address`)
     .notOneOf(
@@ -38,20 +39,15 @@ const InviteUserForm = ({
   onSubmit,
 }: InviteUserFormProps): JSX.Element => {
   const initialValues = useMemo(() => {
-    return getInitialValues(invite);
+    return invite ?? INVITE_USER_SCHEMA.getDefault();
   }, [invite]);
 
-  const handleSubmit = useCallback(
-    (values: InviteInfo) => onSubmit(getSubmitValues(values)),
-    [onSubmit],
-  );
-
   return (
     <FormProvider
       initialValues={initialValues}
-      validationSchema={InviteUserSchema}
+      validationSchema={INVITE_USER_SCHEMA}
       validationContext={user}
-      onSubmit={handleSubmit}
+      onSubmit={onSubmit}
     >
       <Form>
         <UserFieldGroup>
@@ -59,12 +55,14 @@ const InviteUserForm = ({
             name="first_name"
             title={t`First name`}
             placeholder={t`Johnny`}
+            nullable
             autoFocus
           />
           <FormInput
             name="last_name"
             title={t`Last name`}
             placeholder={t`Appleseed`}
+            nullable
           />
         </UserFieldGroup>
         <FormInput
@@ -78,21 +76,4 @@ const InviteUserForm = ({
   );
 };
 
-const getInitialValues = (invite?: InviteInfo): InviteInfo => {
-  return {
-    email: "",
-    ...invite,
-    first_name: invite?.first_name || "",
-    last_name: invite?.last_name || "",
-  };
-};
-
-const getSubmitValues = (invite: InviteInfo): InviteInfo => {
-  return {
-    ...invite,
-    first_name: invite.first_name || null,
-    last_name: invite.last_name || null,
-  };
-};
-
 export default InviteUserForm;
diff --git a/frontend/src/metabase/setup/components/NewsletterForm/NewsletterForm.tsx b/frontend/src/metabase/setup/components/NewsletterForm/NewsletterForm.tsx
index 552c16edbb..5ad65b417d 100644
--- a/frontend/src/metabase/setup/components/NewsletterForm/NewsletterForm.tsx
+++ b/frontend/src/metabase/setup/components/NewsletterForm/NewsletterForm.tsx
@@ -18,7 +18,7 @@ import {
   EmailFormInput,
 } from "./NewsletterForm.styled";
 
-const NewsletterSchema = Yup.object({
+const NEWSLETTER_SCHEMA = Yup.object({
   email: Yup.string()
     .required(t`required`)
     .email(t`must be a valid email address`),
@@ -58,7 +58,7 @@ const NewsletterForm = ({
       {!isSubscribed && (
         <FormProvider
           initialValues={initialValues}
-          validationSchema={NewsletterSchema}
+          validationSchema={NEWSLETTER_SCHEMA}
           onSubmit={handleSubmit}
         >
           <EmailForm>
diff --git a/frontend/src/metabase/setup/components/UserForm/UserForm.tsx b/frontend/src/metabase/setup/components/UserForm/UserForm.tsx
index 465be1519c..98970af2c5 100644
--- a/frontend/src/metabase/setup/components/UserForm/UserForm.tsx
+++ b/frontend/src/metabase/setup/components/UserForm/UserForm.tsx
@@ -8,26 +8,31 @@ import FormSubmitButton from "metabase/core/components/FormSubmitButton";
 import { UserInfo } from "metabase-types/store";
 import { UserFieldGroup, UserFormRoot } from "./UserForm.styled";
 
-const UserSchema = Yup.object({
-  first_name: Yup.string().max(
-    100,
-    ({ max }) => t`must be ${max} characters or less`,
-  ),
-  last_name: Yup.string().max(
-    100,
-    ({ max }) => t`must be ${max} characters or less`,
-  ),
+const USER_SCHEMA = Yup.object({
+  first_name: Yup.string()
+    .nullable()
+    .default(null)
+    .max(100, ({ max }) => t`must be ${max} characters or less`),
+  last_name: Yup.string()
+    .nullable()
+    .default(null)
+    .max(100, ({ max }) => t`must be ${max} characters or less`),
   email: Yup.string()
+    .default("")
     .required(t`required`)
     .email(t`must be a valid email address`),
-  site_name: Yup.string().required(t`required`),
+  site_name: Yup.string()
+    .default("")
+    .required(t`required`),
   password: Yup.string()
+    .default("")
     .required(t`required`)
     .test(async (value = "", context) => {
       const error = await context.options.context?.onValidatePassword(value);
       return error ? context.createError({ message: error }) : true;
     }),
   password_confirm: Yup.string()
+    .default("")
     .required(t`required`)
     .oneOf([Yup.ref("password")], t`passwords do not match`),
 });
@@ -40,7 +45,7 @@ interface UserFormProps {
 
 const UserForm = ({ user, onValidatePassword, onSubmit }: UserFormProps) => {
   const initialValues = useMemo(() => {
-    return getInitialValues(user);
+    return user ?? USER_SCHEMA.getDefault();
   }, [user]);
 
   const validationContext = useMemo(
@@ -50,17 +55,12 @@ const UserForm = ({ user, onValidatePassword, onSubmit }: UserFormProps) => {
     [onValidatePassword],
   );
 
-  const handleSubmit = useCallback(
-    (values: UserInfo) => onSubmit(getSubmitValues(values)),
-    [onSubmit],
-  );
-
   return (
     <FormProvider
       initialValues={initialValues}
-      validationSchema={UserSchema}
+      validationSchema={USER_SCHEMA}
       validationContext={validationContext}
-      onSubmit={handleSubmit}
+      onSubmit={onSubmit}
     >
       <UserFormRoot>
         <UserFieldGroup>
@@ -68,12 +68,14 @@ const UserForm = ({ user, onValidatePassword, onSubmit }: UserFormProps) => {
             name="first_name"
             title={t`First name`}
             placeholder={t`Johnny`}
+            nullable
             autoFocus
           />
           <FormInput
             name="last_name"
             title={t`Last name`}
             placeholder={t`Appleseed`}
+            nullable
           />
         </UserFieldGroup>
         <FormInput
@@ -105,24 +107,4 @@ const UserForm = ({ user, onValidatePassword, onSubmit }: UserFormProps) => {
   );
 };
 
-const getInitialValues = (user?: UserInfo): UserInfo => {
-  return {
-    email: "",
-    site_name: "",
-    password: "",
-    password_confirm: "",
-    ...user,
-    first_name: user?.first_name || "",
-    last_name: user?.last_name || "",
-  };
-};
-
-const getSubmitValues = (user: UserInfo): UserInfo => {
-  return {
-    ...user,
-    first_name: user.first_name || null,
-    last_name: user.last_name || null,
-  };
-};
-
 export default UserForm;
diff --git a/frontend/src/metabase/timelines/common/components/EditEventModal/EditEventModal.tsx b/frontend/src/metabase/timelines/common/components/EditEventModal/EditEventModal.tsx
index 48bf846819..d192a462e8 100644
--- a/frontend/src/metabase/timelines/common/components/EditEventModal/EditEventModal.tsx
+++ b/frontend/src/metabase/timelines/common/components/EditEventModal/EditEventModal.tsx
@@ -1,4 +1,4 @@
-import React, { useCallback, useMemo } from "react";
+import React, { useCallback } from "react";
 import { t } from "ttag";
 import { Timeline, TimelineEvent, TimelineEventData } from "metabase-types/api";
 import EventForm from "../../containers/EventForm";
@@ -26,13 +26,9 @@ const EditEventModal = ({
   onCancel,
   onClose,
 }: EditEventModalProps): JSX.Element => {
-  const initialValues = useMemo(() => {
-    return getInitialValues(event);
-  }, [event]);
-
   const handleSubmit = useCallback(
     async (values: TimelineEventData) => {
-      await onSubmit(getSubmitValues(event, values), timeline);
+      await onSubmit({ ...event, ...values }, timeline);
       onSubmitSuccess?.();
     },
     [event, timeline, onSubmit, onSubmitSuccess],
@@ -48,7 +44,7 @@ const EditEventModal = ({
       <ModalHeader title={t`Edit event`} onClose={onClose} />
       <ModalBody>
         <EventForm
-          initialValues={initialValues}
+          initialValues={event}
           onSubmit={handleSubmit}
           onArchive={handleArchive}
           onCancel={onCancel}
@@ -58,18 +54,4 @@ const EditEventModal = ({
   );
 };
 
-const getInitialValues = (event: TimelineEvent): TimelineEventData => ({
-  ...event,
-  description: event.description || "",
-});
-
-const getSubmitValues = (
-  event: TimelineEvent,
-  values: TimelineEventData,
-): TimelineEvent => ({
-  ...event,
-  ...values,
-  description: values.description || null,
-});
-
 export default EditEventModal;
diff --git a/frontend/src/metabase/timelines/common/components/EditTimelineModal/EditTimelineModal.tsx b/frontend/src/metabase/timelines/common/components/EditTimelineModal/EditTimelineModal.tsx
index 57d3e05e13..13a6a08e4d 100644
--- a/frontend/src/metabase/timelines/common/components/EditTimelineModal/EditTimelineModal.tsx
+++ b/frontend/src/metabase/timelines/common/components/EditTimelineModal/EditTimelineModal.tsx
@@ -1,4 +1,4 @@
-import React, { useCallback, useMemo } from "react";
+import React, { useCallback } from "react";
 import { t } from "ttag";
 import { Timeline, TimelineData } from "metabase-types/api";
 import ModalBody from "../ModalBody";
@@ -24,13 +24,9 @@ const EditTimelineModal = ({
   onCancel,
   onClose,
 }: EditTimelineModalProps): JSX.Element => {
-  const initialValues = useMemo(() => {
-    return getInitialValues(timeline);
-  }, [timeline]);
-
   const handleSubmit = useCallback(
     async (values: TimelineData) => {
-      await onSubmit(getSubmitValues(values, timeline));
+      await onSubmit({ ...timeline, ...values, default: false });
       onSubmitSuccess?.();
     },
     [timeline, onSubmit, onSubmitSuccess],
@@ -46,7 +42,7 @@ const EditTimelineModal = ({
       <ModalHeader title={t`Edit event timeline`} onClose={onClose} />
       <ModalBody>
         <TimelineForm
-          initialValues={initialValues}
+          initialValues={timeline}
           onSubmit={handleSubmit}
           onArchive={handleArchive}
           onCancel={onCancel}
@@ -56,19 +52,4 @@ const EditTimelineModal = ({
   );
 };
 
-const getInitialValues = (timeline: Timeline): TimelineData => ({
-  ...timeline,
-  default: false,
-  description: timeline.description || "",
-});
-
-const getSubmitValues = (
-  values: TimelineData,
-  timeline: Timeline,
-): Timeline => ({
-  ...timeline,
-  ...values,
-  description: values.description || null,
-});
-
 export default EditTimelineModal;
diff --git a/frontend/src/metabase/timelines/common/components/EventForm/EventForm.tsx b/frontend/src/metabase/timelines/common/components/EventForm/EventForm.tsx
index 5755a1a0ff..f6f5d0ea64 100644
--- a/frontend/src/metabase/timelines/common/components/EventForm/EventForm.tsx
+++ b/frontend/src/metabase/timelines/common/components/EventForm/EventForm.tsx
@@ -19,14 +19,13 @@ import {
 import FormArchiveButton from "../FormArchiveButton";
 import { EventFormFooter } from "./EventForm.styled";
 
-const EventSchema = Yup.object({
+const EVENT_SCHEMA = Yup.object({
   name: Yup.string()
     .required(t`required`)
     .max(255, ({ max }) => t`must be ${max} characters or less`),
-  description: Yup.string().max(
-    255,
-    ({ max }) => t`must be ${max} characters or less`,
-  ),
+  description: Yup.string()
+    .nullable()
+    .max(255, ({ max }) => t`must be ${max} characters or less`),
   timestamp: Yup.string().required(`required`),
   time_matters: Yup.boolean(),
   icon: Yup.string().required(`required`),
@@ -69,7 +68,7 @@ const EventForm = ({
   return (
     <FormProvider
       initialValues={initialValues}
-      validationSchema={EventSchema}
+      validationSchema={EVENT_SCHEMA}
       onSubmit={onSubmit}
     >
       {({ dirty, values, setFieldValue }) => (
@@ -93,6 +92,7 @@ const EventForm = ({
             title={t`Description`}
             infoLabel={t`Markdown supported`}
             infoTooltip={t`Add links and formatting via markdown`}
+            nullable
           />
           <FormSelect name="icon" title={t`Icon`} options={iconOptions} />
           {timelines.length > 1 && (
diff --git a/frontend/src/metabase/timelines/common/components/NewEventModal/NewEventModal.tsx b/frontend/src/metabase/timelines/common/components/NewEventModal/NewEventModal.tsx
index 2efaa21117..5fb720cbf6 100644
--- a/frontend/src/metabase/timelines/common/components/NewEventModal/NewEventModal.tsx
+++ b/frontend/src/metabase/timelines/common/components/NewEventModal/NewEventModal.tsx
@@ -48,7 +48,7 @@ const NewEventModal = ({
   const handleSubmit = useCallback(
     async (values: TimelineEventData) => {
       const timeline = timelines.find(t => t.id === values.timeline_id);
-      await onSubmit(getSubmitValues(values), collection, timeline);
+      await onSubmit(values, collection, timeline);
       onSubmitSuccess?.();
     },
     [collection, timelines, onSubmit, onSubmitSuccess],
@@ -79,8 +79,8 @@ const getInitialValues = (
 
   return {
     name: "",
-    description: "",
-    timestamp: undefined,
+    description: null,
+    timestamp: "",
     timeline_id: defaultTimeline?.id,
     icon: hasOneTimeline ? defaultTimeline.icon : getDefaultTimelineIcon(),
     timezone: moment.tz.guess(),
@@ -91,9 +91,4 @@ const getInitialValues = (
   };
 };
 
-const getSubmitValues = (values: TimelineEventData): TimelineEventData => ({
-  ...values,
-  description: values.description || null,
-});
-
 export default NewEventModal;
diff --git a/frontend/src/metabase/timelines/common/components/NewTimelineModal/NewTimelineModal.tsx b/frontend/src/metabase/timelines/common/components/NewTimelineModal/NewTimelineModal.tsx
index 38a6545d88..3a896b2725 100644
--- a/frontend/src/metabase/timelines/common/components/NewTimelineModal/NewTimelineModal.tsx
+++ b/frontend/src/metabase/timelines/common/components/NewTimelineModal/NewTimelineModal.tsx
@@ -28,7 +28,7 @@ const NewTimelineModal = ({
 
   const handleSubmit = useCallback(
     async (values: TimelineData) => {
-      await onSubmit(getSubmitValues(values), collection);
+      await onSubmit(values, collection);
       onSubmitSuccess?.();
     },
     [collection, onSubmit, onSubmitSuccess],
@@ -50,16 +50,11 @@ const NewTimelineModal = ({
 
 const getInitialValues = (collection: Collection): TimelineData => ({
   name: "",
-  description: "",
+  description: null,
   collection_id: canonicalCollectionId(collection.id),
   icon: getDefaultTimelineIcon(),
   default: false,
   archived: false,
 });
 
-const getSubmitValues = (values: TimelineData): TimelineData => ({
-  ...values,
-  description: values.description || null,
-});
-
 export default NewTimelineModal;
diff --git a/frontend/src/metabase/timelines/common/components/TimelineForm/TimelineForm.tsx b/frontend/src/metabase/timelines/common/components/TimelineForm/TimelineForm.tsx
index 3184c4298b..89ea4435ef 100644
--- a/frontend/src/metabase/timelines/common/components/TimelineForm/TimelineForm.tsx
+++ b/frontend/src/metabase/timelines/common/components/TimelineForm/TimelineForm.tsx
@@ -14,14 +14,13 @@ import { TimelineData } from "metabase-types/api";
 import FormArchiveButton from "../FormArchiveButton";
 import { TimelineFormFooter } from "./TimelineForm.styled";
 
-const TimelineSchema = Yup.object({
+const TIMELINE_SCHEMA = Yup.object({
   name: Yup.string()
     .required(t`required`)
     .max(255, ({ max }) => t`must be ${max} characters or less`),
-  description: Yup.string().max(
-    255,
-    ({ max }) => t`must be ${max} characters or less`,
-  ),
+  description: Yup.string()
+    .nullable()
+    .max(255, ({ max }) => t`must be ${max} characters or less`),
   icon: Yup.string().required(t`required`),
 });
 
@@ -44,7 +43,7 @@ const TimelineForm = ({
   return (
     <FormProvider
       initialValues={initialValues}
-      validationSchema={TimelineSchema}
+      validationSchema={TIMELINE_SCHEMA}
       onSubmit={onSubmit}
     >
       {({ dirty }) => (
@@ -55,7 +54,7 @@ const TimelineForm = ({
             placeholder={t`Product releases`}
             autoFocus
           />
-          <FormTextArea name="description" title={t`Description`} />
+          <FormTextArea name="description" title={t`Description`} nullable />
           <FormSelect name="icon" title={t`Default icon`} options={icons} />
           <TimelineFormFooter>
             <FormErrorMessage inline />
