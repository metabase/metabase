/* eslint-env node */
/* eslint-disable import/no-commonjs */

require("babel-register");
require("babel-polyfill");

var webpack = require('webpack');

var ExtractTextPlugin = require('extract-text-webpack-plugin');
var HtmlWebpackPlugin = require('html-webpack-plugin');
var UnusedFilesWebpackPlugin = require("unused-files-webpack-plugin").default;

var fs = require('fs');

var chevrotain = require("chevrotain");
var allTokens = require("./frontend/src/metabase/lib/expressions/tokens").allTokens;

function hasArg(arg) {
    var regex = new RegExp("^" + ((arg.length === 2) ? ("-\\w*"+arg[1]+"\\w*") : (arg)) + "$");
    return process.argv.filter(regex.test.bind(regex)).length > 0;
}

var SRC_PATH = __dirname + '/frontend/src/metabase';
var BUILD_PATH = __dirname + '/resources/frontend_client';


// Need to scan the CSS files for variable and custom media used across files
// NOTE: this requires "webpack -w" (watch mode) to be restarted when variables change :(
var isWatching = hasArg("-w") || hasArg("--watch");
if (isWatching) {
    console.warn("Warning: in webpack watch mode you must restart webpack if you change any CSS variables or custom media queries");
}

// default NODE_ENV to development
var NODE_ENV = process.env["NODE_ENV"] || "development";
console.log("webpack env:", NODE_ENV)

// Babel:
var BABEL_CONFIG = {
    cacheDirectory: ".babel_cache"
};

// css-loader
var CSS_CONFIG = {
    localIdentName: NODE_ENV !== "production" ?
        "[name]__[local]___[hash:base64:5]" :
        "[hash:base64:5]",
    restructuring: false,
    compatibility: true,
    importLoaders: 1
}

var config = module.exports = {
    context: SRC_PATH,

    // output a bundle for the app JS and a bundle for styles
    // eventually we should have multiple (single file) entry points for various pieces of the app to enable code splitting
    entry: {
        vendor: './vendor.js',
        app: './app.js',
        styles: './css/index.css',
    },

    // output to "dist"
    output: {
        path: BUILD_PATH + '/app/dist',
        // NOTE: the filename on disk won't include "?[chunkhash]" but the URL in index.html generated by HtmlWebpackPlugin will:
        filename: '[name].bundle.js?[hash]',
        publicPath: '/app/dist/'
    },

    module: {
        rules: [
            {
                test: /\.(js|jsx)$/,
                exclude: /node_modules/,
                use: [
                    { loader: "babel-loader", options: BABEL_CONFIG }
                ]
            },
            {
                test: /\.(js|jsx)$/,
                exclude: /node_modules|\.spec\.js/,
                use: [
                    { loader: 'eslint-loader' }
                ]
            },
            {
                test: /\.(eot|woff2?|ttf|svg|png)$/,
                use: [
                    { loader: "file-loader" }
                ]
            },
            {
                test: /\.css$/,
                use: [
                    { loader: "style-loader" },
                    { loader: "css-loader", options: CSS_CONFIG },
                    { loader: "postcss-loader" }
                ]
            }
        ]
    },

    resolve: {
        extensions: [".webpack.js", ".web.js", ".js", ".jsx", ".css"],
        alias: {
            'metabase':             SRC_PATH,
            'style':                SRC_PATH + '/css/core/index.css',

            // ace
            'ace/ace':              __dirname + '/node_modules/ace-builds/src-min-noconflict/ace.js',
            'ace/ext-language_tools':__dirname+ '/node_modules/ace-builds/src-min-noconflict/ext-language_tools.js',

            'ace/mode-sql':         __dirname + '/node_modules/ace-builds/src-min-noconflict/mode-sql.js',
            'ace/mode-mysql':       __dirname + '/node_modules/ace-builds/src-min-noconflict/mode-mysql.js',
            'ace/mode-pgsql':       __dirname + '/node_modules/ace-builds/src-min-noconflict/mode-pgsql.js',
            'ace/mode-sqlserver':   __dirname + '/node_modules/ace-builds/src-min-noconflict/mode-sqlserver.js',
            'ace/mode-json':        __dirname + '/node_modules/ace-builds/src-min-noconflict/mode-json.js',

            'ace/snippets/sql':     __dirname + '/node_modules/ace-builds/src-min-noconflict/snippets/sql.js',
            'ace/snippets/mysql':   __dirname + '/node_modules/ace-builds/src-min-noconflict/snippets/mysql.js',
            'ace/snippets/pgsql':   __dirname + '/node_modules/ace-builds/src-min-noconflict/snippets/pgsql.js',
            'ace/snippets/sqlserver':   __dirname + '/node_modules/ace-builds/src-min-noconflict/snippets/sqlserver.js',
            'ace/snippets/json':    __dirname + '/node_modules/ace-builds/src-min-noconflict/snippets/json.js',
            // misc
            // 'moment':               __dirname + '/node_modules/moment/min/moment.min.js',
            'tether':               __dirname + '/node_modules/tether/dist/js/tether.min.js',
            'underscore':           __dirname + '/node_modules/underscore/underscore-min.js',
            'd3':                   __dirname + '/node_modules/d3/d3.min.js',
            'crossfilter':          __dirname + '/node_modules/crossfilter/index.js',
            'dc':                   __dirname + '/node_modules/dc/dc.min.js',
            'humanize':             __dirname + '/node_modules/humanize-plus/dist/humanize.min.js'
        }
    },

    plugins: [
        new UnusedFilesWebpackPlugin({
            globOptions: {
                ignore: [
                    "**/types/*.js"
                ]
            }
        }),
        // Separates out modules common to multiple entry points into a single common file that should be loaded first.
        // Not currently useful but necessary for code-splitting
        new webpack.optimize.CommonsChunkPlugin({
            name: 'vendor',
            minChunks: Infinity // (with more entries, this ensures that no other module goes into the vendor chunk)
        }),
        new HtmlWebpackPlugin({
            filename: '../../index.html',
            template: __dirname + '/resources/frontend_client/index_template.html',
            inject: 'head'
        }),
        new webpack.DefinePlugin({
            'process.env': {
                NODE_ENV: JSON.stringify(NODE_ENV)
            }
        })
    ]
};

if (NODE_ENV === "hot") {
    // suffixing with ".hot" allows us to run both `yarn run build-hot` and `yarn run test` or `yarn run test-watch` simultaneously
    config.output.filename = "[name].hot.bundle.js?[hash]";

    // point the publicPath (inlined in index.html by HtmlWebpackPlugin) to the hot-reloading server
    config.output.publicPath = "http://localhost:8080" + config.output.publicPath;

    config.module.rules.unshift({
        test: /\.jsx$/,
        exclude: /node_modules/,
        use: [
            { loader: 'react-hot-loader' },
            { loader: 'babel-loader', options: BABEL_CONFIG }
        ]
    });

    config.devServer = {
        hot: true,
        inline: true,
        contentBase: "frontend"
    };

    config.plugins.unshift(
        new webpack.NoErrorsPlugin(),
        new webpack.HotModuleReplacementPlugin()
    );
} else {
    // Extracts initial CSS into a standard stylesheet that can be loaded in parallel with JavaScript
    // NOTE: the filename on disk won't include "?[chunkhash]" but the URL in index.html generated by HtmlWebpackPlugin will:
    config.plugins.push(
        new ExtractTextPlugin('[name].bundle.css?[contenthash]')
    );
    config.module.rules[config.module.rules.length - 1] = {
        test: /\.css$/,
        loader: ExtractTextPlugin.extract({
            fallbackLoader: 'style-loader',
            loader: [
                // ExtractTextPlugin doesn't yet support `{ loader, options }` format
                // https://github.com/webpack/extract-text-webpack-plugin/issues/330
                "css-loader?"+JSON.stringify(CSS_CONFIG),
                'postcss-loader'
            ]
        })
    };
}

if (NODE_ENV !== "production") {
    // replace minified files with un-minified versions
    for (var name in config.resolve.alias) {
        var minified = config.resolve.alias[name];
        var unminified = minified.replace(/[.-\/]min\b/g, '');
        if (minified !== unminified && fs.existsSync(unminified)) {
            config.resolve.alias[name] = unminified;
        }
    }

    // enable "cheap" source maps in hot or watch mode since re-build speed overhead is < 1 second
    config.devtool = "cheap-module-source-map";

    // works with breakpoints
    // config.devtool = "inline-source-map"

    // helps with source maps
    config.output.devtoolModuleFilenameTemplate = '[absolute-resource-path]';
    config.output.pathinfo = true;
} else {
    // this is required to ensure we don't minify Chevrotain token identifiers
    // https://github.com/SAP/chevrotain/tree/master/examples/parser/minification
    config.plugins.push(new webpack.optimize.UglifyJsPlugin({
        mangle: {
            except: allTokens.map(function(currTok) {
                return chevrotain.tokenName(currTok);
            })
        }
    }))

    config.devtool = "source-map";
}
