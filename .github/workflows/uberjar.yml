name: Uberjar

on:
  push:
    branches-ignore:
      - 'master'
      - 'release**'
      - 'backport**'
    paths-ignore:
    - 'docs/**'
    - 'frontend/test/**'
    - 'enterprise/frontend/test/**'
    - ".**"

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-20.04
    timeout-minutes: 40
    strategy:
      matrix:
        edition: [ee, oss]
    env:
      MB_EDITION: ${{ matrix.edition }}
      INTERACTIVE: false
    steps:
    - uses: actions/checkout@v2
    - name: Prepare Node.js
      uses: actions/setup-node@v1
      with:
        node-version: 14.x
    - name: Prepare JDK 8
      uses: actions/setup-java@v2
      with:
        java-version: 8
        distribution: 'temurin'
    - name: Install Clojure CLI
      run: |
        curl -O https://download.clojure.org/install/linux-install-1.10.3.1058.sh &&
        sudo bash ./linux-install-1.10.3.1058.sh
    - name: Check versions
      run: |
        echo "Node.js `node --version`"
        echo "yarn `yarn --version`"
        java -version

    - name: Get yarn cache
      uses: actions/cache@v2
      with:
        path: ~/.cache/yarn
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
    - name: Get node_modules cache
      uses: actions/cache@v2
      with:
        path: node_modules
        key: ${{ runner.os }}-node-modules-${{ hashFiles('**/yarn.lock') }}
    - name: Get M2 cache
      uses: actions/cache@v2
      with:
        path: |
          ~/.m2
          ~/.gitlibs
        key: ${{ runner.os }}-m2-${{ hashFiles('**/deps.edn') }}

    - run: yarn install --frozen-lockfile --prefer-offline
    - run: MB_EDITION=${{ matrix.edition }} ./bin/build

    - name: Mark with the commit hash
      run:  git rev-parse --short HEAD > COMMIT-ID
    - name: Calculate SHA256 checksum
      run: sha256sum ./target/uberjar/metabase.jar > SHA256.sum
    - name: Upload JARs as artifact
      uses: actions/upload-artifact@v2
      with:
        name: metabase-${{ matrix.edition }}-uberjar
        path: |
          ./target/uberjar/metabase.jar
          ./COMMIT-ID
          ./SHA256.sum
  
  containerize:
    runs-on: ubuntu-20.04
    needs: build
    steps:
    - name: Extract branch name
      shell: bash
      run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
      id: extract_branch
    - uses: actions/checkout@v2
    - uses: actions/download-artifact@v2
      with:
          name: metabase-ee-uberjar
          path: bin/docker/
    - name: Move the uberjar next to the Dockerfile
      run: mv bin/docker/target/uberjar/metabase.jar bin/docker/
    - name: ls
      run: ls bin/docker/
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1
    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Build container image
      run: docker buildx build . -f bin/docker/Dockerfile -t paoliniluis/metabase-dev:${{ steps.extract_branch.outputs.branch }} --push --compress --no-cache
    - name: Launch container
      run: docker run -dp 3000:3000 metabase/metabase-dev:${{ steps.extract_branch.outputs.branch }}
      timeout-minutes: 5
    - run: docker ps
    - name: Wait for Metabase to start
      run: while ! curl -s 'http://localhost:3000/api/health' | grep '{"status":"ok"}'; do sleep 1; done
      timeout-minutes: 1
  
  check:
    runs-on: ubuntu-20.04
    name: check ${{ matrix.edition }} (java ${{ matrix.java-version }})
    needs: build
    timeout-minutes: 10
    strategy:
      matrix:
        edition: [ee, oss]
        java-version: [8, 11, 17]
    steps:
    - name: Prepare JRE (Java Run-time Environment)
      uses: actions/setup-java@v1
      with:
        java-package: jre
        java-version: ${{ matrix.java-version }}
    - run: java -version

    - uses: actions/download-artifact@v2
      name: Retrieve uberjar artifact
      with:
        name: metabase-${{ matrix.edition }}-uberjar

    - name: Launch uberjar
      run: java -jar ./target/uberjar/metabase.jar &
    - name: Wait for Metabase to start
      run: while ! curl -s localhost:3000/api/health; do sleep 1; done
      timeout-minutes: 5

    - name: Check API health
      run: curl -s localhost:3000/api/health
