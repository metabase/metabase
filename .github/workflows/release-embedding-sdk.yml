name: Release Metabase Embedding SDK for React

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch we want to release the SDK from"
        type: choice
        required: true
        default: "master"
        options:
          - master
          - release-x.51.x

concurrency:
  # We want to ensure only one job is running at a time per branch because
  # there could be a conflict when updating the readme file.
  group: ${{ github.workflow }}-${{ inputs.branch }}
  cancel-in-progress: true

jobs:
  workflow-summary:
    name: Log inputs
    runs-on: ubuntu-22.04
    timeout-minutes: 5
    steps:
      - name: Generate workflow summary
        run: |
          tee -a $GITHUB_STEP_SUMMARY << EOF
          **Inputs:**

          - \`branch\`: ${{ inputs.branch }}

          triggered by: @${{ github.event.sender.login }}
          EOF

  determine-version:
    name: Determine SDK version
    runs-on: ubuntu-22.04
    timeout-minutes: 20
    outputs:
      sdk_version: ${{ steps.new-sdk-version.outputs.result }}
    steps:
      - name: Check out the code using the provided branch
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}

      - name: Get current SDK version
        id: current-sdk-version
        run: |
          VERSION=$(jq -r .version ./enterprise/frontend/src/embedding-sdk/package.template.json)
          echo "sdk_current_version=$VERSION" >> $GITHUB_OUTPUT

      - name: Get next SDK patch version
        id: new-sdk-version
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            const currentVersion = "${{ steps.current-sdk-version.outputs.sdk_current_version }}";
            const versionParts = currentVersion.split(".");
            versionParts[versionParts.length - 1] = parseInt(versionParts.at(-1)) + 1;
            const newVersion = versionParts.join(".");

            return newVersion

      - name: Append workflow summary
        run: |
          tee -a $GITHUB_STEP_SUMMARY << EOF
          **Derived inputs:**

          - \`current_version\`: "${{ steps.current-sdk-version.outputs.sdk_current_version }}"
          - \`next_version\`: "${{ steps.new-sdk-version.outputs.result }}"
          EOF

  check-git-tag:
    needs: determine-version
    runs-on: ubuntu-22.04
    timeout-minutes: 20
    env:
      tag: embedding-sdk-${{ needs.determine-version.outputs.sdk_version }}
    steps:
      - name: Check out the code using the provided branch
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
          fetch-depth: 0
          fetch-tags: true

      - name: check tags
        run: |
          if [ $(git tag -l | grep $tag$) ]
          then
            echo "::error::Tag '${{ env.tag }}' already exists. If you expect to run this workflow with the same tag, please remove the tag first and rerun this workflow again."
            exit 1
          else
            exit 0
          fi

  test:
    needs: check-git-tag
    runs-on: ubuntu-22.04
    timeout-minutes: 20
    steps:
      - name: Check out the code using the provided branch
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}

      - name: Prepare front-end environment
        uses: ./.github/actions/prepare-frontend

      - name: Prepare back-end environment
        uses: ./.github/actions/prepare-backend
        with:
          m2-cache-key: "release-sdk"

      - name: Run unit tests
        run: yarn embedding-sdk:test-unit

  build-sdk:
    needs: [test, determine-version]
    runs-on: ubuntu-22.04
    timeout-minutes: 20
    steps:
      - name: Check out the code using the provided branch
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
          fetch-depth: 0
          fetch-tags: true

      - name: Prepare front-end environment
        uses: ./.github/actions/prepare-frontend

      - name: Prepare back-end environment
        uses: ./.github/actions/prepare-backend
        with:
          m2-cache-key: "release-sdk"

      - name: Bump published npm package version
        # NOTE: this should happen before "Build SDK bundle" as we inject SDK version into the code during build step
        run: |
          ./bin/embedding-sdk/release_utils.bash update_package_json_template ${{ needs.determine-version.outputs.sdk_version }}

      - name: Update changelog
        run: |
          yarn embedding-sdk:generate-changelog -o changelog-diff

      - name: Build SDK bundle
        run: yarn run build-embedding-sdk

      - name: Generate SDK package.json in the build directory
        run: yarn run embedding-sdk:generate-package

      - name: Upload built SDK package as artifact
        uses: actions/upload-artifact@v4
        with:
          name: metabase-sdk
          path: ./resources/embedding-sdk

      - name: Upload changelog diff
        uses: actions/upload-artifact@v4
        with:
          name: sdk-changelog-diff
          path: ./changelog-diff

  publish-npm:
    needs: [build-sdk, determine-version]
    runs-on: ubuntu-22.04
    timeout-minutes: 20
    env:
      sdk_version: ${{ needs.determine-version.outputs.sdk_version }}
    steps:
      - name: Check out branch to prepare for a SDK version bump PR
        uses: actions/checkout@v4
        with:
          # when we created version update PR, it would only have diff from 2 files SDK readme and SDK package.json template
          ref: ${{ inputs.branch}}

      - name: Setup git user
        run: |
          git config --global user.email "github-automation@metabase.com"
          git config --global user.name "Metabase Automation"

      - name: Update readme
        run: |
          bash ./bin/embedding-sdk/release_utils.bash update_readme ${{ env.sdk_version }}

      - name: Bump published npm package version
        run: |
          bash ./bin/embedding-sdk/release_utils.bash update_package_json_template ${{ env.sdk_version }}

      - name: Retrieve SDK changelog diff
        uses: actions/download-artifact@v4
        with:
          name: sdk-changelog-diff

      - name: Update changelog
        run: |
          cat changelog-diff enterprise/frontend/src/embedding-sdk/CHANGELOG.md > new-changelog
          mv new-changelog enterprise/frontend/src/embedding-sdk/CHANGELOG.md

      - name: Create a PR updating readme + published version, and changelog (using GitHub Metabase Automation account)
        run: |
          git checkout -b update-sdk-version-${{ env.sdk_version }}
          git commit -a -m 'Update Readme version references and published npm version to ${{ env.sdk_version }}'
          git push origin HEAD
          gh pr create --base ${{ inputs.branch }}\
                       --assignee "${GITHUB_ACTOR}"\
                       --title "Update SDK version to ${{ env.sdk_version }}"\
                       --body "Update Readme version references and published npm package version to ${{ env.sdk_version }}"
        env:
          GH_TOKEN: ${{ secrets.METABASE_AUTOMATION_USER_TOKEN }}

      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ secrets.METABASE_BOT_APP_ID }}
          private-key: ${{ secrets.METABASE_BOT_APP_PRIVATE_KEY }}

      - name: Edit PR adding useful information (using Metabase bot app)
        run: |
          gh pr edit --add-reviewer @metabase/embedding --add-label no-backport
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}

      - name: Auto approve PR (using GitHub Actions account)
        run: |
          gh pr review --approve
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Enable Pull request auto-merge (using GitHub Metabase Automation account)
        run: |
          gh pr merge --auto --squash
        env:
          GH_TOKEN: ${{ secrets.METABASE_AUTOMATION_USER_TOKEN }}

      - name: Retrieve build SDK package artifact
        uses: actions/download-artifact@v4
        with:
          name: metabase-sdk
          path: sdk

      - name: Publish to NPM
        working-directory: sdk
        run: |
          echo //registry.npmjs.org/:_authToken=${{ secrets.NPM_RELEASE_TOKEN }} > .npmrc
          # Please keep the value in sync with `inputs.branch`'s release branch
          npm publish --tag ${{fromJson('{"master": "canary", "release-x.51.x": "51-stable"}')[inputs.branch]}}

      - name: Add `latest` tag to the latest release branch (`release-x.51.x`) deployment
        if: ${{ inputs.branch == 'release-x.51.x' }}
        working-directory: sdk
        run: |
          npm dist-tag add @metabase/embedding-sdk-react@${{ env.sdk_version }} latest

  git-tag:
    needs: [publish-npm, determine-version]
    runs-on: ubuntu-22.04
    timeout-minutes: 20
    env:
      tag: embedding-sdk-${{ needs.determine-version.outputs.sdk_version }}
    steps:
      - name: Check out the code using the provided branch
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}

      # Lightweight tags don't need committer name and email
      - name: Create a new git tag
        run: |
          git tag ${{ env.tag }}

      - name: Push the new tag
        id: push-tag
        run: |
          git push origin ${{ env.tag }}
