name: Driver Tests

on:
  push:
    branches:
      - 'master'
      - 'release-**'
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref && github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  files-changed:
    name: Check which files changed
    runs-on: ubuntu-22.04
    timeout-minutes: 3
    outputs:
      backend_all: ${{ steps.changes.outputs.backend_all }}
    steps:
      - uses: actions/checkout@v4
      - name: Test which files changed
        uses: dorny/paths-filter@v3.0.0
        id: changes
        with:
          token: ${{ github.token }}
          filters: .github/file-paths.yaml

  be-tests-h2:
    needs: files-changed
    if: github.event.pull_request.draft == false && needs.files-changed.outputs.backend_all == 'true'
    runs-on: ubuntu-22.04
    timeout-minutes: 60
    env:
      CI: 'true'
    name: H2
    steps:
    - uses: actions/checkout@v4
    - name: Test H2 driver
      uses: ./.github/actions/test-driver
      with:
        junit-name: 'be-tests-h2'
        test-args: >-
          :only-tags [:mb/driver-tests]
    - name: Upload Test Results
      uses: ./.github/actions/upload-test-results
      if: always()
      with:
        input-path: ./target/junit/
        output-name: ${{ github.job }}
        bucket: ${{ vars.AWS_S3_TEST_RESULTS_BUCKET }}
        aws-access-key-id: ${{ secrets.AWS_TEST_RESULTS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_TEST_RESULTS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}
        trunk-api-token: ${{ secrets.TRUNK_API_TOKEN }}

  be-tests-athena-ee:
    needs: files-changed
    if: github.event.pull_request.draft == false && needs.files-changed.outputs.backend_all == 'true'
    runs-on: ubuntu-22.04
    timeout-minutes: 90
    env:
      CI: 'true'
      DRIVERS: athena
      MB_ATHENA_TEST_REGION: us-east-1
      MB_ATHENA_TEST_ACCESS_KEY: ${{ secrets.MB_ATHENA_TEST_ACCESS_KEY }}
      MB_ATHENA_TEST_SECRET_KEY: ${{ secrets.MB_ATHENA_TEST_SECRET_KEY }}
      MB_ATHENA_TEST_S3_STAGING_DIR: ${{ secrets.MB_ATHENA_TEST_S3_STAGING_DIR }}
      # These credentials are used to test the driver when the user does not have the athena:GetTableMetadata permission
      MB_ATHENA_TEST_WITHOUT_GET_TABLE_METADATA_ACCESS_KEY: ${{ secrets.MB_ATHENA_TEST_WITHOUT_GET_TABLE_METADATA_ACCESS_KEY }}
      MB_ATHENA_TEST_WITHOUT_GET_TABLE_METADATA_SECRET_KEY: ${{ secrets.MB_ATHENA_TEST_WITHOUT_GET_TABLE_METADATA_SECRET_KEY }}
    name: Athena
    steps:
    - uses: actions/checkout@v4
    - name: Test Athena driver
      uses: ./.github/actions/test-driver
      with:
        junit-name: 'be-tests-athena-ee'
        test-args: >-
          :only-tags [:mb/driver-tests]
    - name: Upload Test Results
      uses: ./.github/actions/upload-test-results
      if: always()
      with:
        input-path: ./target/junit/
        output-name: ${{ github.job }}
        bucket: ${{ vars.AWS_S3_TEST_RESULTS_BUCKET }}
        aws-access-key-id: ${{ secrets.AWS_TEST_RESULTS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_TEST_RESULTS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}
        trunk-api-token: ${{ secrets.TRUNK_API_TOKEN }}

  be-tests-bigquery-cloud-sdk-ee:
    needs: files-changed
    if: github.event.pull_request.draft == false && needs.files-changed.outputs.backend_all == 'true'
    runs-on: ubuntu-22.04
    timeout-minutes: 90
    env:
      CI: 'true'
      DRIVERS: bigquery-cloud-sdk
      MB_BIGQUERY_TEST_PROJECT_ID: ${{ secrets.BIGQUERY_TEST_PROJECT_ID }}
      MB_BIGQUERY_TEST_CLIENT_ID: ${{ secrets.MB_BIGQUERY_TEST_CLIENT_ID }}
      MB_BIGQUERY_TEST_CLIENT_SECRET: ${{ secrets.MB_BIGQUERY_TEST_CLIENT_SECRET }}
      MB_BIGQUERY_TEST_ACCESS_TOKEN: ${{ secrets.MB_BIGQUERY_TEST_ACCESS_TOKEN }}
      MB_BIGQUERY_TEST_REFRESH_TOKEN: ${{ secrets.MB_BIGQUERY_TEST_REFRESH_TOKEN }}
      MB_BIGQUERY_CLOUD_SDK_TEST_SERVICE_ACCOUNT_JSON: ${{ secrets.MB_BIGQUERY_CLOUD_SDK_TEST_SERVICE_ACCOUNT_JSON }}
    name: BigQuery
    steps:
    - uses: actions/checkout@v4
    - name: Test BigQuery Cloud SDK driver
      uses: ./.github/actions/test-driver
      with:
        junit-name: 'be-tests-bigquery-cloud-sdk-ee'
        test-args: >-
          :only-tags [:mb/driver-tests]
    - name: Upload Test Results
      uses: ./.github/actions/upload-test-results
      if: always()
      with:
        input-path: ./target/junit/
        output-name: ${{ github.job }}
        bucket: ${{ vars.AWS_S3_TEST_RESULTS_BUCKET }}
        aws-access-key-id: ${{ secrets.AWS_TEST_RESULTS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_TEST_RESULTS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}
        trunk-api-token: ${{ secrets.TRUNK_API_TOKEN }}

  be-tests-druid-ee:
    needs: files-changed
    if: github.event.pull_request.draft == false && needs.files-changed.outputs.backend_all == 'true'
    runs-on: ubuntu-22.04
    timeout-minutes: 90
    env:
      CI: 'true'
      DRIVERS: druid
    services:
      druid:
        image: metabase/druid:0.20.2
        ports:
          - "8082:8082"
        env:
          CLUSTER_SIZE: nano-quickstart
    name: Druid (Legacy)
    steps:
    - uses: actions/checkout@v4
    - name: Test Druid driver
      uses: ./.github/actions/test-driver
      with:
        junit-name: 'be-tests-druid-ee'
        test-args: >-
          :only-tags [:mb/driver-tests]
    - name: Upload Test Results
      uses: ./.github/actions/upload-test-results
      if: always()
      with:
        input-path: ./target/junit/
        output-name: ${{ github.job }}
        bucket: ${{ vars.AWS_S3_TEST_RESULTS_BUCKET }}
        aws-access-key-id: ${{ secrets.AWS_TEST_RESULTS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_TEST_RESULTS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}
        trunk-api-token: ${{ secrets.TRUNK_API_TOKEN }}

  be-tests-databricks-ee:
    needs: files-changed
    if: github.event.pull_request.draft == false && needs.files-changed.outputs.backend_all == 'true'
    runs-on: ubuntu-22.04
    timeout-minutes: 90
    env:
      CI: 'true'
      DRIVERS: databricks
      MB_DATABRICKS_TEST_HOST: ${{ secrets.MB_DATABRICKS_JDBC_TEST_HOST }}
      MB_DATABRICKS_TEST_HTTP_PATH: ${{ secrets.MB_DATABRICKS_JDBC_TEST_HTTP_PATH }}
      MB_DATABRICKS_TEST_TOKEN: ${{ secrets.MB_DATABRICKS_JDBC_TEST_TOKEN }}
      MB_DATABRICKS_TEST_CATALOG: 'metabase_ci'
      MB_DATABRICKS_TEST_CLIENT_ID: ${{ secrets.MB_DATABRICKS_JDBC_TEST_CLIENT_ID }}
      MB_DATABRICKS_TEST_OAUTH_SECRET: ${{ secrets.MB_DATABRICKS_JDBC_TEST_OAUTH_SECRET }}
    name: Databricks
    steps:
    - uses: actions/checkout@v4
    - name: Test Databricks driver
      uses: ./.github/actions/test-driver
      with:
        junit-name: 'be-tests-databricks-ee'
        test-args: >-
          :only-tags [:mb/driver-tests]
    - name: Upload Test Results
      uses: ./.github/actions/upload-test-results
      if: always()
      with:
        input-path: ./target/junit/
        output-name: ${{ github.job }}
        bucket: ${{ vars.AWS_S3_TEST_RESULTS_BUCKET }}
        aws-access-key-id: ${{ secrets.AWS_TEST_RESULTS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_TEST_RESULTS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}
        trunk-api-token: ${{ secrets.TRUNK_API_TOKEN }}

  be-tests-druid-jdbc-ee:
    needs: files-changed
    if: github.event.pull_request.draft == false && needs.files-changed.outputs.backend_all == 'true'
    runs-on: ubuntu-22.04
    timeout-minutes: 90
    env:
      CI: 'true'
      DRIVERS: druid-jdbc
    services:
      druid:
        image: metabase/druid:29.0.1-json-no-ingestion
        ports:
          - "8888:8888"
        env:
          CLUSTER_SIZE: nano-quickstart
    name: Druid (JDBC)
    steps:
    - uses: actions/checkout@v4
    - name: Test Druid JDBC driver
      uses: ./.github/actions/test-driver
      with:
        junit-name: 'be-tests-druid-jdbc-ee'
        test-args: >-
          :only-tags [:mb/driver-tests]
    - name: Upload Test Results
      uses: ./.github/actions/upload-test-results
      if: always()
      with:
        input-path: ./target/junit/
        output-name: ${{ github.job }}
        bucket: ${{ vars.AWS_S3_TEST_RESULTS_BUCKET }}
        aws-access-key-id: ${{ secrets.AWS_TEST_RESULTS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_TEST_RESULTS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}
        trunk-api-token: ${{ secrets.TRUNK_API_TOKEN }}

  be-tests-mysql-mariadb:
    needs: files-changed
    if: github.event.pull_request.draft == false && needs.files-changed.outputs.backend_all == 'true'
    runs-on: ubuntu-22.04
    timeout-minutes: 90
    strategy:
      fail-fast: false
      matrix:
        version:
          - name: MariaDB 10.2
            junit-name: be-tests-mariadb-10-2-ee
            image: circleci/mariadb:10.2.23
            env:
              enable-ssl-tests: 'false'
          - name: MariaDB Latest
            junit-name: be-tests-mariadb-latest-ee
            image: circleci/mariadb:latest
            env:
              enable-ssl-tests: 'false'
          - name: MySQL 8.0
            junit-name: be-tests-mysql-8-0-ee
            image: cimg/mysql:8.0
            env:
              enable-ssl-tests: 'false'
          - name: MySQL Latest
            junit-name: be-tests-mysql-latest-ee
            image: mysql:latest
            env:
              enable-ssl-tests: 'true'
        job:
          - name: Driver Tests
            build-static-viz: false
            test-args: >-
              :only-tags [:mb/driver-tests]
          - name: Enterprise Tests
            build-static-viz: false
            test-args: >-
              :only '"enterprise/backend/test"'
              :exclude-tags [:mb/driver-tests]
          - name: EE App DB Tests (Part 1)
            build-static-viz: true
            test-args: >-
              :only '"test"'
              :exclude-tags [:mb/driver-tests]
              :partition/total 2
              :partition/index 0
          - name: EE App DB Tests (Part 2)
            build-static-viz: true
            test-args: >-
              :only '"test"'
              :exclude-tags [:mb/driver-tests]
              :partition/total 2
              :partition/index 1

    services:
      mysql:
        image: ${{ matrix.version.image }}
        ports:
          - "3306:3306"
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: true
          MYSQL_DATABASE: circle_test
    env:
      CI: 'true'
      DRIVERS: mysql
      MB_DB_TYPE: mysql
      MB_DB_HOST: localhost
      MB_DB_PORT: 3306
      MB_DB_DBNAME: circle_test
      MB_DB_USER: root
      MB_MYSQL_TEST_USER: root
      #
      # SSL config: only for mysql latest tests.
      #
      # set up env vars for something named "MYSQL_SSL" to run MySQL SSL tests verifying connectivity with PEM cert
      # they are deliberately given a different name to prevent them from affecting the regular test run against
      # the configured MySQL instance, but there is one particular test (mysql-connect-with-ssl-and-pem-cert-test)
      # that overrides the MB_MYSQL_TEST_* values with them
      # the MYSQL_RDS_SSL_INSTANCE vars are defined as secrets and can be altered
      MB_MYSQL_SSL_TEST_SSL: ${{ matrix.version.env.enable-ssl-tests }}
      MB_MYSQL_SSL_TEST_HOST: ${{ secrets.MYSQL_RDS_SSL_INSTANCE_HOST }}
      MB_MYSQL_SSL_TEST_ADDITIONAL_OPTIONS: 'verifyServerCertificate=true'
      # the contents of the ./resources/certificates/rds-combined-ca-bundle.pem file
      MB_MYSQL_SSL_TEST_SSL_CERT: ${{ secrets.MB_MYSQL_SSL_TEST_SSL_CERT }}
      MB_MYSQL_SSL_TEST_USER: metabase
      MB_MYSQL_SSL_TEST_PASSWORD: ${{ secrets.MYSQL_RDS_SSL_INSTANCE_PASSWORD }}
    # for historic reasons (I don't want to mess around with required jobs) the job name should be something like
    # "be-tests-mariadb-10-2-ee (0)"
    name: "${{ matrix.version.name }} ${{ matrix.job.name }}"
    steps:
      - uses: actions/checkout@v4
      - name: Test ${{ matrix.version.name }}
        uses: ./.github/actions/test-driver
        with:
          build-static-viz: ${{ matrix.job.build-static-viz }}
          junit-name: ${{ matrix.version.junit-name }}
          test-args: >-
            ${{ matrix.job.test-args }}
      - name: Upload Test Results
        uses: ./.github/actions/upload-test-results
        if: always()
        with:
          input-path: ./target/junit/
          output-name: ${{ github.job }}
          bucket: ${{ vars.AWS_S3_TEST_RESULTS_BUCKET }}
          aws-access-key-id: ${{ secrets.AWS_TEST_RESULTS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_TEST_RESULTS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
          trunk-api-token: ${{ secrets.TRUNK_API_TOKEN }}

  be-tests-mongo:
    needs: files-changed
    if: github.event.pull_request.draft == false && needs.files-changed.outputs.backend_all == 'true'
    runs-on: ubuntu-22.04
    timeout-minutes: 90
    strategy:
      fail-fast: false
      matrix:
        version:
          - name: MongoDB 4.4
            junit-name: be-tests-mongo-4-4-ee
            image: metabase/qa-databases:mongo-sample-4.4
          - name: MongoDB 5.0
            junit-name: be-tests-mongo-5-0-ee
            image: metabase/qa-databases:mongo-sample-5.0
          - name: MongoDB Latest
            junit-name: be-tests-mongo-latest-ee
            image: circleci/mongo:latest
    env:
      CI: 'true'
      DRIVERS: mongo
      MB_MONGO_TEST_USER: metabase
      MB_MONGO_TEST_PASSWORD: metasample123
    services:
      mongodb:
        image: ${{ matrix.version.image }}
        ports:
          - "27017:27017"
        env:
          MONGO_INITDB_ROOT_USERNAME: metabase
          MONGO_INITDB_ROOT_PASSWORD: metasample123
    name: ${{ matrix.version.name }}
    steps:
    - uses: actions/checkout@v4
    - name: Test ${{ matrix.version.name }}
      uses: ./.github/actions/test-driver
      with:
        junit-name: ${{ matrix.version.junit-name }}
        test-args: >-
          :exclude-tags [:mongo-sharded-cluster-tests]
          :only-tags [:mb/driver-tests]
    - name: Upload Test Results
      uses: ./.github/actions/upload-test-results
      if: always()
      with:
        input-path: ./target/junit/
        output-name: ${{ github.job }}
        bucket: ${{ vars.AWS_S3_TEST_RESULTS_BUCKET }}
        aws-access-key-id: ${{ secrets.AWS_TEST_RESULTS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_TEST_RESULTS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}
        trunk-api-token: ${{ secrets.TRUNK_API_TOKEN }}

  be-tests-mongo-ssl:
    needs: files-changed
    if: github.event.pull_request.draft == false && needs.files-changed.outputs.backend_all == 'true'
    runs-on: ubuntu-22.04
    timeout-minutes: 90
    strategy:
      fail-fast: false
      matrix:
        version:
          - name: MongoDB 4.4
            junit-name: be-tests-mongo-4-4-ee
            image: metabase/qa-databases:mongo-sample-4.4
          - name: MongoDB 5.0
            junit-name: be-tests-mongo-5-0-ssl-ee
            image: metabase/qa-databases:mongo-sample-5.0
    env:
      CI: 'true'
      DRIVERS: mongo
      MB_MONGO_TEST_USER: metabase
      MB_MONGO_TEST_PASSWORD: metasample123
      MB_TEST_MONGO_REQUIRES_SSL: true
    name: "${{ matrix.version.name }} (SSL)"
    steps:
      - uses: actions/checkout@v4
      - name: Spin up Mongo docker container
        run: >-
          docker run -d
          -p 27017:27017
          --name metamongo
          ${{ matrix.version.image }}
          mongod
          --dbpath /data/db2/
          --tlsMode requireTLS
          --tlsCertificateKeyFile /etc/mongo/metamongo.pem
          --tlsCAFile /etc/mongo/metaca.crt
      - uses: ./.github/actions/await-port
        with:
          port: 27017
        timeout-minutes: 5
      - name: Make SSL certificates for Mongo available
        run: |
          curl https://raw.githubusercontent.com/metabase/metabase-qa/master/dbs/mongo/certificates/metabase.crt \
          -o ./test_resources/ssl/mongo/metabase.crt

          curl https://raw.githubusercontent.com/metabase/metabase-qa/master/dbs/mongo/certificates/metabase.key \
          -o ./test_resources/ssl/mongo/metabase.key

          curl https://raw.githubusercontent.com/metabase/metabase-qa/master/dbs/mongo/certificates/metaca.crt \
          -o ./test_resources/ssl/mongo/metaca.crt
      - name: Test ${{ matrix.version.name }}
        uses: ./.github/actions/test-driver
        with:
          junit-name: ${{ matrix.version.junit-name }}
          test-args: >-
            :exclude-tags [:mongo-sharded-cluster-tests]
            :only-tags [:mb/driver-tests]
      - name: Upload Test Results
        uses: ./.github/actions/upload-test-results
        if: always()
        with:
          input-path: ./target/junit/
          output-name: ${{ github.job }}
          bucket: ${{ vars.AWS_S3_TEST_RESULTS_BUCKET }}
          aws-access-key-id: ${{ secrets.AWS_TEST_RESULTS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_TEST_RESULTS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
          trunk-api-token: ${{ secrets.TRUNK_API_TOKEN }}

  be-tests-mongo-sharded-cluster-ee:
    needs: files-changed
    if: github.event.pull_request.draft == false && needs.files-changed.outputs.backend_all == 'true'
    runs-on: ubuntu-22.04
    timeout-minutes: 90
    env:
      CI: 'true'
      DRIVERS: mongo
    services:
      mongodb:
        image: metabase/mongo-sharded-cluster:6
        ports:
          - "27017:17017"
    name: MongoDB Sharded Cluster
    steps:
    - uses: actions/checkout@v4
    - name: Test MongoDB driver (Sharded cluster)
      uses: ./.github/actions/test-driver
      with:
        junit-name: 'be-tests-mongo-sharded-cluster-ee'
        test-args: >-
          :only metabase.driver.mongo.sharded-cluster-test
    - name: Upload Test Results
      uses: ./.github/actions/upload-test-results
      if: always()
      with:
        input-path: ./target/junit/
        output-name: ${{ github.job }}
        bucket: ${{ vars.AWS_S3_TEST_RESULTS_BUCKET }}
        aws-access-key-id: ${{ secrets.AWS_TEST_RESULTS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_TEST_RESULTS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}
        trunk-api-token: ${{ secrets.TRUNK_API_TOKEN }}

  be-tests-oracle:
    needs: files-changed
    if: github.event.pull_request.draft == false && needs.files-changed.outputs.backend_all == 'true'
    runs-on: ubuntu-22.04
    timeout-minutes: 90
    strategy:
      fail-fast: false
      matrix:
        version:
          - name: Oracle 18.4
            junit-name: be-tests-oracle-18-4-ee
            image: gvenzl/oracle-xe:18.4.0-slim
            port: 1521
            env:
              user: system
              password: 'password'
              enable-ssl-tests: false
          - name: Oracle 21.3
            junit-name: be-tests-oracle-21-3-ee
            image: metabase/qa-databases:oracle-xe-21.3
            port: 2484
            env:
              user: ''
              password: ''
              enable-ssl-tests: true
    env:
      CI: 'true'
      DRIVERS: oracle
      MB_ORACLE_TEST_HOST: localhost
      MB_ORACLE_TEST_USER: '${{ matrix.version.env.user }}'
      MB_ORACLE_TEST_SERVICE_NAME: XEPDB1
      # Only the non-SSL 18.4 tests specify password as an env var; the SSL 21.3 tests get it from the keystore I guess
      MB_ORACLE_TEST_PASSWORD: '${{ matrix.version.env.password }}'
      # These are ignored for the 18.4 tests which do not test SSL
      MB_ORACLE_TEST_SSL: ${{ matrix.version.env.enable-ssl-tests }}
      MB_ORACLE_SSL_TEST_SSL: ${{ matrix.version.env.enable-ssl-tests }}
      MB_ORACLE_TEST_SSL_USE_TRUSTSTORE: ${{ matrix.version.env.enable-ssl-tests }}
      MB_ORACLE_TEST_SSL_TRUSTSTORE_PATH: './test_resources/ssl/oracle/truststore.p12'
      MB_ORACLE_TEST_SSL_TRUSTSTORE_OPTIONS: local
      MB_ORACLE_TEST_SSL_TRUSTSTORE_PASSWORD_VALUE: 'PassworD_#1234'
      MB_ORACLE_TEST_SSL_USE_KEYSTORE: ${{ matrix.version.env.enable-ssl-tests }}
      MB_ORACLE_TEST_SSL_KEYSTORE_PATH: './test_resources/ssl/oracle/keystore.p12'
      MB_ORACLE_TEST_SSL_KEYSTORE_OPTIONS: local
      MB_ORACLE_TEST_SSL_KEYSTORE_PASSWORD_VALUE: 'PassworD_#1234'
    services:
      oracle:
        image: ${{ matrix.version.image }}
        env:
          ORACLE_PASSWORD: password
        ports:
          - "1521:${{ matrix.version.port }}"
    name: ${{ matrix.version.name }}
    steps:
    - uses: actions/checkout@v4
    - name: Test ${{ matrix.version.name }}
      uses: ./.github/actions/test-driver
      with:
        junit-name: ${{ matrix.version.junit-name }}
        test-args: >-
          :only-tags [:mb/driver-tests]
    - name: Upload Test Results
      uses: ./.github/actions/upload-test-results
      if: always()
      with:
        input-path: ./target/junit/
        output-name: ${{ github.job }}
        bucket: ${{ vars.AWS_S3_TEST_RESULTS_BUCKET }}
        aws-access-key-id: ${{ secrets.AWS_TEST_RESULTS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_TEST_RESULTS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}
        trunk-api-token: ${{ secrets.TRUNK_API_TOKEN }}

  be-tests-postgres:
    needs: files-changed
    if: github.event.pull_request.draft == false && needs.files-changed.outputs.backend_all == 'true'
    runs-on: ubuntu-22.04
    timeout-minutes: 90
    strategy:
      fail-fast: false
      matrix:
        version:
          - name: Postgres 12.x
            junit-name: postgres-ee
            docker-image: postgres:12-alpine
            env:
              enable-ssl-tests: 'false'
          - name: Postgres Latest
            junit-name: postgres-latest-ee
            docker-image: postgres:latest
            env:
              enable-ssl-tests: 'true'
        job:
          - name: Driver Tests
            build-static-viz: false
            test-args: >-
              :only-tags [:mb/driver-tests]
          - name: Enterprise Tests
            build-static-viz: false
            test-args: >-
              :only '"enterprise/backend/test"'
              :exclude-tags [:mb/driver-tests]
          - name: EE App DB Tests (Part 1)
            build-static-viz: true
            test-args: >-
              :only '"test"'
              :exclude-tags [:mb/driver-tests]
              :partition/total 2
              :partition/index 0
          - name: EE App DB Tests (Part 2)
            build-static-viz: true
            test-args: >-
              only '"test"'
              :exclude-tags [:mb/driver-tests]
              :partition/total 2
              :partition/index 1
    name: "${{ matrix.version.name }} ${{ matrix.job.name }}"
    env:
      CI: 'true'
      DRIVERS: postgres
      MB_DB_TYPE: postgres
      MB_DB_PORT: 5432
      MB_DB_HOST: localhost
      MB_DB_DBNAME: mb_test
      MB_DB_USER: mb_test
      MB_POSTGRESQL_TEST_USER: mb_test
      # SSL tests are only enabled for the postgres-latest job.
      MB_POSTGRES_SSL_TEST_SSL: ${{ matrix.version.env.enable-ssl-tests }}
      MB_POSTGRES_SSL_TEST_SSL_MODE: verify-full
      MB_POSTGRES_SSL_TEST_SSL_ROOT_CERT_PATH: 'test-resources/certificates/us-east-2-bundle.pem'
    services:
      postgres:
        image: ${{ matrix.version.docker-image }}
        ports:
          - "5432:5432"
        env:
          POSTGRES_USER: mb_test
          POSTGRES_DB: mb_test
          POSTGRES_HOST_AUTH_METHOD: trust
    steps:
      - uses: actions/checkout@v4
      - name: Test ${{ matrix.version.name }} (${{ matrix.job.name }})
        uses: ./.github/actions/test-driver
        with:
          build-static-viz: ${{ matrix.job.build-static-viz }}
          junit-name: 'be-tests-${{ matrix.version.junit-name }}'
          test-args: >-
            ${{ matrix.job.test-args }}
      - name: Upload Test Results
        uses: ./.github/actions/upload-test-results
        if: always()
        with:
          input-path: ./target/junit/
          output-name: ${{ github.job }}
          bucket: ${{ vars.AWS_S3_TEST_RESULTS_BUCKET }}
          aws-access-key-id: ${{ secrets.AWS_TEST_RESULTS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_TEST_RESULTS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
          trunk-api-token: ${{ secrets.TRUNK_API_TOKEN }}

  be-tests-presto-jdbc-ee:
    needs: files-changed
    if: github.event.pull_request.draft == false && needs.files-changed.outputs.backend_all == 'true'
    runs-on: ubuntu-22.04
    timeout-minutes: 90
    env:
      CI: 'true'
      DRIVERS: presto-jdbc
      MB_PRESTO_JDBC_TEST_CATALOG: test_data
      MB_PRESTO_JDBC_TEST_HOST: localhost
      MB_PRESTO_JDBC_TEST_PORT: 8443
      MB_PRESTO_JDBC_TEST_SSL: true
      MB_PRESTO_JDBC_TEST_USER: metabase
      MB_PRESTO_JDBC_TEST_PASSWORD: metabase
      MB_ENABLE_PRESTO_JDBC_DRIVER: true
      MB_PRESTO_JDBC_TEST_ADDITIONAL_OPTIONS: 'SSLTrustStorePath=/tmp/cacerts-with-presto-ssl.jks&SSLTrustStorePassword=changeit'
    name: Presto
    services:
      presto:
        image: metabase/presto-mb-ci:latest # version 0.254
        ports:
          - "8443:8443"
        env:
          JAVA_TOOL_OPTIONS: "-Xmx2g"
    steps:
    - uses: actions/checkout@v4
    - uses: ./.github/actions/await-port
      with:
         port: ${{ env.MB_PRESTO_JDBC_TEST_PORT }}
      timeout-minutes: 5
    - name: Create temp cacerts file based on bundled JDK one
      run: cp $JAVA_HOME/lib/security/cacerts /tmp/cacerts-with-presto-ssl.jks
    - name: Capture Presto server self signed CA
      run: |
          while [[ ! -s /tmp/presto-ssl-ca.pem ]]; do
            echo "Waiting to capture SSL CA" \
              && openssl s_client -connect localhost:8443 2>/dev/null </dev/null | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > /tmp/presto-ssl-ca.pem \
              && sleep 1;
          done
    - name: Convert Presto CA from PEM to DER
      run: openssl x509 -outform der -in /tmp/presto-ssl-ca.pem -out /tmp/presto-ssl-ca.der
    - name: Add write permission on cacerts file
      run: chmod u+w /tmp/cacerts-with-presto-ssl.jks
    - name: Import Presto CA into temp cacerts file
      run: >-
        keytool -noprompt -import
        -alias presto
        -keystore /tmp/cacerts-with-presto-ssl.jks
        -storepass changeit
        -file /tmp/presto-ssl-ca.der
        -trustcacerts
    - name: Test Presto JDBC driver
      uses: ./.github/actions/test-driver
      with:
        junit-name: 'be-tests-presto-jdbc-ee'
        test-args: >-
          :only-tags [:mb/driver-tests]
    - name: Upload Test Results
      uses: ./.github/actions/upload-test-results
      if: always()
      with:
        input-path: ./target/junit/
        output-name: ${{ github.job }}
        bucket: ${{ vars.AWS_S3_TEST_RESULTS_BUCKET }}
        aws-access-key-id: ${{ secrets.AWS_TEST_RESULTS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_TEST_RESULTS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}
        trunk-api-token: ${{ secrets.TRUNK_API_TOKEN }}

  be-tests-redshift-ee:
    needs: files-changed
    if: github.event.pull_request.draft == false && needs.files-changed.outputs.backend_all == 'true'
    runs-on: ubuntu-22.04
    timeout-minutes: 90
    env:
      CI: 'true'
      DRIVERS: redshift
      MB_REDSHIFT_TEST_USER: metabase_ci
      MB_REDSHIFT_TEST_DB: testdb
      MB_REDSHIFT_TEST_HOST: ${{ secrets.MB_REDSHIFT_TEST_HOST }}
      MB_REDSHIFT_TEST_PASSWORD: ${{ secrets.MB_REDSHIFT_TEST_PASSWORD }}
    name: Redshift
    steps:
    - uses: actions/checkout@v4
    - name: Test Redshift driver
      uses: ./.github/actions/test-driver
      with:
        junit-name: 'be-tests-redshift-ee'
        test-args: >-
          :only-tags [:mb/driver-tests]
    - name: Upload Test Results
      uses: ./.github/actions/upload-test-results
      if: always()
      with:
        input-path: ./target/junit/
        output-name: ${{ github.job }}
        bucket: ${{ vars.AWS_S3_TEST_RESULTS_BUCKET }}
        aws-access-key-id: ${{ secrets.AWS_TEST_RESULTS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_TEST_RESULTS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}
        trunk-api-token: ${{ secrets.TRUNK_API_TOKEN }}

  be-tests-snowflake-ee:
    needs: files-changed
    if: github.event.pull_request.draft == false && needs.files-changed.outputs.backend_all == 'true'
    runs-on: ubuntu-22.04
    timeout-minutes: 90
    env:
      CI: 'true'
      DRIVERS: snowflake
      MB_SNOWFLAKE_TEST_USER: METABASE CI
      MB_SNOWFLAKE_TEST_ACCOUNT: ${{ secrets.MB_SNOWFLAKE_TEST_ACCOUNT }}
      MB_SNOWFLAKE_TEST_PASSWORD: ${{ secrets.MB_SNOWFLAKE_TEST_PASSWORD }}
      MB_SNOWFLAKE_TEST_WAREHOUSE: ${{ secrets.MB_SNOWFLAKE_TEST_WAREHOUSE }}
      MB_SNOWFLAKE_TEST_PK_USER: METABASE PK
      MB_SNOWFLAKE_TEST_PK_PRIVATE_KEY: ${{ secrets.MB_SNOWFLAKE_TEST_PK_PRIVATE_KEY }}
      # RSA Role testing:
      MB_SNOWFLAKE_TEST_RSA_ROLE_TEST_DEFAULT_USER: RSA_ROLE_TEST_DEFAULT_USER
      MB_SNOWFLAKE_TEST_RSA_ROLE_TEST_CUSTOM_USER: RSA_ROLE_TEST_CUSTOM_USER
      MB_SNOWFLAKE_TEST_RSA_ROLE_TEST_ROLE: RSA_ROLE_TEST_ROLE
      MB_SNOWFLAKE_TEST_RSA_ROLE_TEST_DB: RSA_ROLE_TEST_DB
    name: Snowflake
    steps:
    - uses: actions/checkout@v4
    - name: Test Snowflake driver
      uses: ./.github/actions/test-driver
      with:
        junit-name: 'be-tests-snowflake-ee'
        test-args: >-
          :only-tags [:mb/driver-tests]
    - name: Upload Test Results
      uses: ./.github/actions/upload-test-results
      if: always()
      with:
        input-path: ./target/junit/
        output-name: ${{ github.job }}
        bucket: ${{ vars.AWS_S3_TEST_RESULTS_BUCKET }}
        aws-access-key-id: ${{ secrets.AWS_TEST_RESULTS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_TEST_RESULTS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}
        trunk-api-token: ${{ secrets.TRUNK_API_TOKEN }}

  be-tests-sparksql-ee:
    needs: files-changed
    if: github.event.pull_request.draft == false && needs.files-changed.outputs.backend_all == 'true'
    runs-on: ubuntu-22.04
    timeout-minutes: 90
    env:
      CI: 'true'
      DRIVERS: sparksql
    services:
      sparksql:
        image: metabase/spark:3.2.1
        ports:
          - "10000:10000"
    name: Spark SQL
    steps:
    - uses: actions/checkout@v4
    - name: Test Spark driver
      uses: ./.github/actions/test-driver
      with:
        junit-name: 'be-tests-sparksql-ee'
        test-args: >-
          :only-tags [:mb/driver-tests]
    - name: Upload Test Results
      uses: ./.github/actions/upload-test-results
      if: always()
      with:
        input-path: ./target/junit/
        output-name: ${{ github.job }}
        bucket: ${{ vars.AWS_S3_TEST_RESULTS_BUCKET }}
        aws-access-key-id: ${{ secrets.AWS_TEST_RESULTS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_TEST_RESULTS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}
        trunk-api-token: ${{ secrets.TRUNK_API_TOKEN }}

  be-tests-sqlite-ee:
    needs: files-changed
    if: github.event.pull_request.draft == false && needs.files-changed.outputs.backend_all == 'true'
    runs-on: ubuntu-22.04
    timeout-minutes: 90
    env:
      CI: 'true'
      DRIVERS: sqlite
    name: SQLite
    steps:
    - uses: actions/checkout@v4
    - name: Test SQLite driver
      uses: ./.github/actions/test-driver
      with:
        junit-name: 'be-tests-sqlite-ee'
        test-args: >-
          :only-tags [:mb/driver-tests]
    - name: Upload Test Results
      uses: ./.github/actions/upload-test-results
      if: always()
      with:
        input-path: ./target/junit/
        output-name: ${{ github.job }}
        bucket: ${{ vars.AWS_S3_TEST_RESULTS_BUCKET }}
        aws-access-key-id: ${{ secrets.AWS_TEST_RESULTS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_TEST_RESULTS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}
        trunk-api-token: ${{ secrets.TRUNK_API_TOKEN }}

  be-tests-sqlserver:
    needs: files-changed
    if: github.event.pull_request.draft == false && needs.files-changed.outputs.backend_all == 'true'
    runs-on: ubuntu-20.04
    timeout-minutes: 90
    strategy:
      fail-fast: false
      matrix:
        version:
          - name: SQL Server 2017
            junit-name: be-tests-sqlserver-2017-ee
            image: mcr.microsoft.com/mssql/server:2017-latest
          - name: SQL Server 2022
            junit-name: be-tests-sqlserver-2022-ee
            image: mcr.microsoft.com/mssql/server:2022-latest
    env:
      CI: 'true'
      DRIVERS: sqlserver
      MB_SQLSERVER_TEST_HOST: localhost
      MB_SQLSERVER_TEST_PASSWORD: 'P@ssw0rd'
      MB_SQLSERVER_TEST_USER: SA
    services:
      sqlserver:
        image: ${{ matrix.version.image }}
        ports:
          - "1433:1433"
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: 'P@ssw0rd'
          MSSQL_MEMORY_LIMIT_MB: 1024
    name: ${{ matrix.version.name }}
    steps:
    - uses: actions/checkout@v4
    - name: Test ${{ matrix.version.name }}
      uses: ./.github/actions/test-driver
      with:
        junit-name: ${{ matrix.version.junit-name }}
        test-args: >-
          :only-tags [:mb/driver-tests]
    - name: Upload Test Results
      uses: ./.github/actions/upload-test-results
      if: always()
      with:
        input-path: ./target/junit/
        output-name: ${{ github.job }}
        bucket: ${{ vars.AWS_S3_TEST_RESULTS_BUCKET }}
        aws-access-key-id: ${{ secrets.AWS_TEST_RESULTS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_TEST_RESULTS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}
        trunk-api-token: ${{ secrets.TRUNK_API_TOKEN }}

  be-tests-vertica-ee:
    needs: files-changed
    if: github.event.pull_request.draft == false && needs.files-changed.outputs.backend_all == 'true'
    runs-on: ubuntu-22.04
    timeout-minutes: 90
    env:
      CI: 'true'
      DRIVERS: vertica
    services:
      vertica:
        image: vertica/vertica-ce:12.0.2-0
        ports:
          - "5433:5433"
    name: Vertica
    steps:
    - uses: actions/checkout@v4
    - name: Make plugins directory
      run: mkdir plugins
    - name: Test Vertica driver
      uses: ./.github/actions/test-driver
      with:
        junit-name: 'be-tests-vertica-ee'
        test-args: >-
          :only-tags [:mb/driver-tests]
    - name: Upload Test Results
      uses: ./.github/actions/upload-test-results
      if: always()
      with:
        input-path: ./target/junit/
        output-name: ${{ github.job }}
        bucket: ${{ vars.AWS_S3_TEST_RESULTS_BUCKET }}
        aws-access-key-id: ${{ secrets.AWS_TEST_RESULTS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_TEST_RESULTS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}
        trunk-api-token: ${{ secrets.TRUNK_API_TOKEN }}

  drivers-tests-result:
    needs:
      # if you add a driver job, you must add it to this list for it to be a required check
      - be-tests-h2
      - be-tests-athena-ee
      - be-tests-bigquery-cloud-sdk-ee
      - be-tests-druid-ee
      - be-tests-databricks-ee
      - be-tests-druid-jdbc-ee
      - be-tests-mysql-mariadb
      - be-tests-mongo
      - be-tests-mongo-ssl
      - be-tests-mongo-sharded-cluster-ee
      - be-tests-oracle
      - be-tests-postgres
      - be-tests-presto-jdbc-ee
      - be-tests-redshift-ee
      - be-tests-snowflake-ee
      - be-tests-sparksql-ee
      - be-tests-sqlite-ee
      - be-tests-sqlserver
      - be-tests-vertica-ee
    runs-on: ubuntu-latest
    timeout-minutes: 5
    name: drivers-tests-result
    if: always() && !cancelled()
    steps:
      - name: Check job status
        uses: actions/github-script@v7
        env:
          needs: ${{ toJson(needs) }}
        with:
          script: | # js
            const needs = JSON.parse(process.env.needs);

            const jobs = Object.entries(needs).map(
              ([jobName, jobValues]) => ({
                name: jobName,
                result: jobValues.result
              }));

            // are all jobs skipped or successful?
            if (jobs.every(job => (job.result === 'skipped' || job.result === 'success'))) {
                console.log("");
                console.log("        _------.        ");
                console.log("       /  ,     \_      ");
                console.log("     /   /  /{}\ |o\_   ");
                console.log("    /    \  `--' /-' \  ");
                console.log("   |      \      \    | ");
                console.log("  |              |`-, | ");
                console.log("  /              /__/)/ ");
                console.log(" |              |       ");
                console.log("");
                console.log("All driver tests have passed (or have been skipped). Cam is very proud of you.");
              process.exit(0);
            }

            // otherwise, something failed
            console.log("");
            console.log("       .::::::::::.                          .::::::::::.       ");
            console.log("     .::::''''''::::.                      .::::''''''::::.     ");
            console.log("   .:::'          `::::....          ....::::'          `:::.   ");
            console.log("  .::'             `:::::::|        |:::::::'             `::.  ");
            console.log(" .::|               |::::::|_ ___ __|::::::|               |::. ");
            console.log(" `--'               |::::::|_()__()_|::::::|               `--' ");
            console.log("  :::               |::-o::|        |::o-::|               :::  ");
            console.log("  `::.             .|::::::|        |::::::|.             .::'  ");
            console.log("   `:::.          .::\-----'        `-----/::.          .:::'   ");
            console.log("     `::::......::::'                      `::::......::::'     ");
            console.log("       `::::::::::'                          `::::::::::'       ");
            console.log("");
            console.log("Driver tests have failed. You have been sentenced to MetaJail.");

            jobs.forEach((job) => {
              if (job.result !== 'success') {
                console.log(`${job.name} - ${job.result}`);
              }
            });

            process.exit(1);
