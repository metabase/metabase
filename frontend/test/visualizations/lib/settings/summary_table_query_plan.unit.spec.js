import {getQueryPlan} from "metabase/visualizations/lib/settings/summary_table";
import type {QueryPlan, SummaryTableSettings} from "metabase/meta/types/summary_table";
import {Set} from 'immutable';
import zip from 'lodash.zip';


describe('summary table query plan', () =>{

  describe('given query plan initialized by grouped columns: a,b,c', () => {
    const settings: SummaryTableSettings = {
      groupsSources: ['a','b','c'],
      columnsSource: null,
      valuesSources: [],
      columnNameToMetadata: {}
    };
      const queryPlan = getQueryPlan(settings);
      it('should be empty', () => expectToBeEmpty(queryPlan));

  });
    describe('given query plan initialized by grouped columns: a,b,c and values: d,e', () => {
      const settings: SummaryTableSettings = {
        groupsSources: ['a','b','c'],
        columnsSource: null,
        valuesSources: ['d','e'],
        columnNameToMetadata: {}
      };
      const queryPlan = getQueryPlan(settings);
      it('should be empty', () => expectToBeEmpty(queryPlan));

    });

    describe('given query plan initialized by grouped columns: a,b,c and values: d,e and totals for a,c', () => {
      const settings: SummaryTableSettings = {
        groupsSources: ['a','b','c'],
        columnsSource: null,
        valuesSources: ['d','e'],
        columnNameToMetadata: {a : {showTotals : true}, c : {showTotals: true}}
      };
      const queryPlan = getQueryPlan(settings);
      it('should not have pivot column', () =>expect(queryPlan.mainQueryTotalColumn).toBeUndefined());
      it('should have d,e aggregation', () => setsExpectToBeEqual(queryPlan.aggregations, Set.of( 'e', 'd')));
      it('should have a,b and empty groups', () => groupingsExpectToEqual(queryPlan.groupings, [[Set.of('a','b')], [Set.of()]]));



    });

    describe('given query plan initialized by grouped columns: a,b,c and values: d and pivot for e and totals for a,b', () => {
      const settings: SummaryTableSettings = {
        groupsSources: ['a','b','c'],
        columnsSource: 'e',
        valuesSources: ['d'],
        columnNameToMetadata: {b : {showTotals : true}, a : {showTotals : true}}
      };
      const queryPlan = getQueryPlan(settings);
      it('should not have pivot column', () =>expect(queryPlan.mainQueryTotalColumn).toBeUndefined());
      it('should have d aggregation', () => setsExpectToBeEqual(queryPlan.aggregations, Set.of('d')));
      it('should have e and a,e groups', () => groupingsExpectToEqual(queryPlan.groupings,[[Set.of('a','e')], [Set.of('e')]]));


    });

    describe('given query plan initialized by grouped columns: a,b,c and values: d, f and pivot for e and totals for a,c, e', () => {
      const settings: SummaryTableSettings = {
        groupsSources: ['a','b','c'],
        columnsSource: 'e',
        valuesSources: ['d', 'f'],
        columnNameToMetadata: {a : {showTotals : true}, c : {showTotals : true}, e : {showTotals : true}}
      };
      const queryPlan = getQueryPlan(settings);
      it('should have pivot column generated by grouped a,b,c', () =>setsExpectToBeEqual(queryPlan.mainQueryTotalColumn, Set.of('c','b','a')));
      it('should have d,e aggregation', () => setsExpectToBeEqual(queryPlan.aggregations, Set.of('f', 'd')));
      it('should have a,e and empty groups', () => groupingsExpectToEqual(queryPlan.groupings,[ [Set.of('a','b'), Set.of('e', 'a','b')], [Set.of(), Set.of('e')]]));
    });
}

);

const expectToBeEmpty = (queryPlan : QueryPlan) : void=>{
  expect(queryPlan.mainQueryTotalColumn).toBeUndefined();
  expect(queryPlan.aggregations.size).toBe(0);
  expect(queryPlan.groupings).toEqual([]);
};


const setsExpectToBeEqual = (computed :Set , expected : Set) => expect(computed.equals(expected)).toEqual(true);

const groupingsExpectToEqual = (groupings: Set<string>[][], expectedGroupings: Set<string>[][] ) => {
  expect(groupings.length).toEqual(expectedGroupings.length);

  zip(groupings, expectedGroupings).forEach(([gr, exGr]) => setsExpectToBeEqual(Set.of(...gr), Set.of(...exGr)));
};
