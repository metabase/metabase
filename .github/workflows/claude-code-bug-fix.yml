name: "Claude Code Bug Fix"

on:
  # TEMPORARILY DISABLED FOR TESTING - uncomment when ready for production
  # issues:
  #   types:
  #     - labeled
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number to fix'
        required: true
        type: string

jobs:
  check-employee-and-issue:
    runs-on: ubuntu-22.04
    timeout-minutes: 2
    permissions:
      contents: read
      issues: read
    if: |
      (github.event_name == 'issues' && github.event.label.name == 'claude:fix-issue-ci' && github.event.issue.state == 'open') ||
      (github.event_name == 'workflow_dispatch')
    outputs:
      is_employee: ${{ steps.check_employee.outputs.is_employee }}
      issue_number: ${{ steps.get_issue.outputs.issue_number }}
      issue_data: ${{ steps.get_issue.outputs.issue_data }}
    steps:
      - name: Get issue data
        id: get_issue
        uses: actions/github-script@v7
        with:
          script: |
            let issueNumber, issueData;
            
            if (context.eventName === 'issues') {
              // Original issue label event
              issueNumber = context.payload.issue.number;
              issueData = context.payload.issue;
            } else if (context.eventName === 'workflow_dispatch') {
              // Manual trigger with issue number input
              issueNumber = parseInt('${{ github.event.inputs.issue_number }}');
              const { data } = await github.rest.issues.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber
              });
              issueData = data;
            }
            
            core.setOutput('issue_number', issueNumber);
            core.setOutput('issue_data', JSON.stringify(issueData));
            
            console.log(`Issue #${issueNumber}: ${issueData.title}`);
            console.log(`Issue author: ${issueData.user.login}`);

      - name: Check if issue creator is a Metabase employee
        id: check_employee
        uses: actions/github-script@v7
        env:
          ISSUE_DATA: ${{ steps.get_issue.outputs.issue_data }}
        with:
          script: |
            try {
              const issueData = JSON.parse(process.env.ISSUE_DATA);
              const issueAuthor = issueData.user.login;
              
              // Check if user is a public member of the metabase organization
              const { data: publicMembers } = await github.rest.orgs.listPublicMembers({
                org: 'metabase'
              });
              
              const isPublicMember = publicMembers.some(member => member.login === issueAuthor);
              
              if (isPublicMember) {
                console.log(`User ${issueAuthor} is a public member of the Metabase organization. Proceeding with bug fix automation.`);
                core.setOutput('is_employee', 'true');
              } else {
                console.log(`User ${issueAuthor} is not a public member of the Metabase organization. Skipping bug fix automation.`);
                core.setOutput('is_employee', 'false');
              }
            } catch (error) {
              console.error('Error checking public organization membership:', error);
              core.setOutput('is_employee', 'false');
            }

  auto-fix-bug:
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write
    needs: check-employee-and-issue
    if: needs.check-employee-and-issue.outputs.is_employee == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up git configuration
        run: |
          git config --global user.name "Claude Code[bot]"
          git config --global user.email "noreply@anthropic.com"

      - name: Prepare dynamic issue info
        id: prepare_issue_info
        uses: actions/github-script@v7
        env:
          ISSUE_DATA: ${{ needs.check-employee-and-issue.outputs.issue_data }}
        with:
          script: |
            const issueData = JSON.parse(process.env.ISSUE_DATA);
            const issueNumber = '${{ needs.check-employee-and-issue.outputs.issue_number }}';
            
            // Create unique branch name with timestamp
            const timestamp = new Date().toISOString().replace(/[-:]/g, '').replace(/\..+/, '').replace('T', '-');
            const branchName = `bug-fix/issue-${issueNumber}-${timestamp}`;
            core.exportVariable('BRANCH_NAME', branchName);
            
            // Export issue info for the prompt
            core.exportVariable('ISSUE_NUMBER', issueNumber);
            core.exportVariable('ISSUE_TITLE', issueData.title);
            core.exportVariable('ISSUE_AUTHOR', issueData.user.login);
            core.exportVariable('ISSUE_CREATED', issueData.created_at);
            core.exportVariable('ISSUE_BODY', issueData.body || 'No description provided');

      - name: Prepare bug fix prompt
        id: prepare_prompt
        run: |
          # Prepare the prompt for Claude
          cat << 'EOF' >> $GITHUB_ENV
          BUG_FIX_PROMPT<<PROMPT_END
          You are helping to automatically fix a bug reported in GitHub issue #${{ env.ISSUE_NUMBER }}.

          ## Bug Report Details
          **Title:** ${{ env.ISSUE_TITLE }}
          **Reporter:** ${{ env.ISSUE_AUTHOR }}
          **Created:** ${{ env.ISSUE_CREATED }}

          **Description:**
          ${{ env.ISSUE_BODY }}

          ## Instructions
          1. **Analyze the bug report** - Understand what the issue is describing
          2. **Search the codebase** - Use Grep and Glob tools to find relevant files
          3. **Implement a fix** - Follow existing code patterns and conventions
          4. **Test the fix** - Run appropriate tests using the commands in CLAUDE.md:
             - JavaScript/TypeScript: `yarn test-unit path/to/file.unit.spec.js`
             - Clojure: `clojure -X:dev:test :only namespace/test-name`
             - Lint: `yarn lint-eslint-pure` for JS/TS, `./bin/mage kondo <file>` for Clojure
          5. **Verify the fix** - Ensure tests pass and code follows conventions

          ## Important Guidelines
          - Follow the development patterns in CLAUDE.md
          - Write failing tests first, then fix them
          - Work in small, testable increments
          - Don't commit changes - leave that for the workflow
          - Focus only on fixing the reported bug, don't make unrelated changes
          
          ## If You Cannot Fix The Bug
          If you determine that you cannot create a definitive fix, create a file called `FAILED_FIX_ANALYSIS.md` with:
          1. **Root Cause Analysis** - What you discovered about the issue
          2. **Why No Fix** - Specific reason why you couldn't implement a fix
          3. **Tool Limitations** - If you needed additional tools/access that weren't available
          4. **Recommendations** - What a human developer should investigate or try
          5. **Next Steps** - Suggested approaches for resolving the issue
          
          Example reasons you might not be able to fix:
          - Requires more context/clarification from the reporter
          - Involves complex architectural decisions
          - Needs access to external systems/APIs
          - Requires understanding of business logic not evident in code
          - Issue is unclear or seems to be a configuration problem
          - Missing tool access (e.g., database queries, external API calls, deployment tools)
          
          **Important**: If you were blocked by tool limitations, be specific about what additional tools or access you would need:
          - Database access to run queries or migrations
          - External API access to test integrations
          - Docker/container tools for environment issues
          - Package management tools (npm, pip, etc.)
          - Build/deployment tools
          - Network tools for connectivity issues

          ## Repository Context
          This is the Metabase codebase - a business intelligence application with:
          - Frontend: TypeScript/React in `frontend/` directory
          - Backend: Clojure in `src/` directory  
          - Tests: Various test files with `.unit.spec.js`, `.spec.js`, or `_test.clj` patterns

          Start by understanding the bug and then systematically work toward a solution.
          PROMPT_END
          EOF

      - name: Generate Bug Fix with Claude Code
        uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          direct_prompt: ${{ env.BUG_FIX_PROMPT }}
          timeout_minutes: "25"
          allowed_tools: "Bash(yarn test-unit*),Bash(yarn lint-eslint-pure),Bash(./bin/mage*),Bash(clojure*),Bash(find*),Bash(ls*),Bash(grep*),Write,Read,Glob,Grep,Edit,MultiEdit"
          disallowed_tools: "Bash(git commit*),Bash(git push*),Bash(gh*)"

      - name: Check for changes and analysis
        id: check_changes
        run: |
          # Check if Claude created an analysis file first and store its content
          if [ -f "FAILED_FIX_ANALYSIS.md" ]; then
            echo "has_analysis=true" >> $GITHUB_OUTPUT
            echo "Analysis file found"
            # Store analysis content in a GitHub output (base64 encoded to handle multiline)
            ANALYSIS_CONTENT=$(base64 -w 0 FAILED_FIX_ANALYSIS.md)
            echo "analysis_content=$ANALYSIS_CONTENT" >> $GITHUB_OUTPUT
            # Remove analysis file so it doesn't count as a code change
            rm -f FAILED_FIX_ANALYSIS.md
          else
            echo "has_analysis=false" >> $GITHUB_OUTPUT
            echo "No analysis file found"
          fi
          
          # Now check for actual code changes (excluding analysis file)
          if [ -n "$(git status --porcelain)" ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "Changes detected:"
            git status --short
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "No changes made by Claude."
          fi

      - name: Get issue team labels and prepare reviewers
        if: steps.check_changes.outputs.has_changes == 'true'
        id: prepare_reviewers
        uses: actions/github-script@v7
        env:
          ISSUE_DATA: ${{ needs.check-employee-and-issue.outputs.issue_data }}
        with:
          script: |
            // Get existing team labels from the issue
            const issueData = JSON.parse(process.env.ISSUE_DATA);
            const issueLabels = issueData.labels.map(label => label.name);
            const teamLabels = issueLabels.filter(label => label.startsWith('.Team/'));

            console.log('Issue labels:', issueLabels);
            console.log('Team labels found:', teamLabels);

            // Add issue creator as reviewer
            const issueCreator = issueData.user.login;

            core.setOutput('team_labels', teamLabels.join(','));
            core.setOutput('reviewers', issueCreator);

            console.log('Reviewer:', issueCreator);

      - name: Create Pull Request
        if: steps.check_changes.outputs.has_changes == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ env.BRANCH_NAME }}
          base: master
          commit-message: |
            Fix: ${{ env.ISSUE_TITLE }}

            Fixes #${{ env.ISSUE_NUMBER }}

            🤖 Generated with [Claude Code](https://claude.ai/code)

            Co-Authored-By: Claude <noreply@anthropic.com>
          committer: "Claude Code[bot] <noreply@anthropic.com>"
          author: "Claude Code[bot] <noreply@anthropic.com>"
          title: "Fix: ${{ env.ISSUE_TITLE }}"
          body: |
            This PR automatically fixes the bug reported in #${{ env.ISSUE_NUMBER }}.

            ## Bug Report
            **Original Issue:** #${{ env.ISSUE_NUMBER }}
            **Reporter:** @${{ env.ISSUE_AUTHOR }}
            **Issue Title:** ${{ env.ISSUE_TITLE }}

            ## Automated Fix
            🤖 This fix was generated automatically by Claude Code based on the issue description.

            **Please review carefully:**
            - [ ] The fix addresses the reported issue
            - [ ] Tests pass and code follows conventions  
            - [ ] No unrelated changes were introduced
            - [ ] The solution is appropriate and maintainable

            ## Next Steps
            - Review the changes and test thoroughly
            - If the fix looks good, approve and merge
            - If issues are found, either fix them or close this PR

            ---
            Closes #${{ env.ISSUE_NUMBER }}

            🤖 Generated with [Claude Code](https://claude.ai/code)

            Co-Authored-By: Claude <noreply@anthropic.com>
          labels: |
            Type:Bug
            ${{ steps.prepare_reviewers.outputs.team_labels }}
            automated-fix
          reviewers: ${{ steps.prepare_reviewers.outputs.reviewers }}

      # TEMPORARILY DISABLED FOR TESTING - uncomment when ready for production
      # - name: Comment on issue
      #   if: steps.check_changes.outputs.has_changes == 'true'
      #   uses: actions/github-script@v7
      #   with:
      #     script: |
      #       await github.rest.issues.createComment({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         issue_number: '${{ env.ISSUE_NUMBER }}',
      #         body: `🤖 **Automated Fix Created**
      #         
      #         I've analyzed this bug report and created a potential fix. Please review the automatically generated PR that should appear shortly.
      #         
      #         If the automated fix doesn't fully address the issue, feel free to provide additional details or close the generated PR.
      #         
      #         ---
      #         🤖 Generated with [Claude Code](https://claude.ai/code)`
      #       });

      # TEMPORARILY DISABLED FOR TESTING - uncomment when ready for production
      # - name: Handle no changes
      #   if: steps.check_changes.outputs.has_changes == 'false'
      #   uses: actions/github-script@v7
      #   with:
      #     script: |
      #       let analysisContent = '';
      #       
      #       // Check if Claude provided a detailed analysis
      #       if ('${{ steps.check_changes.outputs.has_analysis }}' === 'true') {
      #         try {
      #           // Decode the base64-encoded analysis content
      #           const analysisBase64 = '${{ steps.check_changes.outputs.analysis_content }}';
      #           analysisContent = Buffer.from(analysisBase64, 'base64').toString('utf8');
      #         } catch (error) {
      #           console.log('Could not decode analysis content:', error);
      #         }
      #       }
      #       
      #       let commentBody = `🤖 **Automated Fix Analysis**
      #
      #       I analyzed this bug report but wasn't able to generate a code fix automatically.`;
      #
      #       if (analysisContent) {
      #         commentBody += `
      #
      #       ## Analysis Details
      #
      #       ${analysisContent}`;
      #       } else {
      #         commentBody += `
      #
      #       This could be because:
      #
      #       - The issue requires more context or clarification
      #       - The fix is complex and requires human judgment  
      #       - The issue is not a straightforward code bug
      #       - I couldn't locate the relevant code to modify
      #
      #       A human developer should review this issue for manual investigation.`;
      #       }
      #
      #       commentBody += `
      #
      #       ---
      #       🤖 Generated with [Claude Code](https://claude.ai/code)`;
      #
      #       await github.rest.issues.createComment({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         issue_number: '${{ env.ISSUE_NUMBER }}',
      #         body: commentBody
      #       });

      - name: Log analysis for no changes
        if: steps.check_changes.outputs.has_changes == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            console.log('🤖 No code changes were made by Claude.');
            
            // Check if Claude provided a detailed analysis
            if ('${{ steps.check_changes.outputs.has_analysis }}' === 'true') {
              try {
                // Decode the base64-encoded analysis content
                const analysisBase64 = '${{ steps.check_changes.outputs.analysis_content }}';
                const analysisContent = Buffer.from(analysisBase64, 'base64').toString('utf8');
                
                console.log('📋 Claude provided detailed analysis:');
                console.log('='.repeat(50));
                console.log(analysisContent);
                console.log('='.repeat(50));
              } catch (error) {
                console.log('❌ Could not decode analysis content:', error);
              }
            } else {
              console.log('ℹ️  No detailed analysis file was created by Claude.');
              console.log('This could be because:');
              console.log('- The issue requires more context or clarification');
              console.log('- The fix is complex and requires human judgment');
              console.log('- The issue is not a straightforward code bug');
              console.log('- Claude couldn\'t locate the relevant code to modify');
            }
