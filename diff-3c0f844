commit 3c0f8445c9542fbd0b1ff4a58694ed5d02ac9798
Author: Alexander Polyankin <alexander.polyankin@metabase.com>
Date:   Wed Nov 30 18:50:38 2022 +0200

    Migrate setup to the new database form (#26818)

diff --git a/frontend/src/metabase-types/api/database.ts b/frontend/src/metabase-types/api/database.ts
index 8768ab829b..f174f4b07d 100644
--- a/frontend/src/metabase-types/api/database.ts
+++ b/frontend/src/metabase-types/api/database.ts
@@ -1,4 +1,5 @@
 import { NativePermissions } from "./permissions";
+import { ScheduleSettings } from "./settings";
 
 export type DatabaseId = number;
 
@@ -26,3 +27,8 @@ export interface Database {
   // Only appears in  GET /api/database/:id
   "can-manage"?: boolean;
 }
+
+export interface DatabaseSchedules {
+  metadata_sync?: ScheduleSettings;
+  cache_field_values?: ScheduleSettings;
+}
diff --git a/frontend/src/metabase-types/api/settings.ts b/frontend/src/metabase-types/api/settings.ts
index ff4a9aec73..39f1aa708e 100644
--- a/frontend/src/metabase-types/api/settings.ts
+++ b/frontend/src/metabase-types/api/settings.ts
@@ -70,6 +70,24 @@ export interface EngineSourceContact {
   address?: string;
 }
 
+export interface ScheduleSettings {
+  schedule_day?: ScheduleDayType;
+  schedule_frame?: ScheduleFrameType;
+  schedule_hour?: boolean;
+  schedule_minute?: number;
+}
+
+export type ScheduleDayType =
+  | "sun"
+  | "mon"
+  | "tue"
+  | "wed"
+  | "thu"
+  | "fri"
+  | "sat";
+
+export type ScheduleFrameType = "first" | "mid" | "last";
+
 export interface FontFile {
   src: string;
   fontWeight: number;
diff --git a/frontend/src/metabase-types/store/mocks/setup.ts b/frontend/src/metabase-types/store/mocks/setup.ts
index 1826bf06cb..c0f28e1e88 100644
--- a/frontend/src/metabase-types/store/mocks/setup.ts
+++ b/frontend/src/metabase-types/store/mocks/setup.ts
@@ -1,5 +1,4 @@
 import {
-  DatabaseDetails,
   DatabaseInfo,
   InviteInfo,
   Locale,
@@ -33,19 +32,15 @@ export const createMockInviteInfo = (
   ...opts,
 });
 
-export const createMockDatabaseDetails = (
-  opts?: Partial<DatabaseDetails>,
-): DatabaseDetails => ({
-  ssl: false,
-  ...opts,
-});
-
 export const createMockDatabaseInfo = (
   opts?: Partial<DatabaseInfo>,
 ): DatabaseInfo => ({
   name: "Database",
   engine: "H2",
-  details: createMockDatabaseDetails(),
+  details: {},
+  schedules: {},
+  auto_run_queries: false,
+  refingerprint: false,
   ...opts,
 });
 
diff --git a/frontend/src/metabase-types/store/setup.ts b/frontend/src/metabase-types/store/setup.ts
index e015cf665d..45858c5dab 100644
--- a/frontend/src/metabase-types/store/setup.ts
+++ b/frontend/src/metabase-types/store/setup.ts
@@ -1,3 +1,5 @@
+import { DatabaseSchedules } from "metabase-types/api";
+
 export interface Locale {
   name: string;
   code: string;
@@ -20,12 +22,11 @@ export interface InviteInfo {
 
 export interface DatabaseInfo {
   name: string;
-  engine: string;
-  details: DatabaseDetails;
-}
-
-export interface DatabaseDetails {
-  ssl: boolean;
+  engine: string | undefined;
+  details: Record<string, unknown>;
+  schedules: DatabaseSchedules;
+  auto_run_queries: boolean;
+  refingerprint: boolean;
 }
 
 export interface SubscribeInfo {
diff --git a/frontend/src/metabase/databases/components/DatabaseForm/index.ts b/frontend/src/metabase/databases/components/DatabaseForm/index.ts
index 9241f534d7..d807afca6b 100644
--- a/frontend/src/metabase/databases/components/DatabaseForm/index.ts
+++ b/frontend/src/metabase/databases/components/DatabaseForm/index.ts
@@ -1 +1,2 @@
 export { default } from "./DatabaseForm";
+export type { DatabaseFormProps } from "./DatabaseForm";
diff --git a/frontend/src/metabase/databases/components/DatabaseNameField/DatabaseNameField.tsx b/frontend/src/metabase/databases/components/DatabaseNameField/DatabaseNameField.tsx
index 76ac9192af..9d3195fdab 100644
--- a/frontend/src/metabase/databases/components/DatabaseNameField/DatabaseNameField.tsx
+++ b/frontend/src/metabase/databases/components/DatabaseNameField/DatabaseNameField.tsx
@@ -17,7 +17,6 @@ const DatabaseNameField = ({ engine }: DatabaseNameFieldProps): JSX.Element => {
       placeholder={t`Our ${name}`}
       rightIcon="info"
       rightIconTooltip={t`Choose what this data will be called in Metabase.`}
-      nullable
     />
   );
 };
diff --git a/frontend/src/metabase/databases/constants.tsx b/frontend/src/metabase/databases/constants.tsx
index 7f088254ce..3f7ca3ecaa 100644
--- a/frontend/src/metabase/databases/constants.tsx
+++ b/frontend/src/metabase/databases/constants.tsx
@@ -92,6 +92,12 @@ export const FIELD_OVERRIDES: Record<string, EngineFieldOverride> = {
   "use-conn-uri": {
     type: DatabaseConnectionSectionField,
   },
+  "schedules.metadata_sync": {
+    name: "schedules.metadata_sync",
+  },
+  "schedules.cache_field_values": {
+    name: "schedules.cache_field_values",
+  },
   auto_run_queries: {
     name: "auto_run_queries",
   },
diff --git a/frontend/src/metabase/databases/containers/DatabaseEngineWarning/DatabaseEngineWarning.tsx b/frontend/src/metabase/databases/containers/DatabaseEngineWarning/DatabaseEngineWarning.tsx
index 2683aa9929..62e4b2e611 100644
--- a/frontend/src/metabase/databases/containers/DatabaseEngineWarning/DatabaseEngineWarning.tsx
+++ b/frontend/src/metabase/databases/containers/DatabaseEngineWarning/DatabaseEngineWarning.tsx
@@ -1,7 +1,7 @@
 import { connect } from "react-redux";
 import { getSetting } from "metabase/selectors/settings";
-import type { Engine } from "metabase-types/api";
-import type { State } from "metabase-types/store";
+import { Engine } from "metabase-types/api";
+import { State } from "metabase-types/store";
 import DatabaseEngineWarning from "../../components/DatabaseEngineWarning";
 
 export interface DatabaseEngineWarningProps {
diff --git a/frontend/src/metabase/databases/containers/DatabaseForm/DatabaseForm.tsx b/frontend/src/metabase/databases/containers/DatabaseForm/DatabaseForm.tsx
new file mode 100644
index 0000000000..eaab029de5
--- /dev/null
+++ b/frontend/src/metabase/databases/containers/DatabaseForm/DatabaseForm.tsx
@@ -0,0 +1,19 @@
+import { connect } from "react-redux";
+import { getSetting } from "metabase/selectors/settings";
+import { State } from "metabase-types/store";
+import DatabaseForm, { DatabaseFormProps } from "../../components/DatabaseForm";
+
+type DatabaseFormOwnProps = Omit<DatabaseFormProps, "engines" | "isHosted">;
+type DatabaseFormStateProps = Pick<DatabaseFormProps, "engines" | "isHosted">;
+
+const mapStateToProps = (state: State) => ({
+  engines: getSetting(state, "engines"),
+  isHosted: getSetting(state, "is-hosted?"),
+});
+
+export default connect<
+  DatabaseFormStateProps,
+  unknown,
+  DatabaseFormOwnProps,
+  State
+>(mapStateToProps)(DatabaseForm);
diff --git a/frontend/src/metabase/databases/containers/DatabaseForm/index.ts b/frontend/src/metabase/databases/containers/DatabaseForm/index.ts
new file mode 100644
index 0000000000..9241f534d7
--- /dev/null
+++ b/frontend/src/metabase/databases/containers/DatabaseForm/index.ts
@@ -0,0 +1 @@
+export { default } from "./DatabaseForm";
diff --git a/frontend/src/metabase/databases/types.ts b/frontend/src/metabase/databases/types.ts
index 240d0c8270..e764f02ac6 100644
--- a/frontend/src/metabase/databases/types.ts
+++ b/frontend/src/metabase/databases/types.ts
@@ -1,9 +1,17 @@
 import { ComponentType, ReactNode } from "react";
-import { EngineFieldOption, EngineFieldType } from "metabase-types/api";
+import {
+  DatabaseSchedules,
+  EngineFieldOption,
+  EngineFieldType,
+} from "metabase-types/api";
 
 export interface DatabaseValues {
+  name: string;
   engine: string | undefined;
   details: Record<string, unknown>;
+  schedules: DatabaseSchedules;
+  auto_run_queries: boolean;
+  refingerprint: boolean;
 }
 
 export interface EngineOption {
diff --git a/frontend/src/metabase/databases/utils/engine.ts b/frontend/src/metabase/databases/utils/engine.ts
index 42b894bf70..39ba32f61e 100644
--- a/frontend/src/metabase/databases/utils/engine.ts
+++ b/frontend/src/metabase/databases/utils/engine.ts
@@ -28,5 +28,5 @@ export const getEngineOptions = (
 
 export const getEngineLogo = (engine: string): string | undefined => {
   const logo = ENGINE_LOGO[engine];
-  return logo ? `app/assets/img/drivers/${logo}.svg` : undefined;
+  return logo ? `app/assets/img/drivers/${logo}` : undefined;
 };
diff --git a/frontend/src/metabase/databases/utils/schema.ts b/frontend/src/metabase/databases/utils/schema.ts
index 904d34bae2..f31f7d3168 100644
--- a/frontend/src/metabase/databases/utils/schema.ts
+++ b/frontend/src/metabase/databases/utils/schema.ts
@@ -2,7 +2,7 @@ import * as Yup from "yup";
 import type { TestContext } from "yup";
 import * as Errors from "metabase/core/utils/errors";
 import { Engine, EngineField } from "metabase-types/api";
-import { ADVANCED_FIELDS } from "../constants";
+import { ADVANCED_FIELDS, FIELD_OVERRIDES } from "../constants";
 import { DatabaseValues } from "../types";
 
 export const getValidationSchema = (
@@ -10,13 +10,19 @@ export const getValidationSchema = (
   engineKey: string | undefined,
   isAdvanced: boolean,
 ) => {
-  const fields = getFields(engine, isAdvanced);
+  const fields = getFields(engine, isAdvanced).filter(isDetailField);
   const entries = fields.map(field => [field.name, getFieldSchema(field)]);
 
   return Yup.object({
     engine: Yup.string().default(engineKey).required(Errors.required),
-    name: Yup.string().nullable().default(null).required(Errors.required),
+    name: Yup.string().default("").required(Errors.required),
     details: Yup.object(Object.fromEntries(entries)),
+    schedules: Yup.object({
+      metadata_sync: Yup.object(),
+      cache_field_values: Yup.object(),
+    }),
+    auto_run_queries: Yup.boolean().default(true),
+    refingerprint: Yup.boolean().default(false),
   });
 };
 
@@ -58,6 +64,11 @@ const getFieldSchema = (field: EngineField) => {
   }
 };
 
+const isDetailField = (field: EngineField) => {
+  const override = FIELD_OVERRIDES[field.name];
+  return override?.name == null;
+};
+
 const isFieldValid = (
   field: EngineField,
   value: unknown,
diff --git a/frontend/src/metabase/setup/components/DatabaseStep/DatabaseStep.styled.tsx b/frontend/src/metabase/setup/components/DatabaseStep/DatabaseStep.styled.tsx
index 07a6683892..eefe800d36 100644
--- a/frontend/src/metabase/setup/components/DatabaseStep/DatabaseStep.styled.tsx
+++ b/frontend/src/metabase/setup/components/DatabaseStep/DatabaseStep.styled.tsx
@@ -1,31 +1,7 @@
 import styled from "@emotion/styled";
 import { color } from "metabase/lib/colors";
-import Button from "metabase/core/components/Button";
-
-export const StepButton = styled(Button)`
-  color: ${color("brand")};
-  font-weight: normal;
-  padding: 0;
-  border: none;
-  border-radius: 0;
-
-  &:hover {
-    text-decoration: underline;
-    background-color: transparent;
-  }
-`;
-
-export const StepActions = styled.div`
-  margin-top: 1rem;
-`;
 
 export const StepDescription = styled.div`
   margin: 0.875rem 0 2rem;
   color: ${color("text-medium")};
 `;
-
-export const FormActions = styled.div`
-  display: flex;
-  align-items: center;
-  justify-content: flex-end;
-`;
diff --git a/frontend/src/metabase/setup/components/DatabaseStep/DatabaseStep.tsx b/frontend/src/metabase/setup/components/DatabaseStep/DatabaseStep.tsx
index 8bdcdbbe2a..92256b9bb9 100644
--- a/frontend/src/metabase/setup/components/DatabaseStep/DatabaseStep.tsx
+++ b/frontend/src/metabase/setup/components/DatabaseStep/DatabaseStep.tsx
@@ -1,22 +1,13 @@
-import React from "react";
+import React, { useCallback } from "react";
 import { t } from "ttag";
-import _ from "underscore";
 import { updateIn } from "icepick";
-import Button from "metabase/core/components/Button";
-import Databases from "metabase/entities/databases";
-import DatabaseEngineWarning from "metabase/databases/containers/DatabaseEngineWarning";
+import DatabaseForm from "metabase/databases/containers/DatabaseForm";
 import { DatabaseInfo, InviteInfo, UserInfo } from "metabase-types/store";
 import ActiveStep from "../ActiveStep";
 import InactiveStep from "../InvactiveStep";
 import InviteUserForm from "../InviteUserForm";
 import SetupSection from "../SetupSection";
-import {
-  StepActions,
-  StepDescription,
-  StepButton,
-  FormActions,
-} from "./DatabaseStep.styled";
-import { FormProps } from "./types";
+import { StepDescription } from "./DatabaseStep.styled";
 
 export interface DatabaseStepProps {
   user?: UserInfo;
@@ -49,9 +40,20 @@ const DatabaseStep = ({
   onInviteSubmit,
   onStepCancel,
 }: DatabaseStepProps): JSX.Element => {
-  const handleCancel = () => {
+  const handleSubmit = useCallback(
+    async (database: DatabaseInfo) => {
+      try {
+        await onDatabaseSubmit(database);
+      } catch (error) {
+        throw getSubmitError(error);
+      }
+    },
+    [onDatabaseSubmit],
+  );
+
+  const handleCancel = useCallback(() => {
     onStepCancel(engine);
-  };
+  }, [engine, onStepCancel]);
 
   if (!isStepActive) {
     return (
@@ -75,11 +77,10 @@ const DatabaseStep = ({
         <div>{t`Not ready? Skip and play around with our Sample Database.`}</div>
       </StepDescription>
       <DatabaseForm
-        database={database}
-        engine={engine}
-        onSubmit={onDatabaseSubmit}
+        initialValues={database}
+        onSubmit={handleSubmit}
         onEngineChange={onEngineChange}
-        onSkip={handleCancel}
+        onCancel={handleCancel}
       />
       {isEmailConfigured && (
         <SetupSection
@@ -97,80 +98,6 @@ const DatabaseStep = ({
   );
 };
 
-interface DatabaseFormProps {
-  database?: DatabaseInfo;
-  engine?: string;
-  onSubmit: (database: DatabaseInfo) => void;
-  onEngineChange: (engine?: string) => void;
-  onSkip: () => void;
-}
-
-const DatabaseForm = ({
-  database,
-  engine,
-  onSubmit,
-  onEngineChange,
-  onSkip,
-}: DatabaseFormProps): JSX.Element => {
-  const handleSubmit = async (database: DatabaseInfo) => {
-    try {
-      await onSubmit(database);
-    } catch (error) {
-      throw getSubmitError(error);
-    }
-  };
-
-  const handleEngineChange = (value?: string) => {
-    onEngineChange(value);
-  };
-
-  return (
-    <Databases.Form
-      form={Databases.forms.setup}
-      formName="database"
-      database={database}
-      onSubmit={handleSubmit}
-      submitTitle={t`Connect database`}
-      useLegacyForm
-    >
-      {({
-        Form,
-        FormField,
-        FormSubmit,
-        FormMessage,
-        formFields,
-        values,
-        onChangeField,
-        submitTitle,
-      }: FormProps) => (
-        <Form>
-          <FormField name="engine" onChange={handleEngineChange} />
-          <DatabaseEngineWarning
-            engineKey={values.engine}
-            onChange={engine => onChangeField("engine", engine)}
-          />
-          {_.reject(formFields, { name: "engine" }).map(({ name }) => (
-            <FormField key={name} name={name} />
-          ))}
-          {engine ? (
-            <FormActions>
-              <FormMessage noPadding />
-              <Button type="button" onClick={onSkip}>{t`Skip`}</Button>
-              <FormSubmit className="ml2">{submitTitle}</FormSubmit>
-            </FormActions>
-          ) : (
-            <StepActions>
-              <StepButton onClick={onSkip}>
-                {t`I'll add my data later`}
-              </StepButton>
-            </StepActions>
-          )}
-        </Form>
-      )}
-    </Databases.Form>
-  );
-};
-
 const getStepTitle = (
   database: DatabaseInfo | undefined,
   invite: InviteInfo | undefined,
diff --git a/frontend/src/metabase/setup/components/DatabaseStep/DatabaseStep.unit.spec.tsx b/frontend/src/metabase/setup/components/DatabaseStep/DatabaseStep.unit.spec.tsx
index 5ea33a35b9..64720ffeed 100644
--- a/frontend/src/metabase/setup/components/DatabaseStep/DatabaseStep.unit.spec.tsx
+++ b/frontend/src/metabase/setup/components/DatabaseStep/DatabaseStep.unit.spec.tsx
@@ -1,14 +1,11 @@
 import React from "react";
 import { render, screen } from "@testing-library/react";
-import { DatabaseDetails, DatabaseInfo } from "metabase-types/store";
+import { createMockDatabaseInfo } from "metabase-types/store/mocks";
 import DatabaseStep, { DatabaseStepProps } from "./DatabaseStep";
 
 const ComponentMock = () => <div />;
 
-jest.mock("metabase/entities/databases", () => ({
-  forms: { setup: jest.fn() },
-  Form: ComponentMock,
-}));
+jest.mock("metabase/databases/containers/DatabaseForm", () => ComponentMock);
 
 jest.mock(
   "metabase/databases/containers/DatabaseEngineWarning",
@@ -29,7 +26,7 @@ describe("DatabaseStep", () => {
 
   it("should render in completed state", () => {
     const props = getProps({
-      database: getDatabaseInfo({ name: "Test" }),
+      database: createMockDatabaseInfo({ name: "Test" }),
       isStepActive: false,
       isStepCompleted: true,
     });
@@ -63,17 +60,3 @@ const getProps = (opts?: Partial<DatabaseStepProps>): DatabaseStepProps => ({
   onStepCancel: jest.fn(),
   ...opts,
 });
-
-const getDatabaseInfo = (opts?: Partial<DatabaseInfo>): DatabaseInfo => ({
-  name: "Database",
-  engine: "postgres",
-  details: getDatabaseDetails(),
-  ...opts,
-});
-
-const getDatabaseDetails = (
-  opts?: Partial<DatabaseDetails>,
-): DatabaseDetails => ({
-  ssl: false,
-  ...opts,
-});
diff --git a/frontend/src/metabase/setup/components/DatabaseStep/types.ts b/frontend/src/metabase/setup/components/DatabaseStep/types.ts
deleted file mode 100644
index 35ee7b5033..0000000000
--- a/frontend/src/metabase/setup/components/DatabaseStep/types.ts
+++ /dev/null
@@ -1,39 +0,0 @@
-import { ComponentType } from "react";
-
-import { CustomFormMessageProps } from "metabase/components/form/CustomForm/CustomFormMessage";
-import { CustomFormSubmitProps } from "metabase/components/form/CustomForm/CustomFormSubmit";
-import { OptionalFormViewProps } from "metabase/components/form/CustomForm/types";
-
-export interface FormField {
-  name: string;
-}
-
-export interface FormProps {
-  Form: ComponentType;
-  FormField: ComponentType<FormFieldProps>;
-  FormFooter: ComponentType<FormFooterProps>;
-  FormSubmit: React.ComponentType<
-    CustomFormSubmitProps & OptionalFormViewProps
-  >;
-  FormMessage: React.ComponentType<CustomFormMessageProps>;
-  formFields: FormField[];
-  values: FormValues;
-  onChangeField: (field: string, value: unknown) => void;
-  submitTitle: string;
-  error: string;
-}
-
-export interface FormValues {
-  engine?: string;
-}
-
-export interface FormFieldProps {
-  name: string;
-  onChange?: (value?: string) => void;
-}
-
-export interface FormFooterProps {
-  submitTitle?: string;
-  cancelTitle?: string;
-  onCancel?: () => void;
-}
