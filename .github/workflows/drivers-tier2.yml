name: Driver Tests - Tier 2 (Medium)

on:
  workflow_call:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref && github.ref || github.run_id }}-tier2
  cancel-in-progress: true

jobs:
  # Tier 2: Medium drivers (15-35 minutes, cloud services/docker setup)
  be-tests-bigquery-cloud-sdk:
    runs-on: ubuntu-22.04
    timeout-minutes: 35
    env:
      CI: 'true'
      DRIVERS: bigquery-cloud-sdk
      MB_BIGQUERY_TEST_PROJECT_ID: ${{ secrets.BIGQUERY_TEST_PROJECT_ID }}
      MB_BIGQUERY_TEST_CLIENT_ID: ${{ secrets.MB_BIGQUERY_TEST_CLIENT_ID }}
      MB_BIGQUERY_TEST_CLIENT_SECRET: ${{ secrets.MB_BIGQUERY_TEST_CLIENT_SECRET }}
      MB_BIGQUERY_TEST_ACCESS_TOKEN: ${{ secrets.MB_BIGQUERY_TEST_ACCESS_TOKEN }}
      MB_BIGQUERY_TEST_REFRESH_TOKEN: ${{ secrets.MB_BIGQUERY_TEST_REFRESH_TOKEN }}
      MB_BIGQUERY_CLOUD_SDK_TEST_SERVICE_ACCOUNT_JSON: ${{ secrets.MB_BIGQUERY_CLOUD_SDK_TEST_SERVICE_ACCOUNT_JSON }}
      MB_BIGQUERY_CLOUD_SDK_TEST_SERVICE_ACCOUNT_JSON_ROUTING: ${{ secrets.MB_BIGQUERY_CLOUD_SDK_TEST_SERVICE_ACCOUNT_JSON_ROUTING }}
    name: BigQuery
    steps:
    - uses: actions/checkout@v4
    - name: Test BigQuery Cloud SDK driver
      uses: ./.github/actions/test-driver
      with:
        junit-name: 'be-tests-bigquery-cloud-sdk-ee'
        test-args: >-
          :only-tags [:mb/driver-tests]
    - name: Upload Test Results
      uses: ./.github/actions/upload-test-results
      if: always()
      with:
        input-path: ./target/junit/
        output-name: ${{ github.job }}
        bucket: ${{ vars.AWS_S3_TEST_RESULTS_BUCKET }}
        aws-access-key-id: ${{ secrets.AWS_TEST_RESULTS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_TEST_RESULTS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}
        trunk-api-token: ${{ secrets.TRUNK_API_TOKEN }}

  be-tests-snowflake:
    runs-on: ubuntu-22.04
    timeout-minutes: 35
    env:
      CI: 'true'
      DRIVERS: snowflake
      MB_SNOWFLAKE_TEST_USER: METABASE CI
      MB_SNOWFLAKE_TEST_ACCOUNT: ${{ secrets.MB_SNOWFLAKE_TEST_ACCOUNT }}
      MB_SNOWFLAKE_TEST_PASSWORD: ${{ secrets.MB_SNOWFLAKE_TEST_PASSWORD }}
      MB_SNOWFLAKE_TEST_WAREHOUSE: ${{ secrets.MB_SNOWFLAKE_TEST_WAREHOUSE }}
      MB_SNOWFLAKE_TEST_PK_USER: METABASE PK
      MB_SNOWFLAKE_TEST_PK_PRIVATE_KEY: ${{ secrets.MB_SNOWFLAKE_TEST_PK_PRIVATE_KEY }}
      MB_SNOWFLAKE_TEST_PK_PRIVATE_KEY_2: ${{ secrets.MB_SNOWFLAKE_TEST_PK_PRIVATE_KEY_2 }}
      MB_SNOWFLAKE_TEST_PK_PUBLIC_KEY: ${{ secrets.MB_SNOWFLAKE_TEST_PK_PUBLIC_KEY }}
      MB_SNOWFLAKE_TEST_PK_PUBLIC_KEY_2: ${{ secrets.MB_SNOWFLAKE_TEST_PK_PUBLIC_KEY_2 }}
      MB_SNOWFLAKE_TEST_RSA_ROLE_TEST_DEFAULT_USER: RSA_ROLE_TEST_DEFAULT_USER
      MB_SNOWFLAKE_TEST_RSA_ROLE_TEST_CUSTOM_USER: RSA_ROLE_TEST_CUSTOM_USER
      MB_SNOWFLAKE_TEST_RSA_ROLE_TEST_ROLE: RSA_ROLE_TEST_ROLE
      MB_SNOWFLAKE_TEST_RSA_ROLE_TEST_DB: RSA_ROLE_TEST_DB
    name: Snowflake
    steps:
    - uses: actions/checkout@v4
    - name: Test Snowflake driver
      uses: ./.github/actions/test-driver
      with:
        junit-name: 'be-tests-snowflake-ee'
        test-args: >-
          :only-tags [:mb/driver-tests]
    - name: Upload Test Results
      uses: ./.github/actions/upload-test-results
      if: always()
      with:
        input-path: ./target/junit/
        output-name: ${{ github.job }}
        bucket: ${{ vars.AWS_S3_TEST_RESULTS_BUCKET }}
        aws-access-key-id: ${{ secrets.AWS_TEST_RESULTS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_TEST_RESULTS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}
        trunk-api-token: ${{ secrets.TRUNK_API_TOKEN }}

  be-tests-redshift-standard:
    runs-on: ubuntu-22.04
    timeout-minutes: 35
    env:
      CI: 'true'
      DRIVERS: redshift
      MB_REDSHIFT_TEST_USER: metabase_ci
      MB_REDSHIFT_TEST_DB: testdb
      MB_REDSHIFT_TEST_DB_ROUTING: dev
      MB_REDSHIFT_TEST_HOST: ${{ secrets.MB_REDSHIFT_TEST_HOST }}
      MB_REDSHIFT_TEST_PASSWORD: ${{ secrets.MB_REDSHIFT_TEST_PASSWORD }}
    name: Redshift (Standard)
    steps:
    - uses: actions/checkout@v4
    - name: Test Redshift driver (excluding upload tests)
      uses: ./.github/actions/test-driver
      with:
        junit-name: 'be-tests-redshift-ee'
        test-args: >-
          :only-tags [:mb/driver-tests]
          :exclude-tags [:mb/upload-tests]
          :fail-fast? true
    - name: Upload Test Results
      uses: ./.github/actions/upload-test-results
      if: always()
      with:
        input-path: ./target/junit/
        output-name: ${{ github.job }}
        bucket: ${{ vars.AWS_S3_TEST_RESULTS_BUCKET }}
        aws-access-key-id: ${{ secrets.AWS_TEST_RESULTS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_TEST_RESULTS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}
        trunk-api-token: ${{ secrets.TRUNK_API_TOKEN }}

  be-tests-clickhouse:
    runs-on: ubuntu-22.04
    timeout-minutes: 35
    env:
      CI: 'true'
      DRIVERS: clickhouse
      MB_CLICKHOUSE_TEST_HOST: localhost
      MB_CLICKHOUSE_TEST_PORT: 8123
      MB_CLICKHOUSE_TEST_OLD_PORT: 8124
      MB_CLICKHOUSE_TEST_NGINX_PORT: 8127
    name: ClickHouse
    steps:
    - uses: actions/checkout@v4
    - name: Add ClickHouse TLS instance to /etc/hosts
      run: |
        sudo echo "127.0.0.1 server.clickhouseconnect.test" | sudo tee -a /etc/hosts
    - name: Start ClickHouse in Docker
      uses: hoverkraft-tech/compose-action@v2.0.0
      with:
        compose-file: "modules/drivers/clickhouse/docker-compose.yml"
        down-flags: "--volumes"
        services: |
          clickhouse
          clickhouse_tls
          clickhouse_older_version
          clickhouse_cluster_node1
          clickhouse_cluster_node2
          nginx
    - name: Test ClickHouse driver
      uses: ./.github/actions/test-driver
      with:
        junit-name: 'be-tests-clickhouse-ee'
        test-args: >-
          :only-tags [:mb/driver-tests]
    - name: Upload Test Results
      uses: ./.github/actions/upload-test-results
      if: always()
      with:
        input-path: ./target/junit/
        output-name: ${{ github.job }}
        bucket: ${{ vars.AWS_S3_TEST_RESULTS_BUCKET }}
        aws-access-key-id: ${{ secrets.AWS_TEST_RESULTS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_TEST_RESULTS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}
        trunk-api-token: ${{ secrets.TRUNK_API_TOKEN }}

  tier2-results:
    needs:
      - be-tests-bigquery-cloud-sdk
      - be-tests-snowflake
      - be-tests-redshift-standard
      - be-tests-clickhouse
    runs-on: ubuntu-latest
    timeout-minutes: 5
    name: tier2-results
    if: always() && !cancelled()
    steps:
      - name: Check tier 2 status
        uses: actions/github-script@v7
        env:
          needs: ${{ toJson(needs) }}
        with:
          script: | #js
            const needs = JSON.parse(process.env.needs);
            const jobs = Object.entries(needs).map(([jobName, jobValues]) => ({
              name: jobName,
              result: jobValues.result
            }));
            
            if (jobs.every(job => (job.result === 'skipped' || job.result === 'success'))) {
              console.log("✅ Tier 2 (Medium) drivers passed!");
              process.exit(0);
            } else {
              console.log("❌ Tier 2 (Medium) drivers failed:");
              jobs.forEach((job) => {
                if (job.result !== 'success') {
                  console.log(`${job.name} - ${job.result}`);
                }
              });
              process.exit(1);
            }