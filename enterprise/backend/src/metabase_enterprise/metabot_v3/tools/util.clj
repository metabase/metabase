(ns metabase-enterprise.metabot-v3.tools.util
  (:require
   [clojure.string :as str]
   [medley.core :as m]
   [metabase.api.common :as api]
   [metabase.lib.core :as lib]
   [metabase.lib.types.isa :as lib.types.isa]
   [metabase.models.collection :as collection]
   [metabase.models.interface :as mi]
   [metabase.util :as u]
   [toucan2.core :as t2]))

(defn handle-agent-error
  "Return an agent output for agent errors, re-throw `e` otherwise."
  [e]
  (if (-> e ex-data :agent-error?)
    {:output (ex-message e)}
    (throw e)))

(defn convert-field-type
  "Return tool type for `column`."
  [column]
  (let [column (u/normalize-map column)]
    (cond
      (lib.types.isa/boolean? column)               "boolean"
      (lib.types.isa/string-or-string-like? column) "string"
      (lib.types.isa/numeric? column)               "number"
      (lib.types.isa/temporal? column)              "date")))

(defn table-field-id-prefix
  "Return the field ID prefix for `table-id`."
  [table-id]
  (str "t" table-id "/"))

(defn card-field-id-prefix
  "Return the field ID prefix for a model or a metric with ID `card-id`."
  [card-id]
  (str "c" card-id "/"))

(defn query-field-id-prefix
  "Return the field ID prefix for `query-id`."
  [query-id]
  (str "q" query-id "/"))

(defn- find-column-indexes
  [col-to-find cols]
  (keep-indexed (fn [i col]
                  (when (= col (select-keys col-to-find (keys col)))
                    i))
                cols))

(defn ->result-column
  "Return tool result columns for `column` of `query`. The position of `column` is determined by `index-or-columns`
  unless the latter is a sequence of columns, in which case the index of `column` in `index-or-columns` is used.
  The ID is then generated by prefixing the position with `field-id-prefix`."
  [query column index-or-columns field-id-prefix]
  (let [pos (if (sequential? index-or-columns)
              (first (find-column-indexes column index-or-columns))
              index-or-columns)]
    (-> {:field_id (str field-id-prefix pos)
         :name (lib/display-name query -1 column :long)
         :type (convert-field-type column)}
        (m/assoc-some :description (get column :description)))))

(defn resolve-column-index
  "Resolve the reference `field_id` to the index of the result columns in the entity with `field-id-prefix`."
  [field_id field-id-prefix]
  (when-not (str/starts-with? field_id field-id-prefix)
    (throw (ex-info (str "field " field_id " not found") {:agent-error? true
                                                          :expected-prefix field-id-prefix})))
  (-> field_id (subs (count field-id-prefix)) parse-long))

(defn resolve-column
  "Resolve the reference `field_id` in filter `item` by finding the column in `columns` specified by `field_id`.
  `field-id-prefix` is used to check if the filter refers to a column from the right entity."
  [{:keys [field_id] :as item} field-id-prefix columns]
  (let [index (resolve-column-index field_id field-id-prefix)]
    (assoc item :column (nth columns index))))

(defn get-table
  "Get the `fields` of the table with ID `id`."
  [id & fields]
  (when-let [table (t2/select-one (into [:model/Table :id] fields) id)]
    (when (mi/can-read? table)
      table)))

(defn get-card
  "Retrieve the card with `id` from the app DB."
  [id]
  (-> (t2/select-one :model/Card :id id)
      api/read-check
      (t2/hydrate :based_on_upload :creator :can_write :can_run_adhoc_query [:collection :is_personal])
      (api/present-in-trash-if-archived-directly (collection/trash-collection-id))))
