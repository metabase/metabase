name: Frontend

on:
  push:
    branches:
      - 'master'
      - 'release-**'
  pull_request:

jobs:

  fe-linter-prettier:
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v2
    - name: Prepare Node.js
      uses: actions/setup-node@v2
      with:
        node-version: 14.x
        cache: 'yarn'
    - name: Get node_modules cache
      uses: actions/cache@v2
      with:
        path: node_modules
        key: ${{ runner.os }}-node-modules-${{ hashFiles('**/yarn.lock') }}
    - run: yarn install --frozen-lockfile --prefer-offline
    - run: yarn run lint-prettier
      name: Run Prettier formatting linter

  fe-linter-eslint:
    runs-on: ubuntu-20.04
    timeout-minutes: 20
    steps:
    - uses: actions/checkout@v2
    - name: Prepare Node.js
      uses: actions/setup-node@v2
      with:
        node-version: 14.x
        cache: 'yarn'
    - name: Get M2 cache
      uses: actions/cache@v2
      with:
        path: ~/.m2
        key: ${{ runner.os }}-cljs-${{ hashFiles('**/shadow-cljs.edn') }}
    - name: Get node_modules cache
      uses: actions/cache@v2
      with:
        path: node_modules
        key: ${{ runner.os }}-node-modules-${{ hashFiles('**/yarn.lock') }}
    - run: yarn install --frozen-lockfile --prefer-offline
    - run: yarn run lint-eslint
      name: Run ESLint linter

  fe-type-check:
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v2
    - name: Prepare Node.js
      uses: actions/setup-node@v2
      with:
        node-version: 14.x
        cache: 'yarn'
    - name: Get node_modules cache
      uses: actions/cache@v2
      with:
        path: node_modules
        key: ${{ runner.os }}-node-modules-${{ hashFiles('**/yarn.lock') }}
    - run: yarn install --frozen-lockfile --prefer-offline
    - run: yarn type-check
      name: Check types

  fe-tests-unit:
    runs-on: buildjet-2vcpu-ubuntu-2004
    timeout-minutes: 20
    steps:
    - uses: actions/checkout@v2
    - name: Prepare Node.js
      uses: actions/setup-node@v2
      with:
        node-version: 14.x
        cache: 'yarn'
    - name: Get M2 cache
      uses: actions/cache@v2
      with:
        path: ~/.m2
        key: ${{ runner.os }}-cljs-${{ hashFiles('**/shadow-cljs.edn') }}
    - name: Get node_modules cache
      uses: actions/cache@v2
      with:
        path: node_modules
        key: ${{ runner.os }}-node-modules-${{ hashFiles('**/yarn.lock') }}
    - run: yarn install --frozen-lockfile --prefer-offline
    - run: yarn run test-unit --coverage --silent
      name: Run frontend unit tests
    - name: Upload coverage to codecov.io
      uses: codecov/codecov-action@v2
      with:
        files: ./coverage/lcov.info
        flags: front-end

  fe-tests-timezones:
    runs-on: buildjet-2vcpu-ubuntu-2004
    timeout-minutes: 14
    steps:
    - uses: actions/checkout@v2
    - name: Prepare Node.js
      uses: actions/setup-node@v2
      with:
        node-version: 14.x
        cache: 'yarn'
    - name: Get M2 cache
      uses: actions/cache@v2
      with:
        path: ~/.m2
        key: ${{ runner.os }}-cljs-${{ hashFiles('**/shadow-cljs.edn') }}
    - name: Get node_modules cache
      uses: actions/cache@v2
      with:
        path: node_modules
        key: ${{ runner.os }}-node-modules-${{ hashFiles('**/yarn.lock') }}
    - run: yarn install --frozen-lockfile --prefer-offline
    - run: yarn run test-timezones
      name: Run frontend timezones tests

  fe-chromatic:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Prepare Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 14.x
          cache: 'yarn'
      - name: Get node_modules cache
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/yarn.lock') }}
      - run: yarn install --frozen-lockfile --prefer-offline
      - name: Publish to Chromatic
        uses: chromaui/action@v1
        env:
          PUBLISH_CHROMATIC: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}
        if: env.PUBLISH_CHROMATIC != null
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}
