(ns metabase-enterprise.representations.v0.document-test
  (:require
   ;; TODO: determine new tests to replace old singleton import/export
   #_[metabase-enterprise.representations.export :as export]
   #_[metabase-enterprise.representations.import :as import]
   [clojure.test :refer :all]
   [metabase-enterprise.representations.core :as rep]
   [metabase-enterprise.representations.export :as export]
   [metabase-enterprise.representations.import :as import]
   [metabase-enterprise.representations.v0.common :as v0-common]
   [metabase-enterprise.representations.yaml :as rep-yaml]
   [metabase.lib.core :as lib]
   [metabase.lib.metadata :as lib.metadata]
   [metabase.lib.test-metadata :as meta]
   [metabase.test :as mt]
   [metabase.test.fixtures :as fixtures]
   [toucan2.core :as t2]))

(use-fixtures :once (fixtures/initialize :db))

(def singleton-yamls ["test_resources/representations/v0/simple.document.yml"])

(deftest validate-example-yamls
  (testing "Testing valid examples"
    (doseq [filename singleton-yamls]
      (testing (str "Validating: " filename)
        (let [rep (rep-yaml/from-file filename)]
          (is (rep/normalize-representation rep)))))))

(deftest can-import
  (let [filename (first singleton-yamls)
        rep (rep-yaml/from-file filename)
        ref-index {}]
    (is (rep/persist! rep ref-index))))

(deftest import-export-singleton-test
  (testing "Testing import then export roundtrip with IDs"
    (doseq [filename singleton-yamls]
      (testing (str "Importing-Exporting: " filename)
        (let [rep (import/import-yaml filename)
              persisted (rep/persist! rep)]
          (is persisted)
          (let [question (t2/select-one :model/Document :id (:id persisted))
                edn (export/export-entity question)
                yaml (rep-yaml/generate-string edn)
                rep2 (rep-yaml/parse-string yaml)]
            (is (=? (dissoc rep :ref) rep2)
                "Exported representation should match imported (except autogenerated ref)")))))))
