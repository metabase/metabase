/* provide flex utilities in lieu of float based layouts */

:root {
  --gap-1: 0.5rem;
}

:global(.flex),
.flex {
  display: flex;
}

:global(.inline-flex),
.inline-flex {
  display: inline-flex;
}

:global(.flex-auto),
.flex-auto {
  flex: auto;
}

:global(.flex-full),
.flex-full {
  flex: 1 0 auto;
}

:global(.flex-half),
.flex-half {
  flex: 0.5;
}

:global(.flex-3-quarters),
.flex-3-quarters {
  flex: 0.75;
}

:global(.flex-1-quarter),
.flex-1-quarter {
  flex: 0.25;
}

:global(.flex-no-shrink),
.flex-no-shrink {
  flex-shrink: 0;
}

/* The behavior of how `flex: <flex-grow>` sets flex-basis is inconsistent across
 * browsers. Specifically:
 * - On Chrome and FF it's set to `flex-basis: 0%`. That behaves equally as `height: 0%`.
 *   It means that if the containing block has no explicit height, then `height: 0%` is computed as `height: auto`,
 *   and element grows as its content grows. That is the most common scenario in Metabase codebase.
 * - On older IEs it's set to `flex-basis: 0` which means that the initial main size of flex item is zero.
 *   It is also notable that `flex-basis: 0%` doesn't work correctly on IE.
 *
 *  As a solution, `flex-basis-auto` should always be used in conjunction with `flex-full` when it is
 *  a desired behavior that the element grows with its contents.
*/
:global(.flex-basis-auto) {
  flex-basis: auto;
}

:global(.flex-basis-none) {
  flex-basis: 0;
}

:global(.shrink-below-content-size) {
  /* W3C spec says:
     * By default, flex items wonâ€™t shrink below their minimum content size (the length of the longest word or
     * fixed-size element). To change this, set the min-width or min-height property.
     */
  min-width: 0;
  min-height: 0;
}

:global(.align-center),
.align-center {
  align-items: center;
}

:global(.align-baseline),
.align-baseline {
  align-items: baseline;
}

:global(.justify-center),
.justify-center {
  justify-content: center;
}

:global(.justify-evenly) {
  justify-content: space-evenly;
}

:global(.justify-between) {
  justify-content: space-between;
}

:global(.justify-end) {
  justify-content: flex-end;
}

:global(.align-start) {
  align-items: flex-start;
}

:global(.align-end) {
  align-items: flex-end;
}

:global(.align-stretch) {
  align-items: stretch;
}

:global(.align-self-end),
.align-self-end {
  align-self: flex-end;
}

:global(.align-self-start),
.align-self-start {
  align-self: flex-start;
}

:global(.align-self-center) {
  align-self: center;
}

:global(.align-self-stretch) {
  align-self: stretch;
}

:global(.flex-align-right),
.flex-align-right {
  margin-left: auto;
}

@media screen and (--breakpoint-min-sm) {
  :global(.sm-flex-align-right) {
    margin-left: auto;
  }
}

@media screen and (--breakpoint-min-md) {
  :global(.md-flex-align-right) {
    margin-left: auto;
  }
}

@media screen and (--breakpoint-min-lg) {
  :global(.lg-flex-align-right) {
    margin-left: auto;
  }
}

:global(.layout-centered),
.layout-centered {
  align-items: center;
  justify-content: center;
}

@media screen and (--breakpoint-min-sm) {
  :global(.sm-layout-centered) {
    align-items: center;
    justify-content: center;
  }
}

@media screen and (--breakpoint-min-md) {
  :global(.md-layout-centered) {
    align-items: center;
    justify-content: center;
  }
}

@media screen and (--breakpoint-min-lg) {
  :global(.lg-layout-centered) {
    align-items: center;
    justify-content: center;
  }
}

:global(.flex-column) {
  flex-direction: column;
}

:global(.flex-column-reverse) {
  flex-direction: column-reverse;
}

@media screen and (--breakpoint-min-sm) {
  :global(.sm-flex-column) {
    flex-direction: column;
  }
}

@media screen and (--breakpoint-min-md) {
  :global(.md-flex-column) {
    flex-direction: column;
  }
}

:global(.flex-row),
.flex-row {
  flex-direction: row;
}

@media screen and (--breakpoint-min-sm) {
  :global(.sm-flex-row) {
    flex-direction: row;
  }
}

:global(.flex-wrap) {
  flex-wrap: wrap;
}

:global(.flex-reverse) {
  flex-direction: row-reverse;
}

@media screen and (--breakpoint-min-sm) {
  :global(.sm-flex-reverse) {
    flex-direction: row-reverse;
  }
}

@media screen and (--breakpoint-min-md) {
  :global(.md-flex-reverse) {
    flex-direction: row-reverse;
  }
}

@media screen and (--breakpoint-min-lg) {
  :global(.lg-flex-reverse) {
    flex-direction: row-reverse;
  }
}

@media screen and (--breakpoint-min-xl) {
  :global(.xl-flex-reverse) {
    flex-direction: row-reverse;
  }
}

:global(.no-flex) {
  flex: 0 1 0%;
}

@media screen and (--breakpoint-min-md) {
  :global(.md-no-flex) {
    flex: 0 !important;
  }
}

/* Contents of elements inside flex items might not be wrapped correctly on IE11,
   set max-width manually to enforce wrapping
*/
:global(.ie-wrap-content-fix) {
  max-width: 100%;
}

:global(.row-gap-1),
.row-gap-1 {
  row-gap: var(--gap-1);
}
