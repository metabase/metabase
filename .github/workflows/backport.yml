# Cherry-picks commits from current branch to a specified one in a command "@metabase-bot backport release-x.40.x"
name: Backport

on:
  issue_comment:
    types: [created]

jobs:
  create_pull_request:
    name: Creates a pull request
    if: contains(github.event.comment.body, '@metabase-bot backport')
    runs-on: ubuntu-20.04
    steps:
      - id: is_organization_member
        uses: JamesSingleton/is-organization-member@1.0.0
        with:
          organization: metabase
          username: ${{ github.event.issue.user.login }}
          token: ${{ secrets.GITHUB_TOKEN }}
      - run: |
          result=${{ steps.is_organization_member.outputs.result }}
          if [ $result == false ]; then
              echo User ${{ github.event.comment.user.login }} is not a member of Metabase organization
              exit 1
          fi
      - uses: tibdex/github-app-token@v1
        id: generate-token
        with:
          app_id: ${{ secrets.METABASE_BOT_APP_ID }}
          private_key: ${{ secrets.METABASE_BOT_APP_PRIVATE_KEY }}
      - uses: actions/github-script@v4
        id: branch_info
        with:
          script: |
            // Example: @metabase-bot backport release-x.40.x
            const [_botName, _command, targetBranch] = context.payload.comment.body.split(" ");
            console.log(`Target branch is ${targetBranch}`);

            const { data: originalPullRequest } = await github.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.issue.number,
            });

            const { data: commits } = await github.pulls.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.issue.number,
            });

            const targetRef = await github.git.getRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `heads/${targetBranch}`,
            });

            const backportBranch = `backport-${originalPullRequest.head.ref}`

            try {
              await github.git.getRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `heads/${backportBranch}`,
              });
            } catch(e) {
              if (e.status === 404) {
                await github.git.createRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `refs/heads/${backportBranch}`,
                  sha: targetRef.data.object.sha,
                });
              }
            }

            return {
              backportBranch,
              targetBranch,
              originalPullRequest,
              startSha: commits[0].sha,
              endSha: commits[commits.length - 1].sha
            }
      - uses: actions/checkout@v3
        name: Cherry-pick commits and create PR
        with:
          fetch-depth: 0
      - run: |
          git config --global user.email "metabase-bot@metabase.com"
          git config --global user.name "Metabase bot"

          git fetch --all

          git checkout "${BACKPORT_BRANCH}"
          git reset --hard origin/${TARGET_BRANCH}

          if [[ -z $(git ls-remote --heads origin ${ORIGINAL_HEAD_REF}) ]]; then
            echo "PR has been merged, searching for a squashed commit in the base branch"
            echo "searching for a commit in a ${ORIGINAL_BASE_REF} that contains pull request number ${ORIGINAL_PULL_REQUEST_NUMBER}"
            SQUASHED_COMMIT=$(env -i git log ${ORIGINAL_BASE_REF} --grep="(#${ORIGINAL_PULL_REQUEST_NUMBER})" --format="%H")
            echo "found commit ${SQUASHED_COMMIT}"
            git cherry-pick ${SQUASHED_COMMIT}
          else
            echo "PR has not been merged, copying all commits"
            git cherry-pick ${ORIGINAL_BASE_SHA}..${ORIGINAL_HEAD_SHA}
          fi

          git push origin "${BACKPORT_BRANCH}" --force-with-lease

          if [[ $(hub pr list -b "${TARGET_BRANCH}" -h "${BACKPORT_BRANCH}" -s "open") ]]; then
              echo "PR already exists"
          else
              hub pull-request -b "${TARGET_BRANCH}" -h "${BACKPORT_BRANCH}" -l "auto-backported" -a "${GITHUB_ACTOR}" -F- <<<"ðŸ¤– backported \"${ORIGINAL_TITLE}\"

              #${ORIGINAL_PULL_REQUEST_NUMBER}"
              echo "New PR has been created"
          fi
        env:
          ORIGINAL_TITLE: ${{ fromJson(steps.branch_info.outputs.result).originalPullRequest.title }}
          ORIGINAL_BASE_REF: ${{ fromJson(steps.branch_info.outputs.result).originalPullRequest.base.ref }}
          ORIGINAL_BASE_SHA: ${{ fromJson(steps.branch_info.outputs.result).originalPullRequest.base.sha }}
          ORIGINAL_HEAD_REF: ${{ fromJson(steps.branch_info.outputs.result).originalPullRequest.head.ref }}
          ORIGINAL_HEAD_SHA: ${{ fromJson(steps.branch_info.outputs.result).originalPullRequest.head.sha }}
          ORIGINAL_PULL_REQUEST_NUMBER: ${{ fromJson(steps.branch_info.outputs.result).originalPullRequest.number }}
          TARGET_BRANCH: ${{ fromJson(steps.branch_info.outputs.result).targetBranch }}
          BACKPORT_BRANCH: ${{ fromJson(steps.branch_info.outputs.result).backportBranch }}
          START_SHA: ${{ fromJson(steps.branch_info.outputs.result).startSha }}
          END_SHA: ${{ fromJson(steps.branch_info.outputs.result).endSha }}
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}

  notify_when_failed:
    runs-on: ubuntu-20.04
    name: Notify about failure
    needs: create_pull_request
    if: ${{ failure() }}
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/notify-pull-request
        with:
          include-log: true
          message: something went wrong while creating a backport
