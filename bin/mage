#!/usr/bin/env bash

set -euo pipefail

# Debug function to see file content
debug_file_content() {
  if [ -n "${MAGE_DEBUG:-}" ]; then
    local file="$1"
    echo "Content of $file:" >&2
    cat "$file" >&2
    echo "" >&2
  fi
}

# Get Babashka version from bb.edn
get_bb_version() {
  local edn_file="${BB_EDN_PATH:-"../bb.edn"}"
  local default_version="1.3.186"  # Fallback version

  if [ ! -f "$edn_file" ]; then
    log_warning "bb.edn not found at ${edn_file}, using default version: ${default_version}"
    echo "$default_version"
    return
  fi

  # Debug: print file content when in debug mode
  # debug_file_content "$edn_file"

  # Simple approach for the specific format :min-bb-version "x.y.z"
  bb_version=$(grep -o ':min-bb-version "[0-9]\+\.[0-9]\+\.[0-9]\+"' "$edn_file" | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+')

  # Fallback to just finding version numbers if the format doesn't match
  if [ -z "$bb_version" ]; then
    bb_version=$(grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+' "$edn_file" | head -n 1)
  fi

  if [ -z "$bb_version" ]; then
    log_warning "Could not parse min-bb-version from bb.edn, using default: ${default_version}"
    echo "$default_version"
  else
    log_info "Found Babashka version ${bb_version} in bb.edn"
    echo "$bb_version"
  fi
}
BB_BIN_DIR="${HOME}/.local/bin"
BB_EXEC="${BB_BIN_DIR}/bb"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions - only log if MAGE_DEBUG is set
log_info() {
  if [ -n "${MAGE_DEBUG:-}" ]; then
    echo -e "${BLUE}[INFO]${NC} $*" >&2
  fi
}

log_success() {
  if [ -n "${MAGE_DEBUG:-}" ]; then
    echo -e "${GREEN}[SUCCESS]${NC} $*" >&2
  fi
}

log_warning() {
  if [ -n "${MAGE_DEBUG:-}" ]; then
    echo -e "${YELLOW}[WARNING]${NC} $*" >&2
  fi
}

log_error() {
  # Always log errors regardless of debug setting
  echo -e "${RED}[ERROR]${NC} $*" >&2
}

# Detect OS and architecture
detect_platform() {
  local os arch

  case "$(uname -s)" in
    Linux*)  os="linux" ;;
    Darwin*) os="macos" ;;
    *) log_error "Unsupported OS: $(uname -s)"; exit 1 ;;
  esac

  case "$(uname -m)" in
    x86_64|amd64) arch="amd64" ;;
    arm64|aarch64) arch="aarch64" ;;
    *) log_error "Unsupported architecture: $(uname -m)"; exit 1 ;;
  esac

  echo "${os}-${arch}"
}

# Download babashka if not found
install_babashka() {
  local platform tmp_dir download_url bb_version

  # Get required Babashka version
  bb_version=$(get_bb_version)

  log_info "Babashka not found. Installing version ${bb_version}..."

  platform=$(detect_platform)
  tmp_dir=$(mktemp -d)

  download_url="https://github.com/babashka/babashka/releases/download/v${bb_version}/babashka-${bb_version}-${platform}.tar.gz"

  # Create bin directory if it doesn't exist
  mkdir -p "$BB_BIN_DIR"

  log_info "Downloading from ${download_url}..."
  curl -sL "$download_url" | tar xz -C "$tmp_dir"
  mv "${tmp_dir}/bb" "$BB_EXEC"
  chmod +x "$BB_EXEC"

  rm -rf "$tmp_dir"
  log_success "Babashka ${bb_version} installed at ${BB_EXEC}"
}

# Check if babashka is available
check_babashka() {
  local bb_version
  bb_version=$(get_bb_version)

  if command -v bb >/dev/null 2>&1; then
    # Check if installed version meets minimum requirements
    local installed_version
    installed_version=$(bb --version | head -n 1 | awk '{print $2}')

    # Simple version comparison - can be enhanced for more complex comparisons
    if [[ "$installed_version" < "$bb_version" ]]; then
      log_warning "Installed Babashka version ${installed_version} is older than required ${bb_version}"
      return 1
    fi

    BB_EXEC="bb"
    log_info "Using system-installed Babashka ${installed_version}"
    return 0
  elif [ -x "$BB_EXEC" ]; then
    # TODO: Add version check for pre-installed version as well
    log_info "Using previously installed Babashka at ${BB_EXEC}"
    return 0
  else
    return 1
  fi
}

# Add directory to PATH if not already there
ensure_path() {
  if [[ ":$PATH:" != *":$BB_BIN_DIR:"* ]]; then
    export PATH="$BB_BIN_DIR:$PATH"
    log_info "Added ${BB_BIN_DIR} to PATH for this session"

    # Suggest adding to path permanently
    log_warning "To add Babashka to your PATH permanently, add this line to your profile:"
    log_warning "export PATH=\"${BB_BIN_DIR}:\$PATH\""
  fi
}

# Main execution
main() {
  # Find the real location of this script for relative paths
  SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

  # When checking babashka version, we need to look relative to this script
  export BB_EDN_PATH="${SCRIPT_DIR}/../bb.edn"

  # First, ensure babashka is installed
  if ! check_babashka; then
    install_babashka
    ensure_path
  fi

  # Construct the path to ./bin/mage_core (sibling file to this script)
  MAGE_CORE_PATH="${SCRIPT_DIR}/mage_core"

  # Ensure mage_core exists and is executable
  if [ ! -x "$MAGE_CORE_PATH" ]; then
    log_error "mage_core executable not found or not executable: $MAGE_CORE_PATH"
    exit 1
  fi

  # Export BB_EXEC so mage_core can find babashka
  export BB_EXEC

  # Execute mage_core with all arguments
  log_info "Running mage_core with args: $*"
  exec "$MAGE_CORE_PATH" "$@"
}

# Run the main function with all arguments
main "$@"
