commit a8503b790a2feb45ad0d01fec82eea94b24d8943
Author: Alexander Polyankin <alexander.polyankin@metabase.com>
Date:   Mon Nov 7 20:58:53 2022 +0200

    Migrate timeline forms to formik (#26247)

diff --git a/frontend/src/metabase-types/api/mocks/timeline.ts b/frontend/src/metabase-types/api/mocks/timeline.ts
index b0ed0639bb..6c572d8fa8 100644
--- a/frontend/src/metabase-types/api/mocks/timeline.ts
+++ b/frontend/src/metabase-types/api/mocks/timeline.ts
@@ -1,11 +1,23 @@
-import { TimelineEvent, Timeline } from "../timeline";
+import { TimelineEvent, Timeline, TimelineData } from "../timeline";
 import { createMockUser } from "./user";
 
 export const createMockTimeline = (opts?: Partial<Timeline>): Timeline => ({
   id: 1,
   collection_id: 1,
   name: "Events",
-  description: "A timeline of events",
+  description: null,
+  icon: "star",
+  default: false,
+  archived: false,
+  ...opts,
+});
+
+export const createMockTimelineData = (
+  opts?: Partial<TimelineData>,
+): TimelineData => ({
+  collection_id: 1,
+  name: "Events",
+  description: null,
   icon: "star",
   default: false,
   archived: false,
diff --git a/frontend/src/metabase-types/api/timeline.ts b/frontend/src/metabase-types/api/timeline.ts
index c2db3554b0..f8bf8072d2 100644
--- a/frontend/src/metabase-types/api/timeline.ts
+++ b/frontend/src/metabase-types/api/timeline.ts
@@ -1,9 +1,14 @@
-import { Collection } from "./collection";
+import { CardId } from "./card";
+import { Collection, RegularCollectionId } from "./collection";
 import { User } from "./user";
 
+export type TimelineId = number;
+export type TimelineEventId = number;
+export type TimelineEventSource = "question" | "collections" | "api";
+
 export interface Timeline {
-  id: number;
-  collection_id: number | null;
+  id: TimelineId;
+  collection_id: RegularCollectionId | null;
   name: string;
   description: string | null;
   icon: string;
@@ -13,9 +18,19 @@ export interface Timeline {
   events?: TimelineEvent[];
 }
 
+export interface TimelineData {
+  id?: number;
+  collection_id: RegularCollectionId | null;
+  name: string;
+  description: string | null;
+  icon: string;
+  default: boolean;
+  archived: boolean;
+}
+
 export interface TimelineEvent {
   id: number;
-  timeline_id: number;
+  timeline_id: TimelineId;
   name: string;
   description: string | null;
   icon: string;
@@ -27,4 +42,16 @@ export interface TimelineEvent {
   created_at: string;
 }
 
-export type TimelineEventSource = "question" | "collections" | "api";
+export interface TimelineEventData {
+  id?: number;
+  timeline_id?: TimelineId;
+  name: string;
+  description: string | null;
+  icon: string;
+  timestamp?: string;
+  timezone: string;
+  time_matters: boolean;
+  archived: boolean;
+  source?: TimelineEventSource;
+  question_id?: CardId;
+}
diff --git a/frontend/src/metabase/components/form/FormWidget.jsx b/frontend/src/metabase/components/form/FormWidget.jsx
index 400837ee79..ff907d82c2 100644
--- a/frontend/src/metabase/components/form/FormWidget.jsx
+++ b/frontend/src/metabase/components/form/FormWidget.jsx
@@ -5,7 +5,6 @@ import { PLUGIN_FORM_WIDGETS } from "metabase/plugins";
 
 import FormInfoWidget from "./widgets/FormInfoWidget";
 import FormInputWidget from "./widgets/FormInputWidget";
-import FormDateWidget from "./widgets/FormDateWidget";
 import FormEmailWidget from "./widgets/FormEmailWidget";
 import FormTextAreaWidget from "./widgets/FormTextAreaWidget";
 import FormPasswordWidget from "./widgets/FormPasswordWidget";
@@ -25,7 +24,6 @@ import FormModelWidget from "./widgets/FormModelWidget";
 const WIDGETS = {
   info: FormInfoWidget,
   input: FormInputWidget,
-  date: FormDateWidget,
   email: FormEmailWidget,
   text: FormTextAreaWidget,
   checkbox: FormCheckBoxWidget,
diff --git a/frontend/src/metabase/components/form/widgets/FormDateWidget/FormDateWidget.tsx b/frontend/src/metabase/components/form/widgets/FormDateWidget/FormDateWidget.tsx
deleted file mode 100644
index 71c26c712e..0000000000
--- a/frontend/src/metabase/components/form/widgets/FormDateWidget/FormDateWidget.tsx
+++ /dev/null
@@ -1,85 +0,0 @@
-import React, { forwardRef, Ref, useCallback, useMemo } from "react";
-import { Moment } from "moment-timezone";
-import {
-  getNumericDateStyleFromSettings,
-  getTimeStyleFromSettings,
-  has24HourModeSetting,
-  parseTimestamp,
-} from "metabase/lib/time";
-import DateWidget from "metabase/core/components/DateWidget";
-import { FormField } from "./types";
-
-export interface FormDateWidgetProps {
-  field: FormField;
-  placeholder?: string;
-  values: Record<string, unknown>;
-  readOnly?: boolean;
-  autoFocus?: boolean;
-  tabIndex?: number;
-  hasTimeField?: string;
-  onChangeField?: (field: string, value: unknown) => void;
-}
-
-const FormDateWidget = forwardRef(function FormDateWidget(
-  {
-    field,
-    placeholder,
-    values,
-    readOnly,
-    autoFocus,
-    tabIndex,
-    hasTimeField = "",
-    onChangeField,
-  }: FormDateWidgetProps,
-  ref: Ref<HTMLDivElement>,
-) {
-  const value = useMemo(() => {
-    return field.value ? parseTimestamp(field.value) : undefined;
-  }, [field]);
-
-  const handleFocus = useCallback(() => {
-    field.onFocus?.(field.value);
-  }, [field]);
-
-  const handleBlur = useCallback(() => {
-    field.onBlur?.(field.value);
-  }, [field]);
-
-  const handleChange = useCallback(
-    (newValue?: Moment) => {
-      field.onChange?.(newValue?.format());
-    },
-    [field],
-  );
-
-  const handleHasTimeChange = useCallback(
-    (hasTime: boolean) => {
-      onChangeField?.(hasTimeField, hasTime);
-    },
-    [hasTimeField, onChangeField],
-  );
-
-  return (
-    <DateWidget
-      ref={ref}
-      value={value}
-      placeholder={placeholder}
-      hasTime={Boolean(values[hasTimeField])}
-      dateFormat={getNumericDateStyleFromSettings()}
-      timeFormat={getTimeStyleFromSettings()}
-      is24HourMode={has24HourModeSetting()}
-      readOnly={readOnly}
-      autoFocus={autoFocus}
-      error={field.visited && !field.active && field.error != null}
-      fullWidth
-      tabIndex={tabIndex}
-      aria-labelledby={`${field.name}-label`}
-      onFocus={handleFocus}
-      onBlur={handleBlur}
-      onChange={handleChange}
-      onHasTimeChange={handleHasTimeChange}
-    />
-  );
-});
-
-export default FormDateWidget;
diff --git a/frontend/src/metabase/components/form/widgets/FormDateWidget/index.ts b/frontend/src/metabase/components/form/widgets/FormDateWidget/index.ts
deleted file mode 100644
index df00532170..0000000000
--- a/frontend/src/metabase/components/form/widgets/FormDateWidget/index.ts
+++ /dev/null
@@ -1 +0,0 @@
-export { default } from "./FormDateWidget";
diff --git a/frontend/src/metabase/components/form/widgets/FormDateWidget/types.ts b/frontend/src/metabase/components/form/widgets/FormDateWidget/types.ts
deleted file mode 100644
index 26db3ee8ea..0000000000
--- a/frontend/src/metabase/components/form/widgets/FormDateWidget/types.ts
+++ /dev/null
@@ -1,10 +0,0 @@
-export interface FormField {
-  name: string;
-  value?: string;
-  visited?: boolean;
-  active?: boolean;
-  error?: string;
-  onChange?: (value?: string) => void;
-  onFocus?: (value?: string) => void;
-  onBlur?: (value?: string) => void;
-}
diff --git a/frontend/src/metabase/core/components/DateWidget/DateWidget.tsx b/frontend/src/metabase/core/components/DateWidget/DateWidget.tsx
index ce9f2b4b2b..54e5422c33 100644
--- a/frontend/src/metabase/core/components/DateWidget/DateWidget.tsx
+++ b/frontend/src/metabase/core/components/DateWidget/DateWidget.tsx
@@ -66,7 +66,7 @@ const DateWidget = forwardRef(function DateWidget(
           onSubmit={handleClose}
         />
       }
-      onHide={handleClose}
+      onClickOutside={handleClose}
     >
       <DateInput
         {...props}
diff --git a/frontend/src/metabase/core/components/DateWidget/index.ts b/frontend/src/metabase/core/components/DateWidget/index.ts
index 2dccd757c9..e41047d933 100644
--- a/frontend/src/metabase/core/components/DateWidget/index.ts
+++ b/frontend/src/metabase/core/components/DateWidget/index.ts
@@ -1 +1,2 @@
 export { default } from "./DateWidget";
+export type { DateWidgetProps } from "./DateWidget";
diff --git a/frontend/src/metabase/core/components/FormCheckBox/FormCheckBox.tsx b/frontend/src/metabase/core/components/FormCheckBox/FormCheckBox.tsx
index 5f5715ed88..333e8ffd94 100644
--- a/frontend/src/metabase/core/components/FormCheckBox/FormCheckBox.tsx
+++ b/frontend/src/metabase/core/components/FormCheckBox/FormCheckBox.tsx
@@ -16,7 +16,7 @@ const FormCheckBox = forwardRef(function FormCheckBox(
   ref: Ref<HTMLDivElement>,
 ) {
   const id = useUniqueId();
-  const [field, meta] = useField(name);
+  const [{ value, onChange, onBlur }, { error, touched }] = useField(name);
 
   return (
     <FormField
@@ -28,15 +28,15 @@ const FormCheckBox = forwardRef(function FormCheckBox(
       alignment="start"
       orientation="horizontal"
       htmlFor={id}
-      error={meta.touched ? meta.error : undefined}
+      error={touched ? error : undefined}
     >
       <CheckBox
         {...props}
         id={id}
         name={name}
-        checked={field.value}
-        onChange={field.onChange}
-        onBlur={field.onBlur}
+        checked={value}
+        onChange={onChange}
+        onBlur={onBlur}
       />
     </FormField>
   );
diff --git a/frontend/src/metabase/core/components/FormDateInput/FormDateInput.tsx b/frontend/src/metabase/core/components/FormDateInput/FormDateInput.tsx
new file mode 100644
index 0000000000..fbe8c8675f
--- /dev/null
+++ b/frontend/src/metabase/core/components/FormDateInput/FormDateInput.tsx
@@ -0,0 +1,58 @@
+import React, { forwardRef, ReactNode, Ref, useCallback, useMemo } from "react";
+import moment, { Moment } from "moment-timezone";
+import { useField } from "formik";
+import { useUniqueId } from "metabase/hooks/use-unique-id";
+import DateWidget, {
+  DateWidgetProps,
+} from "metabase/core/components/DateWidget";
+import FormField from "metabase/core/components/FormField";
+
+export interface FormDateInputProps
+  extends Omit<DateWidgetProps, "value" | "error" | "onChange" | "onBlur"> {
+  name: string;
+  title?: string;
+  description?: ReactNode;
+}
+
+const FormDateInput = forwardRef(function FormDateInput(
+  { name, className, style, title, description, ...props }: FormDateInputProps,
+  ref: Ref<HTMLDivElement>,
+) {
+  const id = useUniqueId();
+  const [{ value, onBlur }, { error, touched }, { setValue }] = useField(name);
+
+  const date = useMemo(() => {
+    return value ? moment.parseZone(value) : undefined;
+  }, [value]);
+
+  const handleChange = useCallback(
+    (date?: Moment) => {
+      setValue(date?.toISOString(true));
+    },
+    [setValue],
+  );
+
+  return (
+    <FormField
+      ref={ref}
+      className={className}
+      style={style}
+      title={title}
+      description={description}
+      htmlFor={id}
+      error={touched ? error : undefined}
+    >
+      <DateWidget
+        {...props}
+        id={id}
+        name={name}
+        value={date}
+        error={touched && error != null}
+        onChange={handleChange}
+        onBlur={onBlur}
+      />
+    </FormField>
+  );
+});
+
+export default FormDateInput;
diff --git a/frontend/src/metabase/core/components/FormDateInput/FormDateInput.unit.spec.tsx b/frontend/src/metabase/core/components/FormDateInput/FormDateInput.unit.spec.tsx
new file mode 100644
index 0000000000..362236097f
--- /dev/null
+++ b/frontend/src/metabase/core/components/FormDateInput/FormDateInput.unit.spec.tsx
@@ -0,0 +1,74 @@
+import React from "react";
+import { Form, Formik } from "formik";
+import * as Yup from "yup";
+import { render, screen, waitFor } from "@testing-library/react";
+import userEvent from "@testing-library/user-event";
+import FormDateInput from "./FormDateInput";
+
+const TestSchema = Yup.object().shape({
+  value: Yup.string().required("error"),
+});
+
+interface TestFormDateInputProps {
+  initialValue?: string;
+  onSubmit: () => void;
+}
+
+const TestFormDateInput = ({
+  initialValue,
+  onSubmit,
+}: TestFormDateInputProps) => {
+  return (
+    <Formik
+      initialValues={{ value: initialValue }}
+      validationSchema={TestSchema}
+      onSubmit={onSubmit}
+    >
+      <Form>
+        <FormDateInput name="value" title="Date" />
+        <button type="submit">Submit</button>
+      </Form>
+    </Formik>
+  );
+};
+
+describe("FormDateInput", () => {
+  it("should use the initial value from the form", () => {
+    const onSubmit = jest.fn();
+
+    render(<TestFormDateInput initialValue="2022-10-20" onSubmit={onSubmit} />);
+
+    expect(screen.getByRole("textbox")).toHaveValue("10/20/2022");
+  });
+
+  it("should propagate the changed value to the form", async () => {
+    const onSubmit = jest.fn();
+
+    render(<TestFormDateInput onSubmit={onSubmit} />);
+    userEvent.type(screen.getByRole("textbox"), "10/20/22");
+    userEvent.click(screen.getByText("Submit"));
+
+    await waitFor(() => {
+      const value = expect.stringMatching(/2022-10-20T00:00:00.000/);
+      expect(onSubmit).toHaveBeenCalledWith({ value }, expect.anything());
+    });
+  });
+
+  it("should be referenced by the label", () => {
+    const onSubmit = jest.fn();
+
+    render(<TestFormDateInput onSubmit={onSubmit} />);
+
+    expect(screen.getByLabelText("Date")).toBeInTheDocument();
+  });
+
+  it("should be validated on blur", async () => {
+    const onSubmit = jest.fn();
+
+    render(<TestFormDateInput onSubmit={onSubmit} />);
+    userEvent.clear(screen.getByRole("textbox"));
+    userEvent.tab();
+
+    expect(await screen.findByText(": error")).toBeInTheDocument();
+  });
+});
diff --git a/frontend/src/metabase/core/components/FormDateInput/index.ts b/frontend/src/metabase/core/components/FormDateInput/index.ts
new file mode 100644
index 0000000000..58ce400611
--- /dev/null
+++ b/frontend/src/metabase/core/components/FormDateInput/index.ts
@@ -0,0 +1,2 @@
+export { default } from "./FormDateInput";
+export type { FormDateInputProps } from "./FormDateInput";
diff --git a/frontend/src/metabase/core/components/FormField/FormField.styled.tsx b/frontend/src/metabase/core/components/FormField/FormField.styled.tsx
index be942547e3..59427ab223 100644
--- a/frontend/src/metabase/core/components/FormField/FormField.styled.tsx
+++ b/frontend/src/metabase/core/components/FormField/FormField.styled.tsx
@@ -1,5 +1,6 @@
 import styled from "@emotion/styled";
 import { color } from "metabase/lib/colors";
+import Icon from "metabase/components/Icon";
 import { FieldAlignment, FieldOrientation } from "./types";
 
 export const FieldLabelError = styled.span`
@@ -31,8 +32,6 @@ export interface FormCaptionProps {
 }
 
 export const FieldCaption = styled.div<FormCaptionProps>`
-  display: flex;
-  align-items: center;
   margin-left: ${props =>
     props.orientation === "horizontal" &&
     props.alignment === "start" &&
@@ -41,7 +40,6 @@ export const FieldCaption = styled.div<FormCaptionProps>`
     props.orientation === "horizontal" &&
     props.alignment === "end" &&
     "0.5rem"};
-  margin-bottom: 0.5rem;
 `;
 
 export const FieldLabel = styled.label`
@@ -50,6 +48,30 @@ export const FieldLabel = styled.label`
   font-weight: 900;
 `;
 
+export const FieldLabelContainer = styled.div`
+  display: flex;
+  align-items: center;
+  margin-bottom: 0.5em;
+`;
+
 export const FieldDescription = styled.div`
   margin-bottom: 0.5rem;
 `;
+
+export const FieldInfoIcon = styled(Icon)`
+  color: ${color("bg-dark")};
+  margin-left: 0.5rem;
+  width: 0.75rem;
+  height: 0.75rem;
+
+  &:hover {
+    color: ${() => color("brand")};
+  }
+`;
+
+export const FieldInfoLabel = styled.div`
+  color: ${color("text-medium")};
+  font-size: 0.75rem;
+  margin-left: auto;
+  cursor: default;
+`;
diff --git a/frontend/src/metabase/core/components/FormField/FormField.tsx b/frontend/src/metabase/core/components/FormField/FormField.tsx
index fd720f4688..9e45d57a91 100644
--- a/frontend/src/metabase/core/components/FormField/FormField.tsx
+++ b/frontend/src/metabase/core/components/FormField/FormField.tsx
@@ -1,9 +1,13 @@
 import React, { forwardRef, HTMLAttributes, ReactNode, Ref } from "react";
+import Tooltip from "metabase/components/Tooltip";
 import { FieldAlignment, FieldOrientation } from "./types";
 import {
   FieldCaption,
   FieldDescription,
+  FieldInfoIcon,
+  FieldInfoLabel,
   FieldLabel,
+  FieldLabelContainer,
   FieldLabelError,
   FieldRoot,
 } from "./FormField.styled";
@@ -15,16 +19,20 @@ export interface FormFieldProps extends HTMLAttributes<HTMLDivElement> {
   orientation?: FieldOrientation;
   error?: string;
   htmlFor?: string;
+  infoLabel?: string;
+  infoTooltip?: string;
 }
 
 const FormField = forwardRef(function FormField(
   {
     title,
     description,
-    error,
-    htmlFor,
     alignment = "end",
     orientation = "vertical",
+    error,
+    htmlFor,
+    infoLabel,
+    infoTooltip,
     children,
     ...props
   }: FormFieldProps,
@@ -42,12 +50,23 @@ const FormField = forwardRef(function FormField(
       {alignment === "start" && children}
       {(title || description) && (
         <FieldCaption alignment={alignment} orientation={orientation}>
-          {title && (
-            <FieldLabel htmlFor={htmlFor}>
-              {title}
-              {hasError && <FieldLabelError>: {error}</FieldLabelError>}
-            </FieldLabel>
-          )}
+          <FieldLabelContainer>
+            {title && (
+              <FieldLabel htmlFor={htmlFor}>
+                {title}
+                {hasError && <FieldLabelError>: {error}</FieldLabelError>}
+              </FieldLabel>
+            )}
+            {(infoLabel || infoTooltip) && (
+              <Tooltip tooltip={infoTooltip} maxWidth="100%">
+                {infoLabel ? (
+                  <FieldInfoLabel>{infoLabel}</FieldInfoLabel>
+                ) : (
+                  <FieldInfoIcon name="info" />
+                )}
+              </Tooltip>
+            )}
+          </FieldLabelContainer>
           {description && <FieldDescription>{description}</FieldDescription>}
         </FieldCaption>
       )}
diff --git a/frontend/src/metabase/core/components/FormInput/FormInput.tsx b/frontend/src/metabase/core/components/FormInput/FormInput.tsx
index d7039d68fb..ba2d8682bf 100644
--- a/frontend/src/metabase/core/components/FormInput/FormInput.tsx
+++ b/frontend/src/metabase/core/components/FormInput/FormInput.tsx
@@ -16,7 +16,7 @@ const FormInput = forwardRef(function FormInput(
   ref: Ref<HTMLDivElement>,
 ) {
   const id = useUniqueId();
-  const [field, meta] = useField(name);
+  const [{ value, onChange, onBlur }, { error, touched }] = useField(name);
 
   return (
     <FormField
@@ -26,16 +26,16 @@ const FormInput = forwardRef(function FormInput(
       title={title}
       description={description}
       htmlFor={id}
-      error={meta.touched ? meta.error : undefined}
+      error={touched ? error : undefined}
     >
       <Input
         {...props}
         id={id}
         name={name}
-        value={field.value}
-        error={meta.touched && meta.error != null}
-        onChange={field.onChange}
-        onBlur={field.onBlur}
+        value={value}
+        error={touched && error != null}
+        onChange={onChange}
+        onBlur={onBlur}
       />
     </FormField>
   );
diff --git a/frontend/src/metabase/core/components/FormNumericInput/FormNumericInput.tsx b/frontend/src/metabase/core/components/FormNumericInput/FormNumericInput.tsx
index 0bdccbb46e..006f05b99e 100644
--- a/frontend/src/metabase/core/components/FormNumericInput/FormNumericInput.tsx
+++ b/frontend/src/metabase/core/components/FormNumericInput/FormNumericInput.tsx
@@ -25,7 +25,7 @@ const FormNumericInput = forwardRef(function FormNumericInput(
   ref: Ref<HTMLDivElement>,
 ) {
   const id = useUniqueId();
-  const [field, meta, helpers] = useField(name);
+  const [{ value, onBlur }, { error, touched }, { setValue }] = useField(name);
 
   return (
     <FormField
@@ -35,16 +35,16 @@ const FormNumericInput = forwardRef(function FormNumericInput(
       title={title}
       description={description}
       htmlFor={id}
-      error={meta.touched ? meta.error : undefined}
+      error={touched ? error : undefined}
     >
       <NumericInput
         {...props}
         id={id}
         name={name}
-        value={field.value}
-        error={meta.touched && meta.error != null}
-        onChange={helpers.setValue}
-        onBlur={field.onBlur}
+        value={value}
+        error={touched && error != null}
+        onChange={setValue}
+        onBlur={onBlur}
       />
     </FormField>
   );
diff --git a/frontend/src/metabase/core/components/FormRadio/FormRadio.tsx b/frontend/src/metabase/core/components/FormRadio/FormRadio.tsx
index 92612762be..6d650d7058 100644
--- a/frontend/src/metabase/core/components/FormRadio/FormRadio.tsx
+++ b/frontend/src/metabase/core/components/FormRadio/FormRadio.tsx
@@ -29,7 +29,7 @@ const FormRadio = forwardRef(function FormRadio<
   }: FormRadioProps<TValue, TOption>,
   ref: Ref<HTMLDivElement>,
 ) {
-  const [field, meta, helpers] = useField(name);
+  const [{ value, onBlur }, { error, touched }, { setValue }] = useField(name);
 
   return (
     <FormField
@@ -38,14 +38,14 @@ const FormRadio = forwardRef(function FormRadio<
       style={style}
       title={title}
       description={description}
-      error={meta.touched ? meta.error : undefined}
+      error={touched ? error : undefined}
     >
       <Radio
         {...props}
         name={name}
-        value={field.value}
-        onChange={helpers.setValue}
-        onBlur={field.onBlur}
+        value={value}
+        onChange={setValue}
+        onBlur={onBlur}
       />
     </FormField>
   );
diff --git a/frontend/src/metabase/core/components/FormSelect/FormSelect.tsx b/frontend/src/metabase/core/components/FormSelect/FormSelect.tsx
index 974dc9cd63..d4d7721aec 100644
--- a/frontend/src/metabase/core/components/FormSelect/FormSelect.tsx
+++ b/frontend/src/metabase/core/components/FormSelect/FormSelect.tsx
@@ -28,7 +28,7 @@ const FormSelect = forwardRef(function FormSelect<
   ref: Ref<HTMLDivElement>,
 ) {
   const id = useUniqueId();
-  const [{ value, onChange, onBlur }, meta] = useField(name);
+  const [{ value, onChange, onBlur }, { error, touched }] = useField(name);
   const buttonProps = useMemo(() => ({ id, onBlur }), [id, onBlur]);
 
   return (
@@ -38,7 +38,7 @@ const FormSelect = forwardRef(function FormSelect<
       title={title}
       description={description}
       htmlFor={id}
-      error={meta.touched ? meta.error : undefined}
+      error={touched ? error : undefined}
     >
       <Select
         {...props}
diff --git a/frontend/src/metabase/core/components/FormTextArea/FormTextArea.tsx b/frontend/src/metabase/core/components/FormTextArea/FormTextArea.tsx
index dd68224e73..7a8c33854f 100644
--- a/frontend/src/metabase/core/components/FormTextArea/FormTextArea.tsx
+++ b/frontend/src/metabase/core/components/FormTextArea/FormTextArea.tsx
@@ -9,14 +9,25 @@ export interface FormTextAreaProps
   name: string;
   title?: string;
   description?: ReactNode;
+  infoLabel?: string;
+  infoTooltip?: string;
 }
 
 const FormTextArea = forwardRef(function FormTextArea(
-  { name, className, style, title, description, ...props }: FormTextAreaProps,
+  {
+    name,
+    className,
+    style,
+    title,
+    description,
+    infoLabel,
+    infoTooltip,
+    ...props
+  }: FormTextAreaProps,
   ref: Ref<HTMLDivElement>,
 ) {
   const id = useUniqueId();
-  const [field, meta] = useField(name);
+  const [{ value, onChange, onBlur }, { error, touched }] = useField(name);
 
   return (
     <FormField
@@ -26,16 +37,18 @@ const FormTextArea = forwardRef(function FormTextArea(
       title={title}
       description={description}
       htmlFor={id}
-      error={meta.touched ? meta.error : undefined}
+      error={touched ? error : undefined}
+      infoLabel={infoLabel}
+      infoTooltip={infoTooltip}
     >
       <TextArea
         {...props}
         id={id}
         name={name}
-        value={field.value}
-        error={meta.touched && meta.error != null}
-        onChange={field.onChange}
-        onBlur={field.onBlur}
+        value={value}
+        error={touched && error != null}
+        onChange={onChange}
+        onBlur={onBlur}
       />
     </FormField>
   );
diff --git a/frontend/src/metabase/core/components/FormToggle/FormToggle.tsx b/frontend/src/metabase/core/components/FormToggle/FormToggle.tsx
index 5ce8a3fc28..77448071a7 100644
--- a/frontend/src/metabase/core/components/FormToggle/FormToggle.tsx
+++ b/frontend/src/metabase/core/components/FormToggle/FormToggle.tsx
@@ -16,7 +16,7 @@ const FormToggle = forwardRef(function FormToggle(
   ref: Ref<HTMLDivElement>,
 ) {
   const id = useUniqueId();
-  const [field, meta, helpers] = useField(name);
+  const [{ value, onBlur }, { error, touched }, { setValue }] = useField(name);
 
   return (
     <FormField
@@ -27,15 +27,15 @@ const FormToggle = forwardRef(function FormToggle(
       description={description}
       orientation="horizontal"
       htmlFor={id}
-      error={meta.touched ? meta.error : undefined}
+      error={touched ? error : undefined}
     >
       <Toggle
         {...props}
         id={id}
         name={name}
-        value={field.value}
-        onChange={helpers.setValue}
-        onBlur={field.onBlur}
+        value={value}
+        onChange={setValue}
+        onBlur={onBlur}
       />
     </FormField>
   );
diff --git a/frontend/src/metabase/core/components/Input/Input.tsx b/frontend/src/metabase/core/components/Input/Input.tsx
index 5f9900011d..39a26d3826 100644
--- a/frontend/src/metabase/core/components/Input/Input.tsx
+++ b/frontend/src/metabase/core/components/Input/Input.tsx
@@ -74,14 +74,14 @@ const Input = forwardRef(function Input(
         hasRightIcon={Boolean(rightIcon)}
       />
       {leftIcon && (
-        <Tooltip tooltip={leftIconTooltip} placement="left" offset={[0, 24]}>
+        <Tooltip tooltip={leftIconTooltip} placement="left">
           <InputLeftButton tabIndex={-1} onClick={onLeftIconClick}>
             <Icon name={leftIcon} />
           </InputLeftButton>
         </Tooltip>
       )}
       {rightIcon && (
-        <Tooltip tooltip={rightIconTooltip} placement="right" offset={[0, 24]}>
+        <Tooltip tooltip={rightIconTooltip} placement="right">
           <InputRightButton tabIndex={-1} onClick={onRightIconClick}>
             <Icon name={rightIcon} />
           </InputRightButton>
diff --git a/frontend/src/metabase/core/components/TimeInput/CompactTimeInput.styled.tsx b/frontend/src/metabase/core/components/TimeInput/CompactTimeInput.styled.tsx
deleted file mode 100644
index a9bee37d04..0000000000
--- a/frontend/src/metabase/core/components/TimeInput/CompactTimeInput.styled.tsx
+++ /dev/null
@@ -1,28 +0,0 @@
-import styled from "@emotion/styled";
-import { color } from "metabase/lib/colors";
-import { space } from "metabase/styled-components/theme";
-import NumericInput from "metabase/core/components/NumericInput";
-import Input from "metabase/core/components/Input";
-
-export const CompactInputContainer = styled.div`
-  display: flex;
-  align-items: center;
-  padding: 0.55rem 1rem;
-
-  border-radius: ${space(1)};
-  border: 1px solid ${color("border")};
-  background-color: ${color("white")};
-`;
-
-export const CompactInput = styled(NumericInput)`
-  width: 1rem;
-  text-align: center;
-
-  ${Input.Root}, ${Input.Field} {
-    border: none;
-    padding: 0;
-    margin: 0;
-
-    font-size: 0.875rem;
-  }
-`;
diff --git a/frontend/src/metabase/core/components/TimeInput/CompactTimeInput.tsx b/frontend/src/metabase/core/components/TimeInput/CompactTimeInput.tsx
deleted file mode 100644
index 74f398322c..0000000000
--- a/frontend/src/metabase/core/components/TimeInput/CompactTimeInput.tsx
+++ /dev/null
@@ -1,81 +0,0 @@
-import React, { forwardRef, Ref, useCallback } from "react";
-import { t } from "ttag";
-
-import { SegmentedControl } from "metabase/components/SegmentedControl";
-
-import useTimeInput, { BaseTimeInputProps } from "./useTimeInput";
-import {
-  InputDivider,
-  InputRoot,
-  InputMeridiemContainer,
-} from "./TimeInput.styled";
-import { CompactInputContainer, CompactInput } from "./CompactTimeInput.styled";
-
-export type CompactTimeInputProps = BaseTimeInputProps;
-
-const CompactTimeInput = forwardRef(function TimeInput(
-  { value, is24HourMode, autoFocus, onChange }: CompactTimeInputProps,
-  ref: Ref<HTMLDivElement>,
-): JSX.Element {
-  const {
-    isAm,
-    hoursText,
-    minutesText,
-    amText,
-    pmText,
-    handleHoursChange,
-    handleMinutesChange,
-    handleAM,
-    handlePM,
-  } = useTimeInput({ value, is24HourMode, onChange });
-
-  const onAmPmChange = useCallback(
-    value => {
-      if (value === "am") {
-        handleAM();
-      } else {
-        handlePM();
-      }
-    },
-    [handleAM, handlePM],
-  );
-
-  return (
-    <InputRoot ref={ref}>
-      <CompactInputContainer>
-        <CompactInput
-          value={hoursText}
-          placeholder="00"
-          autoFocus={autoFocus}
-          fullWidth
-          aria-label={t`Hours`}
-          onChange={handleHoursChange}
-        />
-        <InputDivider>:</InputDivider>
-        <CompactInput
-          value={minutesText}
-          placeholder="00"
-          fullWidth
-          aria-label={t`Minutes`}
-          onChange={handleMinutesChange}
-        />
-      </CompactInputContainer>
-      {!is24HourMode && (
-        <InputMeridiemContainer>
-          <SegmentedControl
-            name="am-pm"
-            value={isAm ? "am" : "pm"}
-            options={[
-              { name: amText, value: "am" },
-              { name: pmText, value: "pm" },
-            ]}
-            variant="fill-all"
-            onChange={onAmPmChange}
-          />
-        </InputMeridiemContainer>
-      )}
-    </InputRoot>
-  );
-});
-
-export default CompactTimeInput;
diff --git a/frontend/src/metabase/core/components/TimeInput/TimeInput.stories.tsx b/frontend/src/metabase/core/components/TimeInput/TimeInput.stories.tsx
index 2751b28bed..57729cd62e 100644
--- a/frontend/src/metabase/core/components/TimeInput/TimeInput.stories.tsx
+++ b/frontend/src/metabase/core/components/TimeInput/TimeInput.stories.tsx
@@ -17,11 +17,3 @@ const Template: ComponentStory<typeof TimeInput> = args => {
 };
 
 export const Default = Template.bind({});
-
-const CompactTemplate: ComponentStory<typeof TimeInput> = args => {
-  const [value, setValue] = useState(moment("2020-01-01T10:20"));
-
-  return <TimeInput.Compact {...args} value={value} onChange={setValue} />;
-};
-
-export const Compact = CompactTemplate.bind({});
diff --git a/frontend/src/metabase/core/components/TimeInput/TimeInput.tsx b/frontend/src/metabase/core/components/TimeInput/TimeInput.tsx
index 6793301da5..6b716812ac 100644
--- a/frontend/src/metabase/core/components/TimeInput/TimeInput.tsx
+++ b/frontend/src/metabase/core/components/TimeInput/TimeInput.tsx
@@ -1,11 +1,8 @@
-import React, { forwardRef, Ref } from "react";
+import React, { forwardRef, Ref, useCallback } from "react";
 import { t } from "ttag";
-import { Moment } from "moment-timezone";
+import moment, { Moment } from "moment-timezone";
 import Tooltip from "metabase/components/Tooltip";
 
-import useTimeInput, { BaseTimeInputProps } from "./useTimeInput";
-import CompactTimeInput from "./CompactTimeInput";
-
 import {
   InputClearButton,
   InputClearIcon,
@@ -16,8 +13,12 @@ import {
   InputRoot,
 } from "./TimeInput.styled";
 
-export interface TimeInputProps extends BaseTimeInputProps {
+export interface TimeInputProps {
+  value: Moment;
+  is24HourMode?: boolean;
+  autoFocus?: boolean;
   hasClearButton?: boolean;
+  onChange?: (value: Moment) => void;
   onClear?: (value: Moment) => void;
 }
 
@@ -32,19 +33,57 @@ const TimeInput = forwardRef(function TimeInput(
   }: TimeInputProps,
   ref: Ref<HTMLDivElement>,
 ): JSX.Element {
-  const {
-    isAm,
-    isPm,
-    hoursText,
-    minutesText,
-    amText,
-    pmText,
-    handleHoursChange,
-    handleMinutesChange,
-    handleAM: handleAmClick,
-    handlePM: handlePmClick,
-    handleClear: handleClearClick,
-  } = useTimeInput({ value, is24HourMode, onChange, onClear });
+  const hoursText = value.format(is24HourMode ? "HH" : "hh");
+  const minutesText = value.format("mm");
+  const isAm = value.hours() < 12;
+  const isPm = !isAm;
+  const amText = moment.localeData().meridiem(0, 0, false);
+  const pmText = moment.localeData().meridiem(12, 0, false);
+
+  const handleHoursChange = useCallback(
+    (hours = 0) => {
+      const newValue = value.clone();
+      if (is24HourMode) {
+        newValue.hours(hours % 24);
+      } else {
+        newValue.hours((hours % 12) + (isAm ? 0 : 12));
+      }
+      onChange?.(newValue);
+    },
+    [value, isAm, is24HourMode, onChange],
+  );
+
+  const handleMinutesChange = useCallback(
+    (minutes = 0) => {
+      const newValue = value.clone();
+      newValue.minutes(minutes % 60);
+      onChange?.(newValue);
+    },
+    [value, onChange],
+  );
+
+  const handleAmClick = useCallback(() => {
+    if (isPm) {
+      const newValue = value.clone();
+      newValue.hours(newValue.hours() - 12);
+      onChange?.(newValue);
+    }
+  }, [value, isPm, onChange]);
+
+  const handlePmClick = useCallback(() => {
+    if (isAm) {
+      const newValue = value.clone();
+      newValue.hours(newValue.hours() + 12);
+      onChange?.(newValue);
+    }
+  }, [value, isAm, onChange]);
+
+  const handleClearClick = useCallback(() => {
+    const newValue = value.clone();
+    newValue.hours(0);
+    newValue.minutes(0);
+    onClear?.(newValue);
+  }, [value, onClear]);
 
   return (
     <InputRoot ref={ref}>
@@ -88,6 +127,4 @@ const TimeInput = forwardRef(function TimeInput(
   );
 });
 
-export default Object.assign(TimeInput, {
-  Compact: CompactTimeInput,
-});
+export default TimeInput;
diff --git a/frontend/src/metabase/core/components/TimeInput/useTimeInput.ts b/frontend/src/metabase/core/components/TimeInput/useTimeInput.ts
deleted file mode 100644
index c2bf60b717..0000000000
--- a/frontend/src/metabase/core/components/TimeInput/useTimeInput.ts
+++ /dev/null
@@ -1,85 +0,0 @@
-import { useCallback } from "react";
-import moment, { Moment } from "moment-timezone";
-
-export interface BaseTimeInputProps {
-  value: Moment;
-  is24HourMode?: boolean;
-  autoFocus?: boolean;
-  onChange?: (value: Moment) => void;
-  onClear?: (value: Moment) => void;
-}
-
-function useTimeInput({
-  value,
-  is24HourMode,
-  onChange,
-  onClear,
-}: BaseTimeInputProps) {
-  const hoursText = value.format(is24HourMode ? "HH" : "hh");
-  const minutesText = value.format("mm");
-  const isAm = value.hours() < 12;
-  const isPm = !isAm;
-  const amText = moment.localeData().meridiem(0, 0, false);
-  const pmText = moment.localeData().meridiem(12, 0, false);
-
-  const handleHoursChange = useCallback(
-    (hours = 0) => {
-      const newValue = value.clone();
-      if (is24HourMode) {
-        newValue.hours(hours % 24);
-      } else {
-        newValue.hours((hours % 12) + (isAm ? 0 : 12));
-      }
-      onChange?.(newValue);
-    },
-    [value, isAm, is24HourMode, onChange],
-  );
-
-  const handleMinutesChange = useCallback(
-    (minutes = 0) => {
-      const newValue = value.clone();
-      newValue.minutes(minutes % 60);
-      onChange?.(newValue);
-    },
-    [value, onChange],
-  );
-
-  const handleAM = useCallback(() => {
-    if (isPm) {
-      const newValue = value.clone();
-      newValue.hours(newValue.hours() - 12);
-      onChange?.(newValue);
-    }
-  }, [value, isPm, onChange]);
-
-  const handlePM = useCallback(() => {
-    if (isAm) {
-      const newValue = value.clone();
-      newValue.hours(newValue.hours() + 12);
-      onChange?.(newValue);
-    }
-  }, [value, isAm, onChange]);
-
-  const handleClear = useCallback(() => {
-    const newValue = value.clone();
-    newValue.hours(0);
-    newValue.minutes(0);
-    onClear?.(newValue);
-  }, [value, onClear]);
-
-  return {
-    isAm,
-    isPm,
-    hoursText,
-    minutesText,
-    amText,
-    pmText,
-    handleHoursChange,
-    handleMinutesChange,
-    handleAM,
-    handlePM,
-    handleClear,
-  };
-}
-
-export default useTimeInput;
diff --git a/frontend/src/metabase/entities/timeline-events.js b/frontend/src/metabase/entities/timeline-events.js
index 547e49f91e..6058069982 100644
--- a/frontend/src/metabase/entities/timeline-events.js
+++ b/frontend/src/metabase/entities/timeline-events.js
@@ -1,14 +1,12 @@
 import { t } from "ttag";
 import { TimelineEventSchema } from "metabase/schema";
 import { createEntity, undo } from "metabase/lib/entities";
-import forms from "./timeline-events/forms";
 
 const TimelineEvents = createEntity({
   name: "timelineEvents",
   nameOne: "timelineEvent",
   path: "/api/timeline-event",
   schema: TimelineEventSchema,
-  forms,
 
   objectActions: {
     setTimeline: ({ id }, timeline, opts) => {
diff --git a/frontend/src/metabase/entities/timeline-events/forms.js b/frontend/src/metabase/entities/timeline-events/forms.js
deleted file mode 100644
index 7a09270a51..0000000000
--- a/frontend/src/metabase/entities/timeline-events/forms.js
+++ /dev/null
@@ -1,65 +0,0 @@
-import { t } from "ttag";
-import { getTimelineIcons, getTimelineName } from "metabase/lib/timelines";
-import validate from "metabase/lib/validate";
-
-const createForm = ({ timelines }) => {
-  return [
-    {
-      name: "name",
-      title: t`Event name`,
-      placeholder: t`Product launch`,
-      autoFocus: true,
-      validate: validate.required().maxLength(255),
-    },
-    {
-      name: "timestamp",
-      title: t`Date`,
-      type: "date",
-      hasTimeField: "time_matters",
-      validate: validate.required(),
-    },
-    {
-      name: "description",
-      title: t`Description`,
-      type: "text",
-      validate: validate.maxLength(255),
-      infoLabel: t`Markdown supported`,
-      infoLabelTooltip: t`Add links and formatting via markdown`,
-    },
-    {
-      name: "icon",
-      title: t`Icon`,
-      type: "select",
-      options: getTimelineIcons(),
-      validate: validate.required(),
-    },
-    {
-      name: "timeline_id",
-      title: t`Timeline`,
-      type: timelines.length > 1 ? "select" : "hidden",
-      options: timelines.map(t => ({ name: getTimelineName(t), value: t.id })),
-    },
-    {
-      name: "source",
-      type: "hidden",
-    },
-    {
-      name: "question_id",
-      type: "hidden",
-    },
-    {
-      name: "timezone",
-      type: "hidden",
-    },
-    {
-      name: "time_matters",
-      type: "hidden",
-    },
-  ];
-};
-
-export default {
-  details: ({ timelines = [] } = {}) => ({
-    fields: createForm({ timelines }),
-  }),
-};
diff --git a/frontend/src/metabase/entities/timelines.js b/frontend/src/metabase/entities/timelines.js
index 12c8247220..7e79a41f12 100644
--- a/frontend/src/metabase/entities/timelines.js
+++ b/frontend/src/metabase/entities/timelines.js
@@ -7,14 +7,12 @@ import { createEntity, undo } from "metabase/lib/entities";
 import { getDefaultTimeline, getTimelineName } from "metabase/lib/timelines";
 import { canonicalCollectionId } from "metabase/collections/utils";
 import TimelineEvents from "./timeline-events";
-import forms from "./timelines/forms";
 
 const Timelines = createEntity({
   name: "timelines",
   nameOne: "timeline",
   path: "/api/timeline",
   schema: TimelineSchema,
-  forms,
 
   api: {
     list: (params, ...args) => {
diff --git a/frontend/src/metabase/entities/timelines/forms.js b/frontend/src/metabase/entities/timelines/forms.js
deleted file mode 100644
index d0fee6e135..0000000000
--- a/frontend/src/metabase/entities/timelines/forms.js
+++ /dev/null
@@ -1,42 +0,0 @@
-import { t } from "ttag";
-import { getTimelineIcons } from "metabase/lib/timelines";
-import validate from "metabase/lib/validate";
-
-const createForm = () => {
-  return [
-    {
-      name: "name",
-      title: t`Name`,
-      placeholder: t`Product releases`,
-      autoFocus: true,
-      validate: validate.required().maxLength(255),
-    },
-    {
-      name: "description",
-      title: t`Description`,
-      type: "text",
-      validate: validate.maxLength(255),
-    },
-    {
-      name: "icon",
-      title: t`Default icon`,
-      type: "select",
-      options: getTimelineIcons(),
-      validate: validate.required(),
-    },
-    {
-      name: "collection_id",
-      type: "hidden",
-    },
-    {
-      name: "default",
-      type: "hidden",
-    },
-  ];
-};
-
-export default {
-  details: {
-    fields: createForm(),
-  },
-};
diff --git a/frontend/src/metabase/setup/components/InviteUserForm/InviteUserForm.tsx b/frontend/src/metabase/setup/components/InviteUserForm/InviteUserForm.tsx
index e6eb7b711a..5ec972e7c1 100644
--- a/frontend/src/metabase/setup/components/InviteUserForm/InviteUserForm.tsx
+++ b/frontend/src/metabase/setup/components/InviteUserForm/InviteUserForm.tsx
@@ -75,7 +75,7 @@ const InviteUserForm = ({
           placeholder={"nicetoseeyou@email.com"}
           fullWidth
         />
-        <FormSubmitButton title={`Send invitation`} primary />
+        <FormSubmitButton title={t`Send invitation`} primary />
       </Form>
     </FormProvider>
   );
diff --git a/frontend/src/metabase/timelines/common/components/EditEventModal/EditEventModal.tsx b/frontend/src/metabase/timelines/common/components/EditEventModal/EditEventModal.tsx
index 160fccfebc..e1037f58d5 100644
--- a/frontend/src/metabase/timelines/common/components/EditEventModal/EditEventModal.tsx
+++ b/frontend/src/metabase/timelines/common/components/EditEventModal/EditEventModal.tsx
@@ -1,10 +1,8 @@
 import React, { useCallback, useMemo } from "react";
 import { t } from "ttag";
-import Form from "metabase/containers/FormikForm";
-import forms from "metabase/entities/timeline-events/forms";
-import { Timeline, TimelineEvent } from "metabase-types/api";
+import { Timeline, TimelineEvent, TimelineEventData } from "metabase-types/api";
+import EventForm from "../EventForm";
 import ModalBody from "../ModalBody";
-import ModalDangerButton from "../ModalDangerButton";
 import ModalHeader from "../ModalHeader";
 
 export interface EditEventModalProps {
@@ -28,14 +26,16 @@ const EditEventModal = ({
   onCancel,
   onClose,
 }: EditEventModalProps): JSX.Element => {
-  const form = useMemo(() => forms.details(), []);
+  const initialValues = useMemo(() => {
+    return getInitialValues(event);
+  }, [event]);
 
   const handleSubmit = useCallback(
-    async (event: TimelineEvent) => {
-      await onSubmit(event, timeline);
+    async (values: TimelineEventData) => {
+      await onSubmit(getSubmitValues(event, values), timeline);
       onSubmitSuccess?.();
     },
-    [timeline, onSubmit, onSubmitSuccess],
+    [event, timeline, onSubmit, onSubmitSuccess],
   );
 
   const handleArchive = useCallback(async () => {
@@ -47,21 +47,29 @@ const EditEventModal = ({
     <div>
       <ModalHeader title={t`Edit event`} onClose={onClose} />
       <ModalBody>
-        <Form<TimelineEvent>
-          form={form}
-          initialValues={event}
-          isModal={true}
+        <EventForm
+          initialValues={initialValues}
           onSubmit={handleSubmit}
-          onClose={onCancel}
-          footerExtraButtons={
-            <ModalDangerButton onClick={handleArchive}>
-              {t`Archive event`}
-            </ModalDangerButton>
-          }
+          onArchive={handleArchive}
+          onCancel={onCancel}
         />
       </ModalBody>
     </div>
   );
 };
 
+const getInitialValues = (event: TimelineEvent): TimelineEventData => ({
+  ...event,
+  description: event.description || "",
+});
+
+const getSubmitValues = (
+  event: TimelineEvent,
+  values: TimelineEventData,
+): TimelineEvent => ({
+  ...event,
+  ...values,
+  description: values.description || null,
+});
+
 export default EditEventModal;
diff --git a/frontend/src/metabase/timelines/common/components/EditEventModal/EditEventModal.unit.spec.tsx b/frontend/src/metabase/timelines/common/components/EditEventModal/EditEventModal.unit.spec.tsx
index 4bbc5d3cdd..194f701691 100644
--- a/frontend/src/metabase/timelines/common/components/EditEventModal/EditEventModal.unit.spec.tsx
+++ b/frontend/src/metabase/timelines/common/components/EditEventModal/EditEventModal.unit.spec.tsx
@@ -1,5 +1,5 @@
-import React, { FormHTMLAttributes } from "react";
-import { render, screen } from "@testing-library/react";
+import React from "react";
+import { render, screen, waitFor } from "@testing-library/react";
 import userEvent from "@testing-library/user-event";
 import {
   createMockTimeline,
@@ -7,22 +7,17 @@ import {
 } from "metabase-types/api/mocks";
 import EditEventModal, { EditEventModalProps } from "./EditEventModal";
 
-const FormMock = (props: FormHTMLAttributes<HTMLFormElement>) => (
-  <form {...props}>
-    <button>Update</button>
-  </form>
-);
-
-jest.mock("metabase/containers/FormikForm", () => FormMock);
-
 describe("EditEventModal", () => {
-  it("should submit modal", () => {
+  it("should submit modal", async () => {
     const props = getProps();
 
     render(<EditEventModal {...props} />);
-    userEvent.click(screen.getByText("Update"));
+    userEvent.clear(screen.getByLabelText("Event name"));
+    userEvent.type(screen.getByLabelText("Event name"), "New name");
+    await waitFor(() => expect(screen.getByText("Update")).toBeEnabled());
 
-    expect(props.onSubmit).toHaveBeenCalled();
+    userEvent.click(screen.getByText("Update"));
+    await waitFor(() => expect(props.onSubmit).toHaveBeenCalled());
   });
 });
 
diff --git a/frontend/src/metabase/timelines/common/components/EditTimelineModal/EditTimelineModal.tsx b/frontend/src/metabase/timelines/common/components/EditTimelineModal/EditTimelineModal.tsx
index d2b667cb33..57d3e05e13 100644
--- a/frontend/src/metabase/timelines/common/components/EditTimelineModal/EditTimelineModal.tsx
+++ b/frontend/src/metabase/timelines/common/components/EditTimelineModal/EditTimelineModal.tsx
@@ -1,15 +1,13 @@
 import React, { useCallback, useMemo } from "react";
 import { t } from "ttag";
-import Form from "metabase/containers/FormikForm";
-import forms from "metabase/entities/timelines/forms";
-import { Timeline } from "metabase-types/api";
+import { Timeline, TimelineData } from "metabase-types/api";
 import ModalBody from "../ModalBody";
-import ModalDangerButton from "../ModalDangerButton";
 import ModalHeader from "../ModalHeader";
+import TimelineForm from "../TimelineForm";
 
 export interface EditTimelineModalProps {
   timeline: Timeline;
-  onSubmit: (values: Partial<Timeline>) => void;
+  onSubmit: (values: Timeline) => void;
   onSubmitSuccess?: () => void;
   onArchive: (timeline: Timeline) => void;
   onArchiveSuccess?: () => void;
@@ -27,15 +25,15 @@ const EditTimelineModal = ({
   onClose,
 }: EditTimelineModalProps): JSX.Element => {
   const initialValues = useMemo(() => {
-    return { ...timeline, default: false };
+    return getInitialValues(timeline);
   }, [timeline]);
 
   const handleSubmit = useCallback(
-    async (values: Partial<Timeline>) => {
-      await onSubmit(values);
+    async (values: TimelineData) => {
+      await onSubmit(getSubmitValues(values, timeline));
       onSubmitSuccess?.();
     },
-    [onSubmit, onSubmitSuccess],
+    [timeline, onSubmit, onSubmitSuccess],
   );
 
   const handleArchive = useCallback(async () => {
@@ -47,21 +45,30 @@ const EditTimelineModal = ({
     <div>
       <ModalHeader title={t`Edit event timeline`} onClose={onClose} />
       <ModalBody>
-        <Form
-          form={forms.details}
+        <TimelineForm
           initialValues={initialValues}
-          isModal={true}
           onSubmit={handleSubmit}
-          onClose={onCancel}
-          footerExtraButtons={
-            <ModalDangerButton onClick={handleArchive}>
-              {t`Archive timeline and all events`}
-            </ModalDangerButton>
-          }
+          onArchive={handleArchive}
+          onCancel={onCancel}
         />
       </ModalBody>
     </div>
   );
 };
 
+const getInitialValues = (timeline: Timeline): TimelineData => ({
+  ...timeline,
+  default: false,
+  description: timeline.description || "",
+});
+
+const getSubmitValues = (
+  values: TimelineData,
+  timeline: Timeline,
+): Timeline => ({
+  ...timeline,
+  ...values,
+  description: values.description || null,
+});
+
 export default EditTimelineModal;
diff --git a/frontend/src/metabase/timelines/common/components/EditTimelineModal/EditTimelineModal.unit.spec.tsx b/frontend/src/metabase/timelines/common/components/EditTimelineModal/EditTimelineModal.unit.spec.tsx
index 1922da2da0..8b4e9b8ee0 100644
--- a/frontend/src/metabase/timelines/common/components/EditTimelineModal/EditTimelineModal.unit.spec.tsx
+++ b/frontend/src/metabase/timelines/common/components/EditTimelineModal/EditTimelineModal.unit.spec.tsx
@@ -1,25 +1,22 @@
-import React, { FormHTMLAttributes } from "react";
-import { render, screen } from "@testing-library/react";
+import React from "react";
+import { render, screen, waitFor } from "@testing-library/react";
 import userEvent from "@testing-library/user-event";
 import { createMockTimeline } from "metabase-types/api/mocks";
 import EditTimelineModal, { EditTimelineModalProps } from "./EditTimelineModal";
 
-const FormMock = (props: FormHTMLAttributes<HTMLFormElement>) => (
-  <form {...props}>
-    <button>Update</button>
-  </form>
-);
-
-jest.mock("metabase/containers/FormikForm", () => FormMock);
-
 describe("EditTimelineModal", () => {
-  it("should submit modal", () => {
+  it("should submit modal", async () => {
     const props = getProps();
+    const name = "Another timeline";
 
     render(<EditTimelineModal {...props} />);
+    userEvent.clear(screen.getByLabelText("Name"));
+    userEvent.type(screen.getByLabelText("Name"), name);
     userEvent.click(screen.getByText("Update"));
 
-    expect(props.onSubmit).toHaveBeenCalled();
+    await waitFor(() => {
+      expect(props.onSubmit).toHaveBeenCalledWith({ ...props.timeline, name });
+    });
   });
 });
 
diff --git a/frontend/src/metabase/timelines/common/components/EventForm/EventForm.styled.tsx b/frontend/src/metabase/timelines/common/components/EventForm/EventForm.styled.tsx
new file mode 100644
index 0000000000..fef268f616
--- /dev/null
+++ b/frontend/src/metabase/timelines/common/components/EventForm/EventForm.styled.tsx
@@ -0,0 +1,8 @@
+import styled from "@emotion/styled";
+
+export const EventFormFooter = styled.div`
+  display: flex;
+  align-items: center;
+  justify-content: end;
+  gap: 0.5rem;
+`;
diff --git a/frontend/src/metabase/timelines/common/components/EventForm/EventForm.tsx b/frontend/src/metabase/timelines/common/components/EventForm/EventForm.tsx
new file mode 100644
index 0000000000..dcbfad58e3
--- /dev/null
+++ b/frontend/src/metabase/timelines/common/components/EventForm/EventForm.tsx
@@ -0,0 +1,116 @@
+import React, { useMemo } from "react";
+import { t } from "ttag";
+import * as Yup from "yup";
+import { getTimelineIcons, getTimelineName } from "metabase/lib/timelines";
+import Button from "metabase/core/components/Button/Button";
+import Form from "metabase/core/components/Form";
+import FormProvider from "metabase/core/components/FormProvider";
+import FormInput from "metabase/core/components/FormInput";
+import FormDateInput from "metabase/core/components/FormDateInput";
+import FormTextArea from "metabase/core/components/FormTextArea";
+import FormSelect from "metabase/core/components/FormSelect";
+import FormSubmitButton from "metabase/core/components/FormSubmitButton";
+import FormErrorMessage from "metabase/core/components/FormErrorMessage";
+import { Timeline, TimelineEventData } from "metabase-types/api";
+import FormArchiveButton from "../FormArchiveButton";
+import { EventFormFooter } from "./EventForm.styled";
+
+const EventSchema = Yup.object({
+  name: Yup.string()
+    .required(t`required`)
+    .max(255, ({ max }) => t`must be ${max} characters or less`),
+  description: Yup.string().max(
+    255,
+    ({ max }) => t`must be ${max} characters or less`,
+  ),
+  timestamp: Yup.string().required(`required`),
+  time_matters: Yup.boolean(),
+  icon: Yup.string().required(`required`),
+  timeline_id: Yup.number(),
+});
+
+export interface EventFormProps {
+  initialValues: TimelineEventData;
+  timelines?: Timeline[];
+  onSubmit: (data: TimelineEventData) => void;
+  onArchive?: () => void;
+  onCancel?: () => void;
+}
+
+const EventForm = ({
+  initialValues,
+  timelines = [],
+  onSubmit,
+  onArchive,
+  onCancel,
+}: EventFormProps): JSX.Element => {
+  const isNew = initialValues.id == null;
+
+  const iconOptions = useMemo(() => {
+    return getTimelineIcons();
+  }, []);
+
+  const timelineOptions = useMemo(() => {
+    return timelines.map(t => ({ name: getTimelineName(t), value: t.id }));
+  }, [timelines]);
+
+  return (
+    <FormProvider
+      initialValues={initialValues}
+      validationSchema={EventSchema}
+      onSubmit={onSubmit}
+    >
+      {({ dirty, values, setFieldValue }) => (
+        <Form disabled={!dirty}>
+          <FormInput
+            name="name"
+            title={t`Event name`}
+            placeholder={t`Product launch`}
+            autoFocus
+            fullWidth
+          />
+          <FormDateInput
+            name="timestamp"
+            title={t`Date`}
+            hasTime={values.time_matters}
+            fullWidth
+            onHasTimeChange={value => setFieldValue("time_matters", value)}
+          />
+          <FormTextArea
+            name="description"
+            title={t`Description`}
+            infoLabel={t`Markdown supported`}
+            infoTooltip={t`Add links and formatting via markdown`}
+            fullWidth
+          />
+          <FormSelect name="icon" title={t`Icon`} options={iconOptions} />
+          {timelines.length > 1 && (
+            <FormSelect
+              name="timeline_id"
+              title={t`Timeline`}
+              options={timelineOptions}
+            />
+          )}
+          <EventFormFooter>
+            <FormErrorMessage inline />
+            {!isNew && (
+              <FormArchiveButton onClick={onArchive}>
+                {t`Archive event`}
+              </FormArchiveButton>
+            )}
+            <Button type="button" onClick={onCancel}>
+              {t`Cancel`}
+            </Button>
+            <FormSubmitButton
+              title={isNew ? t`Create` : t`Update`}
+              disabled={!dirty}
+              primary
+            />
+          </EventFormFooter>
+        </Form>
+      )}
+    </FormProvider>
+  );
+};
+
+export default EventForm;
diff --git a/frontend/src/metabase/timelines/common/components/EventForm/index.ts b/frontend/src/metabase/timelines/common/components/EventForm/index.ts
new file mode 100644
index 0000000000..e88ece405b
--- /dev/null
+++ b/frontend/src/metabase/timelines/common/components/EventForm/index.ts
@@ -0,0 +1 @@
+export { default } from "./EventForm";
diff --git a/frontend/src/metabase/timelines/common/components/FormArchiveButton/FormArchiveButton.tsx b/frontend/src/metabase/timelines/common/components/FormArchiveButton/FormArchiveButton.tsx
new file mode 100644
index 0000000000..c507d7ff30
--- /dev/null
+++ b/frontend/src/metabase/timelines/common/components/FormArchiveButton/FormArchiveButton.tsx
@@ -0,0 +1,20 @@
+import React, { MouseEvent, ReactNode } from "react";
+import { ArchiveButton } from "./FormDangerButton.styled";
+
+export interface FormArchiveButtonProps {
+  children?: ReactNode;
+  onClick?: (event: MouseEvent) => void;
+}
+
+const FormArchiveButton = ({
+  children,
+  onClick,
+}: FormArchiveButtonProps): JSX.Element => {
+  return (
+    <ArchiveButton type="button" borderless onClick={onClick}>
+      {children}
+    </ArchiveButton>
+  );
+};
+
+export default FormArchiveButton;
diff --git a/frontend/src/metabase/timelines/common/components/ModalDangerButton/ModalDangerButton.styled.tsx b/frontend/src/metabase/timelines/common/components/FormArchiveButton/FormDangerButton.styled.tsx
similarity index 86%
rename from frontend/src/metabase/timelines/common/components/ModalDangerButton/ModalDangerButton.styled.tsx
rename to frontend/src/metabase/timelines/common/components/FormArchiveButton/FormDangerButton.styled.tsx
index 3815f182af..b4d6e15ec2 100644
--- a/frontend/src/metabase/timelines/common/components/ModalDangerButton/ModalDangerButton.styled.tsx
+++ b/frontend/src/metabase/timelines/common/components/FormArchiveButton/FormDangerButton.styled.tsx
@@ -2,7 +2,7 @@ import styled from "@emotion/styled";
 import { color } from "metabase/lib/colors";
 import Button from "metabase/core/components/Button/Button";
 
-export const DangerButton = styled(Button)`
+export const ArchiveButton = styled(Button)`
   color: ${color("danger")};
   padding-left: 0;
   padding-right: 0;
diff --git a/frontend/src/metabase/timelines/common/components/FormArchiveButton/index.ts b/frontend/src/metabase/timelines/common/components/FormArchiveButton/index.ts
new file mode 100644
index 0000000000..99b5ee7856
--- /dev/null
+++ b/frontend/src/metabase/timelines/common/components/FormArchiveButton/index.ts
@@ -0,0 +1 @@
+export { default } from "./FormArchiveButton";
diff --git a/frontend/src/metabase/timelines/common/components/ModalDangerButton/ModalDangerButton.tsx b/frontend/src/metabase/timelines/common/components/ModalDangerButton/ModalDangerButton.tsx
deleted file mode 100644
index 819e8c8ebc..0000000000
--- a/frontend/src/metabase/timelines/common/components/ModalDangerButton/ModalDangerButton.tsx
+++ /dev/null
@@ -1,20 +0,0 @@
-import React, { MouseEvent, ReactNode } from "react";
-import { DangerButton } from "./ModalDangerButton.styled";
-
-export interface ModalDangerButtonProps {
-  children?: ReactNode;
-  onClick?: (event: MouseEvent) => void;
-}
-
-const ModalDangerButton = ({
-  children,
-  onClick,
-}: ModalDangerButtonProps): JSX.Element => {
-  return (
-    <DangerButton type="button" borderless onClick={onClick}>
-      {children}
-    </DangerButton>
-  );
-};
-
-export default ModalDangerButton;
diff --git a/frontend/src/metabase/timelines/common/components/ModalDangerButton/index.ts b/frontend/src/metabase/timelines/common/components/ModalDangerButton/index.ts
deleted file mode 100644
index 1138f18822..0000000000
--- a/frontend/src/metabase/timelines/common/components/ModalDangerButton/index.ts
+++ /dev/null
@@ -1 +0,0 @@
-export { default } from "./ModalDangerButton";
diff --git a/frontend/src/metabase/timelines/common/components/NewEventModal/NewEventModal.tsx b/frontend/src/metabase/timelines/common/components/NewEventModal/NewEventModal.tsx
index f431c5f2ab..affc1fc19a 100644
--- a/frontend/src/metabase/timelines/common/components/NewEventModal/NewEventModal.tsx
+++ b/frontend/src/metabase/timelines/common/components/NewEventModal/NewEventModal.tsx
@@ -1,25 +1,24 @@
 import React, { useCallback, useMemo } from "react";
 import { t } from "ttag";
-import { getDefaultTimezone } from "metabase/lib/time";
+import moment from "moment-timezone";
 import { getDefaultTimelineIcon } from "metabase/lib/timelines";
-import Form from "metabase/containers/FormikForm";
-import forms from "metabase/entities/timeline-events/forms";
 import {
   Collection,
   Timeline,
-  TimelineEvent,
+  TimelineEventData,
   TimelineEventSource,
 } from "metabase-types/api";
+import EventForm from "../EventForm";
 import ModalBody from "../ModalBody";
 import ModalHeader from "../ModalHeader";
 
 export interface NewEventModalProps {
   timelines?: Timeline[];
   collection?: Collection;
-  cardId?: number;
   source: TimelineEventSource;
+  cardId?: number;
   onSubmit: (
-    values: Partial<TimelineEvent>,
+    values: TimelineEventData,
     collection?: Collection,
     timeline?: Timeline,
   ) => void;
@@ -31,8 +30,8 @@ export interface NewEventModalProps {
 const NewEventModal = ({
   timelines = [],
   collection,
-  cardId,
   source,
+  cardId,
   onSubmit,
   onSubmitSuccess,
   onCancel,
@@ -42,28 +41,14 @@ const NewEventModal = ({
     return timelines.filter(t => t.collection?.can_write);
   }, [timelines]);
 
-  const form = useMemo(() => {
-    return forms.details({ timelines: availableTimelines });
-  }, [availableTimelines]);
-
   const initialValues = useMemo(() => {
-    const defaultTimeline = availableTimelines[0];
-    const hasOneTimeline = availableTimelines.length === 1;
-
-    return {
-      timeline_id: defaultTimeline ? defaultTimeline.id : undefined,
-      icon: hasOneTimeline ? defaultTimeline.icon : getDefaultTimelineIcon(),
-      timezone: getDefaultTimezone(),
-      source,
-      question_id: cardId,
-      time_matters: false,
-    };
-  }, [cardId, source, availableTimelines]);
+    return getInitialValues(availableTimelines, source, cardId);
+  }, [availableTimelines, source, cardId]);
 
   const handleSubmit = useCallback(
-    async (values: Partial<TimelineEvent>) => {
+    async (values: TimelineEventData) => {
       const timeline = timelines.find(t => t.id === values.timeline_id);
-      await onSubmit(values, collection, timeline);
+      await onSubmit(getSubmitValues(values), collection, timeline);
       onSubmitSuccess?.();
     },
     [collection, timelines, onSubmit, onSubmitSuccess],
@@ -73,16 +58,42 @@ const NewEventModal = ({
     <div>
       <ModalHeader title={t`New event`} onClose={onClose} />
       <ModalBody>
-        <Form<Partial<TimelineEvent>>
-          form={form}
+        <EventForm
           initialValues={initialValues}
-          isModal={true}
+          timelines={availableTimelines}
           onSubmit={handleSubmit}
-          onClose={onCancel}
+          onCancel={onCancel}
         />
       </ModalBody>
     </div>
   );
 };
 
+const getInitialValues = (
+  timelines: Timeline[],
+  source?: TimelineEventSource,
+  cardId?: number,
+): TimelineEventData => {
+  const defaultTimeline = timelines[0];
+  const hasOneTimeline = timelines.length === 1;
+
+  return {
+    name: "",
+    description: "",
+    timestamp: undefined,
+    timeline_id: defaultTimeline?.id,
+    icon: hasOneTimeline ? defaultTimeline.icon : getDefaultTimelineIcon(),
+    timezone: moment.tz.guess(),
+    time_matters: false,
+    archived: false,
+    source,
+    question_id: cardId,
+  };
+};
+
+const getSubmitValues = (values: TimelineEventData): TimelineEventData => ({
+  ...values,
+  description: values.description || null,
+});
+
 export default NewEventModal;
diff --git a/frontend/src/metabase/timelines/common/components/NewTimelineModal/NewTimelineModal.tsx b/frontend/src/metabase/timelines/common/components/NewTimelineModal/NewTimelineModal.tsx
index 38ff148698..38a6545d88 100644
--- a/frontend/src/metabase/timelines/common/components/NewTimelineModal/NewTimelineModal.tsx
+++ b/frontend/src/metabase/timelines/common/components/NewTimelineModal/NewTimelineModal.tsx
@@ -1,18 +1,17 @@
 import React, { useCallback, useMemo } from "react";
 import { t } from "ttag";
-import Form from "metabase/containers/FormikForm";
-import forms from "metabase/entities/timelines/forms";
 import { getDefaultTimelineIcon } from "metabase/lib/timelines";
 import { canonicalCollectionId } from "metabase/collections/utils";
-import { Collection, Timeline } from "metabase-types/api";
+import { Collection, TimelineData } from "metabase-types/api";
 import ModalBody from "../ModalBody";
 import ModalHeader from "../ModalHeader";
+import TimelineForm from "../TimelineForm";
 
 export interface NewTimelineModalProps {
   collection: Collection;
-  onSubmit: (values: Partial<Timeline>, collection: Collection) => void;
+  onSubmit: (values: TimelineData, collection: Collection) => void;
   onSubmitSuccess?: () => void;
-  onCancel?: () => void;
+  onCancel: () => void;
   onClose?: () => void;
 }
 
@@ -24,16 +23,12 @@ const NewTimelineModal = ({
   onClose,
 }: NewTimelineModalProps): JSX.Element => {
   const initialValues = useMemo(() => {
-    return {
-      collection_id: canonicalCollectionId(collection.id),
-      icon: getDefaultTimelineIcon(),
-      default: false,
-    };
+    return getInitialValues(collection);
   }, [collection]);
 
   const handleSubmit = useCallback(
-    async (values: Partial<Timeline>) => {
-      await onSubmit(values, collection);
+    async (values: TimelineData) => {
+      await onSubmit(getSubmitValues(values), collection);
       onSubmitSuccess?.();
     },
     [collection, onSubmit, onSubmitSuccess],
@@ -43,16 +38,28 @@ const NewTimelineModal = ({
     <div>
       <ModalHeader title={t`New event timeline`} onClose={onClose} />
       <ModalBody>
-        <Form
-          form={forms.details}
+        <TimelineForm
           initialValues={initialValues}
-          isModal={true}
           onSubmit={handleSubmit}
-          onClose={onCancel}
+          onCancel={onCancel}
         />
       </ModalBody>
     </div>
   );
 };
 
+const getInitialValues = (collection: Collection): TimelineData => ({
+  name: "",
+  description: "",
+  collection_id: canonicalCollectionId(collection.id),
+  icon: getDefaultTimelineIcon(),
+  default: false,
+  archived: false,
+});
+
+const getSubmitValues = (values: TimelineData): TimelineData => ({
+  ...values,
+  description: values.description || null,
+});
+
 export default NewTimelineModal;
diff --git a/frontend/src/metabase/timelines/common/components/NewTimelineModal/NewTimelineModal.unit.spec.tsx b/frontend/src/metabase/timelines/common/components/NewTimelineModal/NewTimelineModal.unit.spec.tsx
index 9213abc16b..d0052ffbd8 100644
--- a/frontend/src/metabase/timelines/common/components/NewTimelineModal/NewTimelineModal.unit.spec.tsx
+++ b/frontend/src/metabase/timelines/common/components/NewTimelineModal/NewTimelineModal.unit.spec.tsx
@@ -1,25 +1,27 @@
-import React, { FormHTMLAttributes } from "react";
-import { render, screen } from "@testing-library/react";
+import React from "react";
+import { render, screen, waitFor } from "@testing-library/react";
 import userEvent from "@testing-library/user-event";
-import { createMockCollection } from "metabase-types/api/mocks";
+import {
+  createMockCollection,
+  createMockTimelineData,
+} from "metabase-types/api/mocks";
 import NewTimelineModal, { NewTimelineModalProps } from "./NewTimelineModal";
 
-const FormMock = (props: FormHTMLAttributes<HTMLFormElement>) => (
-  <form {...props}>
-    <button>Create</button>
-  </form>
-);
-
-jest.mock("metabase/containers/FormikForm", () => FormMock);
-
 describe("NewTimelineModal", () => {
-  it("should submit modal", () => {
+  it("should submit modal", async () => {
     const props = getProps();
+    const values = createMockTimelineData();
 
     render(<NewTimelineModal {...props} />);
-    userEvent.click(screen.getByText("Create"));
+    userEvent.type(screen.getByLabelText("Name"), values.name);
+    await waitFor(() => {
+      expect(screen.getByText("Create")).toBeEnabled();
+    });
 
-    expect(props.onSubmit).toHaveBeenCalled();
+    userEvent.click(screen.getByText("Create"));
+    await waitFor(() => {
+      expect(props.onSubmit).toHaveBeenCalledWith(values, props.collection);
+    });
   });
 });
 
diff --git a/frontend/src/metabase/timelines/common/components/TimelineForm/TimelineForm.styled.tsx b/frontend/src/metabase/timelines/common/components/TimelineForm/TimelineForm.styled.tsx
new file mode 100644
index 0000000000..46475fca3f
--- /dev/null
+++ b/frontend/src/metabase/timelines/common/components/TimelineForm/TimelineForm.styled.tsx
@@ -0,0 +1,8 @@
+import styled from "@emotion/styled";
+
+export const TimelineFormFooter = styled.div`
+  display: flex;
+  align-items: center;
+  justify-content: end;
+  gap: 0.5rem;
+`;
diff --git a/frontend/src/metabase/timelines/common/components/TimelineForm/TimelineForm.tsx b/frontend/src/metabase/timelines/common/components/TimelineForm/TimelineForm.tsx
new file mode 100644
index 0000000000..521fb59bd8
--- /dev/null
+++ b/frontend/src/metabase/timelines/common/components/TimelineForm/TimelineForm.tsx
@@ -0,0 +1,83 @@
+import React, { useMemo } from "react";
+import { t } from "ttag";
+import * as Yup from "yup";
+import { getTimelineIcons } from "metabase/lib/timelines";
+import Button from "metabase/core/components/Button";
+import Form from "metabase/core/components/Form";
+import FormProvider from "metabase/core/components/FormProvider";
+import FormInput from "metabase/core/components/FormInput";
+import FormTextArea from "metabase/core/components/FormTextArea";
+import FormSelect from "metabase/core/components/FormSelect";
+import FormSubmitButton from "metabase/core/components/FormSubmitButton";
+import FormErrorMessage from "metabase/core/components/FormErrorMessage";
+import { TimelineData } from "metabase-types/api";
+import FormArchiveButton from "../FormArchiveButton";
+import { TimelineFormFooter } from "./TimelineForm.styled";
+
+const TimelineSchema = Yup.object({
+  name: Yup.string()
+    .required(t`required`)
+    .max(255, ({ max }) => t`must be ${max} characters or less`),
+  description: Yup.string().max(
+    255,
+    ({ max }) => t`must be ${max} characters or less`,
+  ),
+  icon: Yup.string().required(t`required`),
+});
+
+export interface TimelineFormProps {
+  initialValues: TimelineData;
+  onSubmit: (data: TimelineData) => void;
+  onArchive?: () => void;
+  onCancel?: () => void;
+}
+
+const TimelineForm = ({
+  initialValues,
+  onSubmit,
+  onArchive,
+  onCancel,
+}: TimelineFormProps) => {
+  const isNew = initialValues.id == null;
+  const icons = useMemo(() => getTimelineIcons(), []);
+
+  return (
+    <FormProvider
+      initialValues={initialValues}
+      validationSchema={TimelineSchema}
+      onSubmit={onSubmit}
+    >
+      {({ dirty }) => (
+        <Form disabled={!dirty}>
+          <FormInput
+            name="name"
+            title={t`Name`}
+            placeholder={t`Product releases`}
+            autoFocus
+            fullWidth
+          />
+          <FormTextArea name="description" title={t`Description`} fullWidth />
+          <FormSelect name="icon" title={t`Default icon`} options={icons} />
+          <TimelineFormFooter>
+            <FormErrorMessage inline />
+            {!isNew && (
+              <FormArchiveButton onClick={onArchive}>
+                {t`Archive timeline and all events`}
+              </FormArchiveButton>
+            )}
+            <Button type="button" onClick={onCancel}>
+              {t`Cancel`}
+            </Button>
+            <FormSubmitButton
+              title={isNew ? t`Create` : t`Update`}
+              disabled={!dirty}
+              primary
+            />
+          </TimelineFormFooter>
+        </Form>
+      )}
+    </FormProvider>
+  );
+};
+
+export default TimelineForm;
diff --git a/frontend/src/metabase/timelines/common/components/TimelineForm/index.ts b/frontend/src/metabase/timelines/common/components/TimelineForm/index.ts
new file mode 100644
index 0000000000..4080dee8e4
--- /dev/null
+++ b/frontend/src/metabase/timelines/common/components/TimelineForm/index.ts
@@ -0,0 +1 @@
+export { default } from "./TimelineForm";
