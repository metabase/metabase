name: "Claude Code Review"

on:
  pull_request:
    types: [opened, synchronize, reopened, labeled, unlabeled]

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref && github.ref || github.run_id }}-claude-code-review
  cancel-in-progress: true

env:
  EXCLUDED_PR_AUTHORS: '["kamilmielnik", "romeovs"]'

jobs:
  review:
    if: ${{ !contains(github.event.pull_request.labels.*.name, 'skip-cc-review') && !contains(fromJSON(env.EXCLUDED_PR_AUTHORS), github.event.pull_request.user.login) }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      id-token: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      # Apparently comments on specific lines and top-level comments about the PR as a whole are TWO TOTALLY DIFFERENT
      # TYPES OF THINGS. So we have to fetch and delete separately.
      - name: Delete old Claude PR review comments
        env:
          GH_TOKEN: ${{ github.token }}
          REPO: ${{ github.repository }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        shell: bash
        run: |
          # Get old comment IDs from the bot
          old_line_comment_ids=$(gh api "/repos/$REPO/pulls/$PR_NUMBER/comments" --jq '.[] | select(.user.login=="metabase-bot[bot]") | .id')
          echo "Deleting line comments: $old_line_comment_ids"
          # Delete each comment
          for id in $old_line_comment_ids; do
            gh api -X DELETE "/repos/$REPO/pulls/comments/$id"
            echo "Deleted line comment $id"
          done
          # Get old top-level comment IDs (technically "issue" comments on the PR?)
          old_top_level_comment_ids=$(gh api "/repos/$REPO/issues/$PR_NUMBER/comments" --jq '.[] | select(.user.login=="metabase-bot[bot]") | .id')
          echo "Deleting top-level comments: $old_top_level_comment_ids"
          # Delete each comment
          for id in $old_top_level_comment_ids; do
            gh api -X DELETE "/repos/$REPO/issues/comments/$id"
            echo "Deleted top-level comment $id"
          done

      - name: Generate GitHub App Token for Claude
        uses: actions/create-github-app-token@v1
        id: claude-app-token
        with:
          app-id: ${{ secrets.METABASE_BOT_APP_ID }}
          private-key: ${{ secrets.METABASE_BOT_APP_PRIVATE_KEY }}

      - name: Fetch Community Clojure Style Guide
        run: >-
          curl https://raw.githubusercontent.com/bbatsov/clojure-style-guide/refs/heads/master/README.adoc -o CLOJURE_STYLE_GUIDE.adoc

      - uses: anthropics/claude-code-action@v1
        timeout-minutes: 10
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          github_token: ${{ steps.claude-app-token.outputs.token }}
          prompt: |
            REPO: ${{ github.repository }}
            PR NUMBER: ${{ github.event.pull_request.number }}

            Review this pull request with a focus on:

            - Compliance with project coding standards and conventions
            - Code quality and best practices
            - Clear and correct docstrings
            - Clear and correct comments explaining what the code is doing

            DO NOT post any comments confirming that something is correct or congratulating someone for following our
            guidelines -- only post comments for style violations or concerns.

            Follow additional guidelines in the "Code Review Guidelines" section of CLAUDE.md .

            Note: The PR branch is already checked out in the current working directory.

            Use `gh pr comment` for top-level feedback.
            Use `mcp__github_inline_comment__create_inline_comment` to highlight specific code issues.
            Only post GitHub comments - don't submit review text as messages.

          claude_args: |
            --allowedTools "mcp__github_inline_comment__create_inline_comment,Bash(gh pr comment:*),Bash(gh pr diff:*),Bash(gh pr view:*),ReadFile(CLOJURE_STYLE_GUIDE.adoc)"
