version: 2.1

########################################################################################################################
#                                                      EXECUTORS                                                       #
########################################################################################################################

executors:
  basic:
    working_directory: /home/circleci/metabase/metabase/
    docker:
      - image: alpine/git

  clojure:
    working_directory: /home/circleci/metabase/metabase/
    docker:
      - image: circleci/clojure:lein-2.8.1

  node:
    working_directory: /home/circleci/metabase/metabase/
    docker:
      # - image: circleci/node:7-browsers
      - image: circleci/clojure:lein-2.8.1-node-browsers

  clojure-and-node:
    working_directory: /home/circleci/metabase/metabase/
    docker:
      - image: circleci/clojure:lein-2.8.1-node-browsers

  # This is a special image that is based on clojure-and-node but includes extras like gettext and the Clojure CLI
  # tools. See https://github.com/metabase/metabase-docker-ci for more information. You shouldn't use this image
  # unless you need the extra stuff -- because it's not an official Circle image, the extra layers won't get cached
  # and it might take longer to spin this up.
  metabase-ci:
    working_directory: /home/circleci/metabase/metabase/
    docker:
      - image: metabase/ci:2020-11-30

  # Java 11 tests also test Metabase with the at-rest encryption enabled. See
  # https://metabase.com/docs/latest/operations-guide/encrypting-database-details-at-rest.html for an explanation of
  # what this means.
  java-11:
    working_directory: /home/circleci/metabase/metabase/
    docker:
      - image: circleci/clojure:openjdk-11-lein-2.8.1
        environment:
          MB_ENCRYPTION_SECRET_KEY: Orw0AAyzkO/kPTLJRxiyKoBHXa/d6ZcO+p+gpZO/wSQ=

  postgres-9-6:
    working_directory: /home/circleci/metabase/metabase/
    docker:
      - image: circleci/clojure:lein-2.8.1
        environment:
          MB_DB_TYPE: postgres
          MB_DB_PORT: 5432
          MB_DB_HOST: localhost
          MB_DB_DBNAME: circle_test
          MB_DB_USER: circle_test
          MB_POSTGRESQL_TEST_USER: circle_test
      - image: circleci/postgres:9.6-alpine
        environment:
          POSTGRES_USER: circle_test
          POSTGRES_DB: circle_test

  postgres-latest:
    working_directory: /home/circleci/metabase/metabase/
    docker:
      - image: circleci/clojure:lein-2.8.1
        environment:
          MB_DB_TYPE: postgres
          MB_DB_PORT: 5432
          MB_DB_HOST: localhost
          MB_DB_DBNAME: metabase_test
          MB_DB_USER: metabase_test
          MB_POSTGRESQL_TEST_USER: metabase_test
      - image: postgres:latest
        environment:
          POSTGRES_USER: metabase_test
          POSTGRES_DB: metabase_test
          POSTGRES_HOST_AUTH_METHOD: trust

  mysql-5-7:
    working_directory: /home/circleci/metabase/metabase/
    docker:
      - image: circleci/clojure:lein-2.8.1
        environment:
          MB_DB_TYPE: mysql
          MB_DB_HOST: localhost
          MB_DB_PORT: 3306
          MB_DB_DBNAME: circle_test
          MB_DB_USER: root
          MB_MYSQL_TEST_USER: root
      - image: circleci/mysql:5.7.23

  mysql-latest:
    working_directory: /home/circleci/metabase/metabase/
    docker:
      - image: circleci/clojure:lein-2.8.1
        environment:
          MB_DB_TYPE: mysql
          MB_DB_HOST: localhost
          MB_DB_PORT: 3306
          MB_DB_DBNAME: circle_test
          MB_DB_USER: root
          MB_MYSQL_TEST_USER: root
      - image: circleci/mysql:latest

  mariadb-10-2:
    working_directory: /home/circleci/metabase/metabase/
    docker:
      - image: circleci/clojure:lein-2.8.1
        environment:
          MB_DB_TYPE: mysql
          MB_DB_HOST: localhost
          MB_DB_PORT: 3306
          MB_DB_DBNAME: circle_test
          MB_DB_USER: root
          MB_MYSQL_TEST_USER: root
      - image: circleci/mariadb:10.2.23

  mariadb-latest:
    working_directory: /home/circleci/metabase/metabase/
    docker:
      - image: circleci/clojure:lein-2.8.1
        environment:
          MB_DB_TYPE: mysql
          MB_DB_HOST: localhost
          MB_DB_PORT: 3306
          MB_DB_DBNAME: metabase_test
          MB_DB_USER: root
          MB_MYSQL_TEST_USER: root
      - image: mariadb:latest
        environment:
          MYSQL_DATABASE: metabase_test
          MYSQL_USER: root
          MYSQL_ALLOW_EMPTY_PASSWORD: yes

  mongo:
     working_directory: /home/circleci/metabase/metabase/
     docker:
       - image: circleci/clojure:lein-2.8.1
       - image: circleci/mongo:4.0

  presto:
    working_directory: /home/circleci/metabase/metabase/
    docker:
      - image: circleci/clojure:lein-2.8.1
      - image: metabase/presto-mb-ci
        environment:
          JAVA_TOOL_OPTIONS: "-Xmx2g"

  sparksql:
    working_directory: /home/circleci/metabase/metabase/
    docker:
      - image: circleci/clojure:lein-2.8.1
      - image: metabase/spark:2.1.1

  vertica:
    working_directory: /home/circleci/metabase/metabase/
    docker:
      - image: circleci/clojure:lein-2.8.1
      - image: sumitchawla/vertica

  sqlserver:
    working_directory: /home/circleci/metabase/metabase/
    docker:
      - image: circleci/clojure:lein-2.8.1
        environment:
          MB_SQLSERVER_TEST_HOST: localhost
          MB_SQLSERVER_TEST_PASSWORD: 'P@ssw0rd'
          MB_SQLSERVER_TEST_USER: SA
      - image: mcr.microsoft.com/mssql/server:2017-latest
        environment:
          ACCEPT_EULA: Y
          SA_PASSWORD: 'P@ssw0rd'

  fe-mongo-4:
    working_directory: /home/circleci/metabase/metabase/
    docker:
      - image: circleci/clojure:lein-2.8.1-node-browsers
      - image: metabase/qa-databases:mongo-sample-4.0

  fe-postgres-12:
    working_directory: /home/circleci/metabase/metabase/
    docker:
      - image: circleci/clojure:lein-2.8.1-node-browsers
      - image: metabase/qa-databases:postgres-sample-12

  fe-mysql-8:
    working_directory: /home/circleci/metabase/metabase/
    docker:
      - image: circleci/clojure:lein-2.8.1-node-browsers
      - image: metabase/qa-databases:mysql-sample-8

########################################################################################################################
#                                                       COMMANDS                                                       #
########################################################################################################################

# `default_parameters` isn't a key that CircleCI uses, but this form lets us reuse parameter definitions
default_parameters: &Params
  edition:
    type: string
    default: "oss"

commands:
  attach-workspace:
    steps:
      - attach_workspace:
          at: /home/circleci/

  restore-be-deps-cache:
    steps:
      - restore_cache:
          keys:
            - be-deps-v4-{{ checksum "project.clj" }}
            - be-deps-v4-

  restore-fe-deps-cache:
    steps:
      - restore_cache:
          keys:
            - fe-deps-v4-{{ checksum "yarn.lock" }}
            - fe-deps-v4-

  run-yarn-command:
    parameters:
      command-name:
        type: string
      command:
        type: string
      before-steps:
        type: steps
        default: []
    steps:
      - attach-workspace
      - restore-fe-deps-cache
      - steps: << parameters.before-steps >>
      - run:
          name: << parameters.command-name >>
          command: yarn << parameters.command >>
          no_output_timeout: 10m

  wait-for-port:
    parameters:
      port:
        type: integer
    steps:
      - run:
          name: Wait for port << parameters.port >> to be ready
          command: >
            while ! nc -z localhost << parameters.port >>; do sleep 0.1; done
          no_output_timeout: 5m

  fetch-jdbc-driver:
    parameters:
      source:
        type: string
      dest:
        type: string
      driver:
        type: string
    steps:
      - run:
          name: Make plugins dir
          command: mkdir /home/circleci/metabase/metabase/plugins
      - run:
          name: Download JDBC driver JAR << parameters.dest >>
          command: >
            /home/circleci/metabase/metabase/.circleci/skip-driver-tests.sh << parameters.driver >> ||
            wget --output-document=plugins/<< parameters.dest >> ${<< parameters.source >>}
          no_output_timeout: 5m

jobs:

########################################################################################################################
#                                                    CHECKOUT ETC.                                                     #
########################################################################################################################

  checkout:
    executor: basic
    steps:
      - restore_cache:
          keys:
            - source-{{ .Branch }}-{{ .Revision }}
            - source-{{ .Branch }}
            - source-
      - checkout
      - save_cache:
          key: source-{{ .Branch }}-{{ .Revision }}
          paths:
            - .git
      # The basic idea here is to generate a file with checksums for all the backend source files, and save it as
      # `./backend-checksums.txt`. Then we'll use the checksum of those files for uberjar caching and for determining
      # whether we need to run driver tests again; thus we can reuse the same uberjar for integration tests across any
      # build where the backend files are the same
      - run:
          name: Generate checksums of all backend source files to use as cache key
          command: >
            for file in `find . -type f -name '*.clj' | sort`;
              do echo `md5sum $file` >> backend-checksums.txt;
            done;
            echo `md5sum project.clj` >> backend-checksums.txt
      # Do the same for the frontend
      - run:
          name: Generate checksums of all frontend source files to use as Uberjar cache key
          command: >
            for file in `find ./frontend ./enterpise/frontend -type f | sort`;
              do echo `md5sum $file` >> frontend-checksums.txt;
            done;
            echo `md5sum yarn.lock` >> frontend-checksums.txt
            echo `md5sum webpack.config.js` >> frontend-checksums.txt
      # As well as driver modules (database drivers) -- used only for caching the built drivers
      - run:
          name: Generate checksums of all driver module source files to use as cache key
          command: >
            for file in `find ./modules -type f -name '*.clj' -or -name '*.yaml' | sort`;
              do echo `md5sum $file` >> modules-checksums.txt;
            done;
      - run:
          name: Save last git commit message
          command: git log -1 > commit.txt
      - run:
          name: Remove .git directory (not needed for tests)
          command: rm -rf /home/circleci/metabase/metabase/.git
      - run:
          name: Remove ./OSX directory (not needed for tests)
          command: rm -rf /home/circleci/metabase/metabase/OSX
      - persist_to_workspace:
          root: /home/circleci/
          paths:
            - metabase/metabase

  yaml-linter:
    executor: node
    steps:
      - run-yarn-command:
          command-name: Lint YAML files
          command: lint-yaml `find resources -name '*.yaml'`

  verify-i18n-files:
    executor: metabase-ci
    steps:
      - attach-workspace
      - restore-fe-deps-cache
      - run:
          name: Check i18n tags/make sure template can be built
          # fix OOM when running -- see https://stackoverflow.com/a/59572966/1198455
          # without this option, sometimes this step will fail with an OOM error.
          command: NODE_OPTIONS='--max-old-space-size=2048' ./bin/i18n/update-translation-template
          no_output_timeout: 2m
      - run:
          name: Verify i18n translations (.po files)
          command: ./bin/i18n/build-translation-resources
          no_output_timeout: 2m


########################################################################################################################
#                                                       BACKEND                                                        #
########################################################################################################################

  be-deps:
    executor: clojure
    parameters:
      <<: *Params
    steps:
      - attach-workspace
      - restore-be-deps-cache
      - run: lein with-profile +include-all-drivers,+cloverage,+junit,+<< parameters.edition >> deps
      - save_cache:
          key: be-deps-v4-{{ checksum "project.clj" }}
          paths:
            - /home/circleci/.m2

  lein:
    parameters:
      e:
        type: executor
        default: clojure
      before-steps:
        type: steps
        default: []
      lein-command:
        type: string
      after-steps:
        type: steps
        default: []
      <<: *Params
    executor: << parameters.e >>
    steps:
      - attach-workspace
      - restore-be-deps-cache
      - steps: << parameters.before-steps >>
      - run:
          command: lein with-profile +ci,+<< parameters.edition >> << parameters.lein-command >>
          no_output_timeout: 5m
      - steps: << parameters.after-steps >>
      - store_test_results:
          path: /home/circleci/metabase/metabase/target/junit

  be-linter-reflection-warnings:
    executor: clojure
    steps:
      - attach-workspace
      - restore-be-deps-cache
      - run:
          name: Run reflection warnings checker
          command: ./bin/reflection-linter
          no_output_timeout: 5m

  test-driver:
    parameters:
      e:
        type: executor
        default: clojure
      driver:
        type: string
      timeout:
        type: string
        default: 5m
      before-steps:
        type: steps
        default: []
      description:
        type: string
        default: ""
    executor: << parameters.e >>
    steps:
      - attach-workspace
      - restore-be-deps-cache
      - steps: << parameters.before-steps >>
      # If we run driver tests, and they pass, we'll create a dummy file called DRIVER.success and then cache that
      # with the key driver-tests-DRIVER-BACKEND_CHECKSUM
      #
      # Next time we run driver tests, we'll try to restore the cache with the key; if the dummy success file is
      # present, we'll know that tests passed given the current backend source files and that we can skip tests. If
      # the file isn't present, we'll know we need to run tests
      - restore_cache:
          keys:
            - driver-tests-<< parameters.driver >>-{{ checksum "./backend-checksums.txt" }}
      - run:
          name: Test << parameters.driver >> driver << parameters.description >>
          environment:
            DRIVERS: h2,<< parameters.driver >>
            MB_EDITION: ee
          command: >
            /home/circleci/metabase/metabase/.circleci/skip-driver-tests.sh << parameters.driver >> ||
            ( lein with-profile +ci,+junit,+$MB_EDITION test &&
              touch /home/circleci/metabase/metabase/<< parameters.driver >>.success )
          no_output_timeout: << parameters.timeout >>
      - save_cache:
          key: driver-tests-<< parameters.driver >>-{{ checksum "./backend-checksums.txt" }}
          paths:
            - /home/circleci/metabase/metabase/<< parameters.driver >>.success
      - store_test_results:
          path: /home/circleci/metabase/metabase/target/junit

  test-migrate-from-h2:
    parameters:
      e:
        type: executor
      db-type:
        type: string
      <<: *Params
    executor: << parameters.e >>
    steps:
      - attach-workspace
      - restore-be-deps-cache
      # Similar to what we do with driver tests, if these tests have passed previously with identical backend code
      # there's no point in running them again. When the tests pass, create a dummy file called
      # load-and-dump.DB_TYPE.success and cache it using the backend checksums. If that file exists next time around,
      # we can skip the tests
      - restore_cache:
          keys:
            - load-and-dump-v1-<< parameters.db-type >>-{{ checksum "./backend-checksums.txt" }}-{{ checksum "./bin/test-load-and-dump.sh" }}
      - run:
          name: Test migrating from H2 -> << parameters.db-type >> -> H2
          environment:
            MB_DB_TYPE: << parameters.db-type >>
            MB_DB_HOST: localhost
            MB_EDITION: << parameters.edition >>
          command: >
            if [ -f "/home/circleci/metabase/metabase/load-and-dump.<< parameters.db-type >>.success" ]; then
                ./bin/test-load-and-dump.sh &&
                touch /home/circleci/metabase/metabase/load-and-dump.<< parameters.db-type >>.success
            fi
          no_output_timeout: 5m
      - save_cache:
          key: load-and-dump-v1-<< parameters.db-type >>-{{ checksum "./backend-checksums.txt" }}-{{ checksum "./bin/test-load-and-dump.sh" }}
          paths:
            - /home/circleci/metabase/metabase/load-and-dump.<< parameters.db-type >>.success

  test-build-scripts:
    executor: metabase-ci
    steps:
      - attach-workspace
      - restore-be-deps-cache
      - run:
          name: Run metabuild-common build script tests
          command: >
            cd /home/circleci/metabase/metabase/bin/common && clojure -M:test
          no_output_timeout: 5m
      - run:
          name: Run build-drivers build script tests
          command: >
            cd /home/circleci/metabase/metabase/bin/build-drivers && clojure -M:test
          no_output_timeout: 5m
      - run:
          name: Run build-mb build script tests
          command: >
            cd /home/circleci/metabase/metabase/bin/build-mb && clojure -M:test
          no_output_timeout: 5m
      - run:
          name: Run release script tests
          command: >
            cd /home/circleci/metabase/metabase/bin/release && clojure -M:test
          no_output_timeout: 5m


########################################################################################################################
#                                                       FRONTEND                                                       #
########################################################################################################################

  fe-deps:
    executor: node
    steps:
      - attach-workspace
      - restore-fe-deps-cache
      - run:
          name: Run yarn to install deps
          command: >
            SAUCE_CONNECT_DOWNLOAD_ON_INSTALL=true yarn;
          no_output_timeout: 5m
      - save_cache:
          key: fe-deps-v4-{{ checksum "yarn.lock" }}
          paths:
            - /home/circleci/.yarn
            - /home/circleci/.yarn-cache
            - /home/circleci/metabase/metabase/node_modules
            - /home/circleci/.cache/Cypress

  fe-linter-eslint:
    executor: node
    steps:
      - run-yarn-command:
          command-name: Run ESLint linter
          command: lint-eslint

  fe-linter-prettier:
    executor: node
    steps:
      - run-yarn-command:
          command-name: Run Prettier formatting linter
          command: lint-prettier

  fe-linter-flow:
    executor: node
    steps:
      - run-yarn-command:
          command-name: Run Flow type checker
          command: lint-flow

  fe-linter-docs-links:
    executor: node
    steps:
      - run-yarn-command:
          command-name: Run docs links checker
          command: lint-docs-links

  fe-tests-unit:
    executor: node
    steps:
      - run-yarn-command:
          command-name: Run frontend unit tests
          command: run test-unit

  fe-tests-integration:
    executor: node
    steps:
      - run-yarn-command:
          command-name: Run frontend integration tests
          command: run test-integration

  fe-tests-timezones:
    executor: node
    steps:
      - run-yarn-command:
          command-name: Run frontend timezone tests
          command: run test-timezones

  # Unlike the other build-uberjar steps, this step should be run once overall and the results can be shared between
  # OSS and EE uberjars.
  build-uberjar-drivers:
    executor: metabase-ci
    steps:
      - attach-workspace
      - restore-be-deps-cache
      # restore the local maven installation of Metabase which is needed for building drivers
      - restore_cache:
          keys:
            - metabase-core-{{ checksum "./backend-checksums.txt" }}
      # restore already-built drivers
      - restore_cache:
          keys:
            - drivers-v5-{{ checksum "./modules-checksums.txt" }}-{{ checksum "./backend-checksums.txt" }}
            - drivers-v5-{{ checksum "./modules-checksums.txt" }}
            - drivers-v5-
      - run:
          name: Build drivers if needed
          command: ./bin/build-drivers.sh
          no_output_timeout: 5m
      # Cache the maven installation of metabase-core
      - save_cache:
          key: metabase-core-{{ checksum "./backend-checksums.txt" }}
          paths:
            - /home/circleci/.m2/repository/metabase-core
      # Cache the built drivers
      - save_cache:
          key: drivers-v5-{{ checksum "./modules-checksums.txt" }}-{{ checksum "./backend-checksums.txt" }}
          paths:
            - /home/circleci/metabase/metabase/modules/drivers/bigquery/target
            - /home/circleci/metabase/metabase/modules/drivers/druid/target
            - /home/circleci/metabase/metabase/modules/drivers/google/target
            - /home/circleci/metabase/metabase/modules/drivers/googleanalytics/target
            - /home/circleci/metabase/metabase/modules/drivers/mongo/target
            - /home/circleci/metabase/metabase/modules/drivers/oracle/target
            - /home/circleci/metabase/metabase/modules/drivers/presto/target
            - /home/circleci/metabase/metabase/modules/drivers/redshift/target
            - /home/circleci/metabase/metabase/modules/drivers/snowflake/target
            - /home/circleci/metabase/metabase/modules/drivers/sparksql/target
            - /home/circleci/metabase/metabase/modules/drivers/sqlite/target
            - /home/circleci/metabase/metabase/modules/drivers/sqlserver/target
            - /home/circleci/metabase/metabase/modules/drivers/vertica/target

  # Build the frontend client. parameters.edition determines whether we build the OSS or EE version.
  build-uberjar-frontend:
    parameters:
      <<: *Params
    executor: metabase-ci
    steps:
      - attach-workspace
      - restore-fe-deps-cache
      # restore already-built frontend
      - restore_cache:
          keys:
            - frontend-v4-{{ checksum "./frontend-checksums.txt" }}
      - run:
          name: Build frontend if needed
          environment:
            MB_EDITION: << parameters.edition >>
          command: >
            if [ ! -f './resources/frontend_client/index.html' ];
              then ./bin/build version frontend;
            fi
          no_output_timeout: 5m
      # Cache the built frontend
      - save_cache:
          key: frontend-v4-{{ checksum "./frontend-checksums.txt" }}
          paths:
            - /home/circleci/metabase/metabase/resources/frontend_client

  # Build the uberjar. parmeters.edition determines whether we build the OSS or EE version.
  build-uberjar:
    parameters:
      <<: *Params
    executor: metabase-ci
    steps:
      - attach-workspace
      - restore-be-deps-cache
      # restore drivers & FE client build in previous steps.
      - restore_cache:
          keys:
            - drivers-v5-{{ checksum "./modules-checksums.txt" }}-{{ checksum "./backend-checksums.txt" }}
      - restore_cache:
          keys:
            - frontend-v4-{{ checksum "./frontend-checksums.txt" }}
      # restore already-built uberjar
      - restore_cache:
          keys:
            - uberjar-v4-<< parameters.edition >>-{{ checksum "./backend-checksums.txt" }}-{{ checksum "./frontend-checksums.txt" }}
      - run:
          name: Build uberjar if needed
          environment:
            MB_EDITION: << parameters.edition >>
          command: >
            if [ ! -f './target/uberjar/metabase.jar' ]; then
              # INTERACTIVE=false will tell the clojure build scripts not to do interactive retries etc.
              export INTERACTIVE=false;
              ./bin/build version drivers uberjar;
            fi
          no_output_timeout: 10m
      - store_artifacts:
          path: /home/circleci/metabase/metabase/target/uberjar/metabase.jar
      - store_artifacts:
          path: /home/circleci/metabase/metabase/resources/version.properties
      # Cache the built uberjar & version.properties
      - save_cache:
          key: uberjar-v4-<< parameters.edition >>-{{ checksum "./backend-checksums.txt" }}-{{ checksum "./frontend-checksums.txt" }}
          paths:
            - /home/circleci/metabase/metabase/target/uberjar/metabase.jar
            - /home/circleci/metabase/metabase/resources/version.properties

  fe-tests-cypress:
    parameters:
      e:
        type: executor
        default: clojure-and-node
      cypress-group:
        type: string
      only-single-database:
        type: boolean
        default: false
      test-files-location:
        type: string
        default: ""
      driver:
        type: string
        default: ""
      # Not actually used here, but it's used in the workflow so we can use a matrix to define multiple test nodes
      node:
        type: string
        default: ""
      <<: *Params
    executor: << parameters.e >>
    environment:
      MB_EDITION: << parameters.edition >>
      CYPRESS_GROUP:  << parameters.cypress-group >>
      DISPLAY: ""
    steps:
      - run-yarn-command:
          command-name: Run Cypress tests
          command: run test-cypress-no-build <<# parameters.only-single-database >> --testFiles << parameters.test-files-location >> <</ parameters.only-single-database >>
          before-steps:
            - restore_cache:
                keys:
                  - uberjar-v4-<< parameters.edition >>-{{ checksum "./backend-checksums.txt" }}-{{ checksum "./frontend-checksums.txt" }}
      - store_artifacts:
          path: /home/circleci/metabase/metabase/cypress
      - store_test_results:
          path: cypress/results

  fe-tests-cypress-smoketest:
    parameters:
      e:
        type: executor
        default: clojure-and-node
      cypress-group:
        type: string
    executor: << parameters.e >>
    environment:
      CYPRESS_GROUP: << parameters.cypress-group >>
      DISPLAY: ""
    steps:
      - run-yarn-command:
          command-name: Run Cypress tests
          command: run test-cypress-smoketest
          before-steps:
            - restore_cache:
                keys:
                  - uberjar-oss-{{ checksum "./backend-checksums.txt" }}
            - run:
                name: Generate version file
                command: ./bin/build version
      - store_artifacts:
          path: /home/circleci/metabase/metabase/cypress
      - store_test_results:
          path: cypress/results

########################################################################################################################
#                                                   DEPLOYMENT, ETC.                                                   #
########################################################################################################################

  deploy-master:
    executor: clojure
    steps:
      - attach-workspace
      - run: ./bin/deploy-webhook $DEPLOY_WEBHOOK


########################################################################################################################
#                                                      WORKFLOWS                                                       #
########################################################################################################################

# `default_matrix` isn't a key that CircleCI uses, but this form lets us reuse the matrix: block
default_matrix: &Matrix
  matrix:
    parameters:
      edition: ["ee", "oss"]

workflows:
  version: 2
  build:
    jobs:
      - checkout

      - yaml-linter:
          requires:
            - fe-deps

      - verify-i18n-files:
          requires:
            - fe-deps

      - be-deps:
          requires:
            - checkout

      - lein:
          name: be-tests-<< matrix.edition >>
          requires:
            - be-deps
          lein-command: with-profile +junit test
          <<: *Matrix

      - lein:
          name: be-tests-java-11-<< matrix.edition >>
          requires:
            - be-deps
          e: java-11
          lein-command: with-profile +junit test
          <<: *Matrix

      - lein:
          name: be-linter-eastwood
          requires:
            - be-deps
          lein-command: eastwood

      - lein:
          name: be-linter-docstring-checker
          requires:
            - be-deps
          lein-command: docstring-checker

      - lein:
          name: be-linter-namespace-decls
          requires:
            - be-deps
          lein-command: check-namespace-decls

      - lein:
          name: be-linter-bikeshed
          requires:
            - be-deps
          lein-command: bikeshed

      - lein:
          name: be-linter-cloverage
          requires:
            - be-deps
          lein-command: cloverage --codecov
          after-steps:
            - run:
                name: Upload code coverage to codecov.io
                command: bash <(curl -s https://codecov.io/bash)

      - be-linter-reflection-warnings:
          requires:
            - be-deps

      - test-driver:
          name: be-tests-bigquery-ee
          requires:
            - be-tests-ee
          driver: bigquery

      - test-driver:
          name: be-tests-druid-ee
          requires:
            - be-tests-ee
          driver: druid

      - test-driver:
          name: be-tests-googleanalytics-ee
          requires:
            - be-tests-ee
          driver: googleanalytics

      - test-driver:
          name: be-tests-mongo-ee
          requires:
            - be-tests-ee
          e: mongo
          driver: mongo

      - test-driver:
          name: be-tests-mysql-ee
          description: "(MySQL 5.7)"
          requires:
            - be-tests-ee
          e:
            name: mysql-5-7
          driver: mysql

      - test-driver:
          name: be-tests-mysql-latest-ee
          description: "(MySQL latest)"
          requires:
            - be-tests-ee
          e:
            name: mysql-latest
          driver: mysql

      - test-driver:
          name: be-tests-mariadb-ee
          description: "(MariaDB 10.2)"
          requires:
            - be-tests-ee
          e:
            name: mariadb-10-2
          driver: mysql

      - test-driver:
          name: be-tests-mariadb-latest-ee
          description: "(MariaDB latest)"
          requires:
            - be-tests-ee
          e:
            name: mariadb-latest
          driver: mysql

      - test-driver:
          name: be-tests-oracle-ee
          requires:
            - be-tests-ee
          before-steps:
            - fetch-jdbc-driver:
                source: ORACLE_JDBC_JAR
                dest: ojdbc8.jar
                driver: oracle
          driver: oracle

      - test-driver:
          name: be-tests-postgres-ee
          description: "(9.6)"
          requires:
            - be-tests-ee
          e: postgres-9-6
          driver: postgres

      - test-driver:
          name: be-tests-postgres-latest-ee
          description: "(Latest)"
          requires:
            - be-tests-ee
          e: postgres-latest
          driver: postgres

      - test-driver:
          name: be-tests-presto-ee
          requires:
            - be-tests-ee
          e: presto
          before-steps:
            - wait-for-port:
                port: 8080
          driver: presto

      - test-driver:
          name: be-tests-redshift-ee
          requires:
            - be-tests-ee
          driver: redshift
          timeout: 10m

      - test-driver:
          name: be-tests-snowflake-ee
          requires:
            - be-tests-ee
          driver: snowflake
          timeout: 15m

      - test-driver:
          name: be-tests-sparksql-ee
          requires:
            - be-tests-ee
          e: sparksql
          before-steps:
            - wait-for-port:
                port: 10000
          driver: sparksql

      - test-driver:
          name: be-tests-sqlite-ee
          requires:
            - be-tests-ee
          driver: sqlite

      - test-driver:
          name: be-tests-sqlserver-ee
          requires:
            - be-tests-ee
          e: sqlserver
          driver: sqlserver

      - test-driver:
          name: be-tests-vertica-ee
          requires:
            - be-tests-ee
          e: vertica
          before-steps:
            - fetch-jdbc-driver:
                source: VERTICA_JDBC_JAR
                dest: vertica-jdbc-7.1.2-0.jar
                driver: vertica
          driver: vertica

      - test-migrate-from-h2:
          name: be-tests-migrate-to-postgres-<< matrix.edition >>
          requires:
            - be-tests-<< matrix.edition >>
          e: postgres-9-6
          db-type: postgres
          <<: *Matrix

      - test-migrate-from-h2:
          name: be-tests-migrate-to-mysql-<< matrix.edition >>
          requires:
            - be-tests-<< matrix.edition >>
          e: mysql-5-7
          db-type: mysql
          <<: *Matrix

      - test-build-scripts:
          requires:
            - be-deps

      - build-uberjar-drivers:
          requires:
            - be-deps

      - build-uberjar-frontend:
          name: build-uberjar-frontend-<< matrix.edition >>
          requires:
            - fe-deps
          <<: *Matrix

      - build-uberjar:
          name: build-uberjar-<< matrix.edition >>
          requires:
            - build-uberjar-drivers
            - build-uberjar-frontend-<< matrix.edition >>
          <<: *Matrix

      - fe-deps:
          requires:
            - checkout
      - fe-linter-eslint:
          requires:
            - fe-deps
      - fe-linter-prettier:
          requires:
            - fe-deps
      - fe-linter-flow:
          requires:
            - fe-deps
      - fe-linter-docs-links:
          requires:
            - fe-deps
      - fe-tests-unit:
          requires:
            - fe-deps
      - fe-tests-integration:
          requires:
            - fe-deps
      - fe-tests-timezones:
          requires:
            - fe-deps

      - fe-tests-cypress:
          matrix:
            parameters:
              node: ["1", "2", "3", "4"]
              edition: ["ee", "oss"]
          name: fe-tests-cypress-<< matrix.node >>-<< matrix.edition >>
          requires:
            - build-uberjar-<< matrix.edition >>
          cypress-group: "default"

      - fe-tests-cypress:
          name: fe-tests-cypress-mongo-4-<< matrix.edition >>
          requires:
            - build-uberjar-<< matrix.edition >>
          e: fe-mongo-4
          cypress-group: "mongo"
          only-single-database: true
          test-files-location: frontend/test/metabase-db/mongo
          <<: *Matrix

      - fe-tests-cypress:
          name: fe-tests-cypress-postgres-12-<< matrix.edition >>
          requires:
            - build-uberjar-<< matrix.edition >>
          e: fe-postgres-12
          cypress-group: "postgres"
          only-single-database: true
          test-files-location: frontend/test/metabase-db/postgres
          <<: *Matrix

      - fe-tests-cypress:
          name: fe-tests-cypres-mysql-8-<< matrix.edition >>
          requires:
            - build-uberjar-<< matrix.edition >>
          e: fe-mysql-8
          cypress-group: "mysql"
          only-single-database: true
          test-files-location: frontend/test/metabase-db/mysql
          <<: *Matrix

  nightly:
    triggers:
      - schedule:
          cron: "0 9 * * *"
          filters:
            branches:
              only:
                - master
                - /release-*/
    jobs:
      - checkout

      - be-deps:
          requires:
            - checkout

      - fe-deps:
          requires:
            - checkout

      # Build the OSS version of the uberjar.
      - build-uberjar-drivers:
          requires:
            - be-deps
      - build-uberjar-frontend:
          requires:
            - fe-deps
      - build-uberjar:
          requires:
            - build-uberjar-drivers
            - build-uberjar-frontend

      - fe-tests-cypress-smoketest:
          name: fe-tests-cypress-smoketest
          requires:
            - build-uberjar
          cypress-group: "default"
