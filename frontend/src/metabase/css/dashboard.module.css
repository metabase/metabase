/* Fullscreen mode */
.Dashboard.DashboardFullscreen {
  min-height: 100vh;
  height: auto;
}

/* Night mode */
.Dashboard.DashboardNight {
  background-color: var(--color-bg-black);
}

.Dashboard.DashboardNight .Card {
  color: var(--color-text-white);
}

.Dashboard.DashboardFullscreen .fullscreenNormalText {
  color: var(--color-text-dark);
  transition: color 1s linear;
}

.Dashboard.DashboardNight.DashboardFullscreen .fullscreenNightText {
  color: color-mod(var(--color-text-white) alpha(-14%));
  transition: color 1s linear;
}

.Dashboard.DashboardNight .DashCard .Card svg text {
  fill: color-mod(var(--color-text-white) alpha(-14%)) !important;
  stroke: none !important;
}

.Dashboard.DashboardNight
  :global(.enable-dots-onhover .dc-tooltip circle.dot:hover),
.Dashboard.DashboardNight :global(.enable-dots .dc-tooltip circle.dot) {
  fill: currentColor;
}

.Dashboard.DashboardNight :global(.bg-light) {
  background-color: var(--color-bg-black);
}

.Dashboard.DashboardNight :global(.bg-medium) {
  background-color: #596269;
}

.Dashboard.DashboardNight :global(.text-dark) {
  color: var(--color-bg-light);
}

.Dashboard.DashboardNight :global(.border-top),
.Dashboard.DashboardNight :global(.border-left),
.Dashboard.DashboardNight :global(.border-bottom),
.Dashboard.DashboardNight :global(.border-right) {
  border-color: var(--color-bg-dark);
}

/* Night mode transition */
.Dashboard.DashboardFullscreen,
.Dashboard.DashboardFullscreen .DashCard .Card {
  transition: background-color 1s linear, border 1s linear;
}

:global(.Dash--editing) {
  margin-top: 1.5em;
}

:global(.Dash--editing) .DashCard .Card {
  transition: border 0.3s, background-color 0.3s;
}

:global(.Dash--editing .Card-title:first-of-type) {
  margin-top: 0.5rem;
}

:global(.Dash--editing .Card-title) {
  pointer-events: none;
}

:global(.Dash--editing .PinMap) {
  /* allow map to pan. need to stopPropagation in PinMap to prevent weird dragging interaction */
  pointer-events: all;
}

:global(.PinMapUpdateButton--disabled) {
  pointer-events: none;
  color: var(--color-text-light);
}

:global(.Dash--editing) .DashCard:global(.react-draggable-dragging) .Card {
  box-shadow: 3px 3px 8px var(--color-shadow);
}

:global(.BrandColorResizeHandle .react-resizable-handle::after) {
  border-color: var(--color-brand) !important;
}

:global(.Dash--editing) .DashCard:global(.react-draggable-dragging),
:global(.Dash--editing) .DashCard:global(.react-resizable-resizing) {
  z-index: 3;
}

:global(.Dash--editing) .DashCard:global(.react-draggable-dragging) .Card,
:global(.Dash--editing) .DashCard:global(.react-resizable-resizing) .Card {
  background-color: var(--color-bg-medium) !important;
  border: 1px solid var(--color-brand);
}

:global(.Dash--editing) .DashCard :global(.Visualization-slow-spinner) {
  position: absolute;
  right: -2px;
  top: -2px;
}

:global(.Dash--editing) .DashCard:hover :global(.Visualization-slow-spinner) {
  opacity: 0;
  transition: opacity 0.15s linear;
}

:global(.Dash--editing) .DashCard {
  cursor: move;
}

:global(.Dash--editing) .DashCard :global(.react-resizable-handle) {
  position: absolute;
  width: 40px;
  height: 40px;
  bottom: 0;
  right: 0;
  z-index: 1; /* ensure the handle is above the card contents */

  /* overwrites the style coming from react-grid-layout */
  cursor: nwse-resize !important;
  background: none; /* hide default RGL's resize handle */
}

:global(.Dash--editing) .DashCard :global(.react-resizable-handle::after) {
  content: "";
  position: absolute;
  width: 8px;
  height: 8px;
  bottom: 6px;
  right: 6px;
  border-bottom: 2px solid var(--color-border);
  border-right: 2px solid var(--color-border);
  border-bottom-right-radius: 2px;
  transition: opacity 0.2s;
  opacity: 0.01;
}

:global(.Dash--editing)
  .DashCard
  :global(.react-resizable-handle:hover::after) {
  border-color: var(--color-border);
}

:global(.Dash--editing)
  .DashCard:hover
  :global(.react-resizable-handle::after) {
  opacity: 1;
}

:global(.Dash--editing)
  .DashCard:global(.react-draggable-dragging .react-resizable-handle::after),
:global(.Dash--editing)
  .DashCard:global(.react-resizable-resizing .react-resizable-handle::after) {
  opacity: 0.01;
}

:global(.Dash--editing .react-grid-placeholder) {
  z-index: 0;
  background-color: var(--color-bg-light) !important;
  transition: all 0.15s linear;
}

:global(.Modal.AddSeriesModal) {
  height: 80%;
  max-height: 600px;
  width: 80%;
  max-width: 1024px;
}

/* what for to print the dashboards */
@media print {
  header,
  nav {
    display: none;
  }

  /* improve label contrast */
  :global(.dc-chart .axis .tick text),
  :global(.dc-chart .x-axis-label),
  :global(.dc-chart .y-axis-label) {
    fill: var(--color-text-dark);
  }
}

@page {
  margin: 1cm;
}

/* when in night mode goal lines should be more visible */
.DashboardNight :global(.goal .line),
.DashboardNight :global(.trend .line) {
  stroke: white;
}

/* when in night mode code snippets should have a more readable background-color */
.DashboardNight pre code {
  background-color: color-mod(var(--color-bg-white) alpha(-86%));
}

.DashboardNight :global(.text-card-markdown code) {
  background-color: color-mod(var(--color-bg-white) alpha(-86%));
}

.Dashboard :global(text.value-label),
.Dashboard :global(text.value-label-white),
.Dashboard :global(.LineAreaBarChart .dc-chart .axis text) {
  font-size: 12px;
}

.ScalarValue {
  font-weight: 700;
  white-space: pre;
}

/*
 * Override d3 styles so the chart axis labels are selectable. See issue #17613
 */
:global(.dc-chart g.axis g.tick text) {
  pointer-events: all;
  user-select: auto;
}
