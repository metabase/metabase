name: Auto-backport
on:
  pull_request:
    types: [closed, labeled]

jobs:
  create-backport:
    if: |
      github.event.pull_request.merged == true && (
        (github.event.action == 'closed' && contains(join(github.event.pull_request.labels.*.name, ','), 'backport')) ||
        (github.event.action == 'labeled' && startsWith(github.event.label.name, 'backport'))
      )
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.METABASE_AUTOMATION_USER_TOKEN }}

      - id: get_backport_count
        name: Get backport count from label
        run: |
          if [[ "${{ github.event.action }}" == "labeled" ]]; then
            LABEL="${{ github.event.label.name }}"
          else
            # Find the backport-N label
            LABELS="${{ toJSON(github.event.pull_request.labels.*.name) }}"
            LABEL=$(echo $LABELS | jq -r '.[] | select(startswith("backport"))' | head -n 1)
          fi

          # Extract number from backport-N label, default to 1 if just "backport"
          if [[ $LABEL =~ backport-([0-9]+) ]]; then
            COUNT="${BASH_REMATCH[1]}"
          else
            COUNT="1"
          fi
          echo "count=$COUNT" >> $GITHUB_OUTPUT
        shell: bash

      - uses: ./.github/actions/find-squashed-commit
        name: Find commit
        id: find_commit
        with:
          pull-request-number: ${{ github.event.pull_request.number }}
          base-ref: ${{ github.event.pull_request.base.ref }}

      - uses: ./.github/actions/get-latest-release-branches
        name: Get latest release branches
        id: get_latest_release_branches
        with:
          count: ${{ steps.get_backport_count.outputs.count }}

      - id: create_backport_pull_requests
        name: Create backport pull requests
        run: |
          git config --global user.email "metabase-bot@metabase.com"
          git config --global user.name "Metabase bot"

          IFS=',' read -ra TARGET_BRANCHES <<< "${TARGET_BRANCHES}"

          HAS_CONFLICTS="false"
          BACKPORT_PRS=""

          for TARGET_BRANCH in "${TARGET_BRANCHES[@]}"; do
            BACKPORT_BRANCH="backport-$COMMIT-${TARGET_BRANCH}"

            # Checkout the target branch and create a new backport branch
            git checkout ${TARGET_BRANCH}
            git fetch --all
            git checkout -b ${BACKPORT_BRANCH}
            git cherry-pick ${COMMIT} || true

            CONFLICTS=$(git ls-files -u | wc -l)
            if [ "$CONFLICTS" -gt 0 ]; then
              git cherry-pick --abort
              echo "Could not cherry pick because of a conflict for ${TARGET_BRANCH}"
              HAS_CONFLICTS="true"

              # Add a shell script for resolving conflicts
              echo "git reset HEAD~1" > ./backport.sh
              echo "rm ./backport.sh" >> ./backport.sh
              echo "git cherry-pick ${COMMIT}" >> ./backport.sh
              echo "echo 'Resolve conflicts and force push this branch'" >> ./backport.sh
              chmod +x ./backport.sh
              git add ./backport.sh
              git commit -m "Add backport resolution script"

              PR_BODY=$(cat <<-END
              #${ORIGINAL_PULL_REQUEST_NUMBER}
              > [!IMPORTANT]
              > Manual conflict resolution is required.
              Checkout the branch and run \`./backport.sh\` script. Force push your changes after cherry-picking.
              END
              )
            else
              PR_BODY="#${ORIGINAL_PULL_REQUEST_NUMBER}"
            fi

            git push -u origin ${BACKPORT_BRANCH}

            BACKPORT_PR_URL=$(gh pr create --base "${TARGET_BRANCH}" --head "${BACKPORT_BRANCH}" --label "was-backported" --assignee "${GITHUB_ACTOR}" --title "ðŸ¤– backported \"${ORIGINAL_TITLE}\" to ${TARGET_BRANCH}" --body "${PR_BODY}")
            BACKPORT_PR_NUMBER=${BACKPORT_PR_URL##*/}

            if [ -z "$BACKPORT_PRS" ]; then
              BACKPORT_PRS="${BACKPORT_PR_NUMBER}"
            else
              BACKPORT_PRS="${BACKPORT_PRS},${BACKPORT_PR_NUMBER}"
            fi

            echo "Created PR #${BACKPORT_PR_NUMBER} for ${TARGET_BRANCH}"
          done

          echo "has-conflicts=${HAS_CONFLICTS}" >> $GITHUB_OUTPUT
          echo "backport_pr_numbers=${BACKPORT_PRS}" >> $GITHUB_OUTPUT

          git checkout master
        env:
          TARGET_BRANCHES: ${{ steps.get_latest_release_branches.outputs.branch-names }}
          ORIGINAL_PULL_REQUEST_NUMBER: ${{ github.event.pull_request.number }}
          ORIGINAL_TITLE: ${{ github.event.pull_request.title }}
          GITHUB_TOKEN: ${{ secrets.METABASE_AUTOMATION_USER_TOKEN }}
          COMMIT: ${{ steps.find_commit.outputs.commit }}

      - name: Auto approve backport PRs
        if: ${{ steps.create_backport_pull_requests.outputs.has-conflicts == 'false' }}
        run: |
          IFS=',' read -ra PR_NUMBERS <<< "${{ steps.create_backport_pull_requests.outputs.backport_pr_numbers }}"
          for PR_NUMBER in "${PR_NUMBERS[@]}"; do
            gh pr review "${PR_NUMBER}" --approve
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Enable Pull Request Automerge
        if: ${{ steps.create_backport_pull_requests.outputs.has-conflicts == 'false' }}
        run: |
          IFS=',' read -ra PR_NUMBERS <<< "${{ steps.create_backport_pull_requests.outputs.backport_pr_numbers }}"
          for PR_NUMBER in "${PR_NUMBERS[@]}"; do
            gh pr merge "${PR_NUMBER}" --auto --squash
          done
        env:
          GITHUB_TOKEN: ${{ secrets.METABASE_AUTOMATION_USER_TOKEN }}

      - uses: ./.github/actions/notify-pull-request
        if: ${{ steps.create_backport_pull_requests.outputs.has-conflicts == 'true' }}
        with:
          include-log: false
          message: Manual conflict resolution is required for some backports

      - uses: ./.github/actions/notify-pull-request
        if: ${{ failure() }}
        with:
          include-log: true
          message: Something went wrong while creating backports
