name: Get Docker Info
description: Determines Docker repository and tag based on branch and edition

inputs:
  branch:
    description: Branch name (defaults to current branch)
    required: false
    default: ${{ github.head_ref || github.ref_name }}
  edition:
    description: Edition (ee or oss)
    required: false
    default: ee
  owner:
    description: Repository owner (defaults to current repo owner)
    required: false
    default: ${{ github.repository_owner }}

outputs:
  repo:
    description: Docker repository name
    value: ${{ steps.docker-info.outputs.repo }}
  tag:
    description: Docker tag
    value: ${{ steps.docker-info.outputs.tag }}
  full_image:
    description: Full Docker image name (repo:tag)
    value: ${{ steps.docker-info.outputs.full_image }}
  editions:
    description: JSON array of editions to build
    value: ${{ steps.docker-info.outputs.editions }}

runs:
  using: "composite"
  steps:
    - name: Determine Docker info
      id: docker-info
      uses: actions/github-script@v7
      with:
        script: | # js
          const branch = '${{ inputs.branch }}';
          const edition = '${{ inputs.edition }}';
          const owner = '${{ inputs.owner }}';

          console.log(`Determining Docker info for branch: ${branch}, edition: ${edition}`);

          let repo, tag, editions;

          if (branch === 'master') {
            // Master builds both editions with specific repos
            editions = ['ee', 'oss'];
            tag = 'latest';

            if (edition === 'ee') {
              repo = `${owner}/metabase-enterprise-head`;
            } else {
              repo = `${owner}/metabase-head`;
            }
          } else {
            // All other branches only build EE to metabase-dev
            editions = ['ee'];
            tag = branch.replaceAll('/', '-'); // slashes make docker sad
            repo = `${owner}/metabase-dev`;
          }

          const fullImage = `${repo}:${tag}`;

          // Set outputs
          core.setOutput('repo', repo);
          core.setOutput('tag', tag);
          core.setOutput('full_image', fullImage);
          core.setOutput('editions', JSON.stringify(editions));

          console.log(`Docker image: ${fullImage}`);
          console.log(`Editions: ${JSON.stringify(editions)}`);
