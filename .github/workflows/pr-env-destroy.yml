name: CI for PR Review ENV Destroy
run-name: Destroying Dynamic PR Environment for ${{ github.ref_name }} by @${{ github.actor }}

on:
  workflow_call:

jobs:
  destroy_pr:
    runs-on: ubuntu-latest
    name: PR Review ENV Destroy
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Tailscale
        uses: tailscale/github-action@v2
        with:
          oauth-client-id: ${{ secrets.PR_ENV_TAILSCALE_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.PR_ENV_TAILSCALE_OAUTH_SECRET }}
          tags: tag:ci
          version: 1.50.1
          sha256sum: d9fe6b480fb5078f0aa57dace686898dda7e2a768884271159faa74846bfb576
      - name: Create OIDC Token
        id: create-oidc-token
        shell: bash
        run: |
          export OIDC_URL_WITH_AUDIENCE="$ACTIONS_ID_TOKEN_REQUEST_URL&audience=${{ secrets.PR_ENV_K8S_AUDIENCE }}"
          IDTOKEN=$(curl -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" -H "Accept: application/json; api-version=2.0" "$OIDC_URL_WITH_AUDIENCE" | jq -r .value)
          echo "::add-mask::${IDTOKEN}"
          echo "idToken=${IDTOKEN}" >>$GITHUB_OUTPUT
      - name: Setup Kube Context
        uses: azure/k8s-set-context@v2
        with:
          method: kubeconfig
          kubeconfig: |
            kind: Config
            apiVersion: v1
            current-context: default
            clusters:
            - name: default
              cluster:
                certificate-authority-data: ${{ secrets.PR_ENV_K8S_CERTIFICATE_AUTHORITY_DATA }}
                server: ${{ secrets.PR_ENV_K8S_SERVER }}
            users:
            - name: oidc-token
              user:
                token: ${{ steps.create-oidc-token.outputs.IDTOKEN }}
            contexts:
            - name: default
              context:
                cluster: default
                namespace: default
                user: oidc-token
      - name: Destroy PR Review ENV
        run: |
          kubectl delete metabase -n hosting-pr${{ github.event.number }} hosting-pr${{ github.event.number }}
          kubectl delete ns hosting-pr${{ github.event.number }}
      - name: Setup psql client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client
      - name: Drop app database if exists
        run: |
          PGPASSWORD='${{ secrets.PR_ENV_DB_PASSWORD }}' \
          psql \
          -h ${{ secrets.PR_ENV_DB_HOST }} \
          -U ${{ secrets.PR_ENV_DB_USER }} \
          -d ${{ secrets.PR_ENV_DB_NAME }} \
          -c "DROP DATABASE IF EXISTS hosting_pr${{ github.event.number }};"
