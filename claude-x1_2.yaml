steps:
  # Step 1: Transfer the source data to sandbox
  - lego: transfer
    source_database: 72
    source_table: gh_issue
    destination_database: 71
    destination_table: gh_issues_raw
    overwrite?: true

  # Step 2: Filter for bugs only
  - lego: transform
    database: 71
    table: bugs_only
    query: |
      SELECT *
      FROM gh_issues_raw
      WHERE is_bug = true

  # Step 3: Filter for closed bugs with valid closed_at timestamps
  - lego: transform
    database: 71
    table: closed_bugs
    query: |
      SELECT *
      FROM bugs_only
      WHERE state = 'closed'
        AND closed_at IS NOT NULL

  # Step 4: Extract year-month from closed_at timestamp
  - lego: transform
    database: 71
    table: closed_bugs_with_month
    query: |
      SELECT *,
             DATE_TRUNC('month', closed_at) as closed_month,
             TO_CHAR(closed_at, 'YYYY-MM') as month_label
      FROM closed_bugs

  # Step 5: Count bugs closed per month
  - lego: transform
    database: 71
    table: bugs_closed_by_month
    query: |
      SELECT closed_month,
             month_label,
             COUNT(*) as bugs_closed_count
      FROM closed_bugs_with_month
      GROUP BY closed_month, month_label
      ORDER BY closed_month

  # Step 6: Add additional metrics per month
  - lego: transform
    database: 71
    table: bugs_closed_monthly_summary
    query: |
      SELECT month_label,
             COUNT(*) as bugs_closed_count,
             SUM(upvotes) as total_upvotes,
             AVG(upvotes) as avg_upvotes,
             SUM(customer_upvotes) as total_customer_upvotes,
             COUNT(CASE WHEN customer_upvotes > 0 THEN 1 END) as customer_impacting_bugs,
             COUNT(CASE WHEN priority = 'high' THEN 1 END) as high_priority_bugs,
             COUNT(CASE WHEN is_regression = true THEN 1 END) as regression_bugs
      FROM closed_bugs_with_month
      GROUP BY month_label
      ORDER BY month_label

  # Step 7: Create a detailed breakdown by repository
  - lego: transform
    database: 71
    table: bugs_closed_by_month_repo
    query: |
      SELECT month_label,
             repository,
             COUNT(*) as bugs_closed_count,
             SUM(upvotes) as total_upvotes,
             COUNT(CASE WHEN customer_upvotes > 0 THEN 1 END) as customer_impacting_bugs
      FROM closed_bugs_with_month
      GROUP BY month_label, repository
      ORDER BY month_label, bugs_closed_count DESC
