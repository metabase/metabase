/* Fullscreen mode */
.Dashboard.DashboardFullscreen {
  min-height: 100vh;
  height: auto;
}

.Dashboard.DashboardFullscreen .fullscreenNormalText {
  color: var(--mb-color-text-dark);
  transition: var(--transition-theme-change);
}

/* Night mode transition */
.Dashboard.DashboardFullscreen,
.Dashboard.DashboardFullscreen .ParameterFieldSet,
.Dashboard.DashboardFullscreen .DashCard .Card {
  transition: var(--transition-theme-change);
}

.DashEditing {
  margin-top: 1.5em;
}

.DashEditing .DashCard .Card {
  transition:
    border 0.3s,
    background-color 0.3s;
}

.DashEditing .CardTitle:first-of-type {
  margin-top: 0.5rem;
}

.DashEditing .CardTitle {
  pointer-events: none;
}

.DashEditing .PinMap {
  /* allow map to pan. need to stopPropagation in PinMap to prevent weird dragging interaction */
  pointer-events: all;
}

.PinMapUpdateButtonDisabled {
  pointer-events: none;
  color: var(--mb-color-text-light);
}

/* .react-draggable*, .react-resizable* are 3rd party library classes */
.DashEditing .DashCard:global(.react-draggable-dragging) .Card {
  box-shadow: 3px 3px 8px var(--mb-color-shadow);
}

.BrandColorResizeHandle :global(.react-resizable-handle::after) {
  border-color: var(--mb-color-brand) !important;
}

.DashEditing .DashCard:global(.react-draggable-dragging),
.DashEditing .DashCard:global(.react-resizable-resizing) {
  z-index: 3;
}

.DashEditing .DashCard:global(.react-draggable-dragging) .Card,
.DashEditing .DashCard:global(.react-resizable-resizing) .Card {
  background-color: var(--mb-color-bg-medium) !important;
  border: 1px solid var(--mb-color-brand);
}

.DashEditing .DashCard .VisualizationSlowSpinner {
  position: absolute;
  right: -2px;
  top: -2px;
}

.DashEditing .DashCard:hover .VisualizationSlowSpinner {
  opacity: 0;
  transition: opacity 0.15s linear;
}

.DashEditing:not(.Mobile) .DashCard {
  cursor: move;
}

.DashEditing .DashCard :global(.react-resizable-handle) {
  position: absolute;
  width: 40px;
  height: 40px;
  bottom: 0;
  right: 0;
  z-index: 1; /* ensure the handle is above the card contents */

  /* overwrites the style coming from react-grid-layout */
  cursor: nwse-resize !important;
  background: none; /* hide default RGL's resize handle */
}

.DashEditing .DashCard :global(.react-resizable-handle::after) {
  content: "";
  position: absolute;
  width: 8px;
  height: 8px;
  bottom: 6px;
  right: 6px;
  border-bottom: 2px solid var(--mb-color-border);
  border-right: 2px solid var(--mb-color-border);
  border-bottom-right-radius: 2px;
  transition: opacity 0.2s;
  opacity: 0.01;
}

.DashEditing .DashCard :global(.react-resizable-handle:hover::after) {
  border-color: var(--mb-color-border);
}

.DashEditing .DashCard:hover :global(.react-resizable-handle::after) {
  opacity: 1;
}

.DashEditing
  .DashCard:global(.react-draggable-dragging .react-resizable-handle::after),
.DashEditing
  .DashCard:global(.react-resizable-resizing .react-resizable-handle::after) {
  opacity: 0.01;
}

/* .react-grid-placeholder is a global class from `react-grid-layout` */
.DashEditing :global(.react-grid-placeholder) {
  z-index: 0;
  background-color: var(--mb-color-bg-light) !important;
  transition: all 0.15s linear;
}

/* Used in frontend/src/metabase/dashboard/components/DashCard/DashCardActionsPanel/DashCardActionsPanel.styled.tsx */
/* stylelint-disable-next-line block-no-empty */
.DashDragging {
}

/* what for to print the dashboards */
@media print {
  header,
  nav {
    display: none;
  }

  /* improve label contrast */
  :global(.dc-chart .axis .tick text),
  :global(.dc-chart .x-axis-label),
  :global(.dc-chart .y-axis-label) {
    fill: var(--mb-color-text-dark);
  }
}

@page {
  margin: 1cm;
}

.Dashboard :global(text.value-label),
.Dashboard :global(text.value-label-white) {
  font-size: 12px;
}

.ScalarValue {
  font-weight: 700;
  white-space: pre;
}

.Dashboard .DashboardChartLegend {
  color: var(--mb-color-text-secondary);
  font-size: 0.75rem;
  font-weight: 400;
}

/*
 * Override d3 styles so the chart axis labels are selectable. See issue #17613
 */
:global(.dc-chart g.axis g.tick text) {
  pointer-events: all;
  user-select: auto;
}
