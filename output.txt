Warning: environ value /opt/homebrew/opt/openjdk/libexec/openjdk.jdk/Contents/Home for key :java-home has been overwritten with /opt/homebrew/Cellar/openjdk/20/libexec/openjdk.jdk/Contents/Home
Running tests with options {:mode :cli/ci, :namespace-pattern #"^metabase.*test$", :exclude-directories ["classes" "dev" "enterprise/backend/src" "local" "resources" "resources-ee" "shared/src" "src" "target" "test_config" "test_resources"], :test-warn-time 1500}
[36mRunning QP tests against these drivers: #{:h2}[0m
Excluding directory "dev/src"
Looking for test namespaces in directory test
Looking for test namespaces in directory shared/test
Excluding directory "test_resources"
Finding tests took 6.3 s.
Excluding directory "test_config"
Excluding directory "enterprise/backend/src"
Looking for test namespaces in directory enterprise/backend/test
Excluding directory "src"
Excluding directory "shared/src"
Excluding directory "resources"
Running 3857 tests

LONG TEST in metabase-enterprise.advanced-config.api.logs-test/fetch-logs-test
Test took 4.584 seconds seconds to run

LONG TEST in metabase-enterprise.advanced-config.api.pulse-test/test-pulse-endpoint-should-respect-email-domain-allow-list-test
Test took 4.555 seconds seconds to run
Created a new logger for metabase-enterprise.advanced-config.file.interface
[main] WARN  metabase-enterprise.advanced-config.file.interface - [33mIgnoring unknown config section :unknown-section.[0m

LONG TEST in metabase-enterprise.advanced-permissions.api.group-manager-test/memebership-apis-test
Test took 5.330 seconds seconds to run

LONG TEST in metabase-enterprise.advanced-permissions.api.group-manager-test/permissions-group-apis-test
Test took 1.948 seconds seconds to run

LONG TEST in metabase-enterprise.advanced-permissions.api.monitoring-test/util-tset
Test took 2.011 seconds seconds to run

LONG TEST in metabase-enterprise.advanced-permissions.api.setting-test/geojson-api-test
Test took 1.693 seconds seconds to run

LONG TEST in metabase-enterprise.advanced-permissions.api.setting-test/card-api-test
Test took 1.588 seconds seconds to run

LONG TEST in metabase-enterprise.advanced-permissions.api.setting-test/email-api-test
Test took 1.507 seconds seconds to run

LONG TEST in metabase-enterprise.advanced-permissions.api.setting-test/persistence-test
Test took 1.638 seconds seconds to run

LONG TEST in metabase-enterprise.advanced-permissions.api.subscription-test/alert-permissions-test
Test took 3.097 seconds seconds to run

LONG TEST in metabase-enterprise.advanced-permissions.api.subscription-test/pulse-permissions-test
Test took 2.743 seconds seconds to run

LONG TEST in metabase-enterprise.sandbox.query-processor.middleware.row-level-restrictions-test/sandboxing-linked-table-perms
Test took 2.358 seconds seconds to run

LONG TEST in metabase-enterprise.sandbox.query-processor.middleware.row-level-restrictions-test/pivot-query-test
Test took 3.500 seconds seconds to run

LONG TEST in metabase-enterprise.sandbox.query-processor.middleware.row-level-restrictions-test/e2e-test
Test took 1.694 seconds seconds to run

LONG TEST in metabase-enterprise.sandbox.query-processor.middleware.row-level-restrictions-test/drill-thru-on-joins-test
Test took 2.052 seconds seconds to run

LONG TEST in metabase-enterprise.sandbox.query-processor.middleware.row-level-restrictions-test/e2e-fks-test
Test took 1.580 seconds seconds to run

LONG TEST in metabase-enterprise.sandbox.query-processor.middleware.row-level-restrictions-test/native-fk-remapping-test
Test took 4.837 seconds seconds to run

LONG TEST in metabase-enterprise.serialization.cmd-test/blank-target-db-test
Test took 1.974 seconds seconds to run

LONG TEST in metabase-enterprise.serialization.cmd-test/mode-update-remove-cards-test
Test took 2.390 seconds seconds to run

LONG TEST in metabase-enterprise.serialization.load-test/dump-load-entities-test
Test took 3.217 seconds seconds to run

LONG TEST in metabase-enterprise.serialization.v2.e2e-test/dashcards-with-link-cards-test
Test took 2.153 seconds seconds to run

LONG TEST in metabase-enterprise.serialization.v2.e2e-test/dashboard-with-tabs-test
Test took 2.080 seconds seconds to run

LONG TEST in metabase-enterprise.serialization.v2.e2e-test/card-and-dashboard-has-parameter-with-source-is-card-test
Test took 2.166 seconds seconds to run

LONG TEST in metabase-enterprise.serialization.v2.e2e-test/e2e-storage-ingestion-test
Test took 18.630 seconds seconds to run

LONG TEST in metabase-enterprise.serialization.v2.extract-test/selective-serialization-basic-test
Test took 1.551 seconds seconds to run

LONG TEST in metabase-enterprise.serialization.v2.load-test/dashboard-card-test
Test took 2.636 seconds seconds to run

LONG TEST in metabase-enterprise.serialization.v2.load-test/load-action-test
Test took 1.904 seconds seconds to run

LONG TEST in metabase-enterprise.serialization.v2.load-test/segment-test
Test took 2.575 seconds seconds to run

LONG TEST in metabase-enterprise.serialization.v2.load-test/metric-test
Test took 2.595 seconds seconds to run

LONG TEST in metabase-enterprise.serialization.v2.load-test/deserialization-database-table-field-test
Test took 1.751 seconds seconds to run

LONG TEST in metabase-enterprise.serialization.v2.load-test/users-test
Test took 2.860 seconds seconds to run

LONG TEST in metabase-enterprise.serialization.v2.load-test/card-dataset-query-test
Test took 2.590 seconds seconds to run

LONG TEST in metabase-enterprise.serialization.v2.load-test/field-values-test
Test took 2.336 seconds seconds to run
Created a new logger for metabase.api.common
[qtp1367754959-1612] WARN  metabase.api.common - Unexpected parameters at [:post "/post/test-address"]: [:tags :address :id]
Please add them to the schema or remove them from the API client

FAIL in metabase.api.database-test/admins-set-database-local-settings-test (database_test.clj:1559)
Admins should be allowed to update Database-local Settings (#19409) Set initial value response
expected: [1;31m{[0m[1;33m:settings[0m [1;31m{[0m[1;33m:max-results-bare-rows[0m [36m1337[0m[1;31m}[0m[1;31m}[0m
  actual: [1;31m{[0m[1;33m:auto_run_queries[0m [32mtrue[0m,
           [1;33m:cache_field_values_schedule[0m [1;35m"0 50 0 * * ? *"[0m,
           [1;33m:cache_ttl[0m [1;30mnil[0m,
           [1;33m:caveats[0m [1;30mnil[0m,
           [1;33m:created_at[0m [34m#<[0m[1;34mjava.time.LocalDateTime[0m[34m@[0m640ca0f9 2023-09-02T02:59:46.383534[34m>[0m,
           [1;33m:creator_id[0m [1;30mnil[0m,
           [1;33m:dbms_version[0m [1;31m{[0m[1;33m:flavor[0m [1;35m"H2"[0m,
                          [1;33m:semantic-version[0m [1;31m([0m[36m2[0m [36m1[0m[1;31m)[0m,
                          [1;33m:version[0m [1;35m"2.1.214 (2022-06-13)"[0m[1;31m}[0m,
           [1;33m:description[0m [1;30mnil[0m,
           [1;33m:details[0m [1;31m{[0m[1;33m:db[0m [1;35m"mem:test-data;USER=GUEST;PASSWORD=guest"[0m[1;31m}[0m,
           [1;33m:engine[0m [1;35m"h2"[0m,
           [1;33m:features[0m [1;31m([0m[1;35m"basic-aggregations"[0m
                      [1;35m"temporal-extract"[0m
                      [1;35m"actions/custom"[0m
                      [1;35m"now"[0m
                      [1;35m"standard-deviation-aggregations"[0m
                      [1;35m"date-arithmetics"[0m
                      [1;35m"actions"[0m
                      [1;35m"expression-aggregations"[0m
                      [1;35m"foreign-keys"[0m
                      [1;35m"right-join"[0m
                      [1;35m"left-join"[0m
                      [1;35m"native-parameters"[0m
                      [1;35m"schemas"[0m
                      [1;35m"nested-queries"[0m
                      [1;35m"expressions"[0m
                      [1;35m"uploads"[0m
                      [1;35m"regex"[0m
                      [1;35m"case-sensitivity-string-filter-options"[0m
                      [1;35m"binning"[0m
                      [1;35m"datetime-diff"[0m
                      [1;35m"inner-join"[0m
                      [1;35m"advanced-math-expressions"[0m[1;31m)[0m,
           [1;33m:id[0m [36m1[0m,
           [1;33m:initial_sync_status[0m [1;35m"complete"[0m,
           [1;33m:is_audit[0m [32mfalse[0m,
           [1;33m:is_full_sync[0m [32mtrue[0m,
           [1;33m:is_on_demand[0m [32mfalse[0m,
           [1;33m:is_sample[0m [32mfalse[0m,
           [1;33m:metadata_sync_schedule[0m [1;35m"0 50 * * * ? *"[0m,
           [1;33m:name[0m [1;35m"test-data"[0m,
           [1;33m:options[0m [1;30mnil[0m,
           [1;33m:points_of_interest[0m [1;30mnil[0m,
           [1;33m:refingerprint[0m [1;30mnil[0m,
           [1;33m:schedules[0m [1;31m{[0m[1;33m:cache_field_values[0m [1;31m{[0m[1;33m:schedule_day[0m [1;30mnil[0m,
                                            [1;33m:schedule_frame[0m [1;30mnil[0m,
                                            [1;33m:schedule_hour[0m [36m0[0m,
                                            [1;33m:schedule_minute[0m [36m50[0m,
                                            [1;33m:schedule_type[0m [1;35m"daily"[0m[1;31m}[0m,
                       [1;33m:metadata_sync[0m [1;31m{[0m[1;33m:schedule_day[0m [1;30mnil[0m,
                                       [1;33m:schedule_frame[0m [1;30mnil[0m,
                                       [1;33m:schedule_hour[0m [1;30mnil[0m,
                                       [1;33m:schedule_minute[0m [36m50[0m,
                                       [1;33m:schedule_type[0m [1;35m"hourly"[0m[1;31m}[0m[1;31m}[0m,
           [1;33m:settings[0m [1;31m{}[0m,
           [1;33m:timezone[0m [1;35m"UTC"[0m,
           [1;33m:updated_at[0m [34m#<[0m[1;34mjava.time.LocalDateTime[0m[34m@[0mb971aac 2023-09-02T03:03:16.008799[34m>[0m[1;31m}[0m

FAIL in metabase.api.database-test/admins-set-database-local-settings-test (database_test.clj:1566)
Admins should be allowed to update Database-local Settings (#19409) Setting a different value should not affect anything not specified (PATCH-style update) response
expected: [1;31m{[0m[1;33m:settings[0m [1;31m{[0m[1;33m:database-enable-actions[0m [32mtrue[0m,
                      [1;33m:max-results-bare-rows[0m [36m1337[0m[1;31m}[0m[1;31m}[0m
  actual: [1;31m{[0m[1;33m:auto_run_queries[0m [32mtrue[0m,
           [1;33m:cache_field_values_schedule[0m [1;35m"0 50 0 * * ? *"[0m,
           [1;33m:cache_ttl[0m [1;30mnil[0m,
           [1;33m:caveats[0m [1;30mnil[0m,
           [1;33m:created_at[0m [34m#<[0m[1;34mjava.time.LocalDateTime[0m[34m@[0m4eb3e1ae 2023-09-02T02:59:46.383534[34m>[0m,
           [1;33m:creator_id[0m [1;30mnil[0m,
           [1;33m:dbms_version[0m [1;31m{[0m[1;33m:flavor[0m [1;35m"H2"[0m,
                          [1;33m:semantic-version[0m [1;31m([0m[36m2[0m [36m1[0m[1;31m)[0m,
                          [1;33m:version[0m [1;35m"2.1.214 (2022-06-13)"[0m[1;31m}[0m,
           [1;33m:description[0m [1;30mnil[0m,
           [1;33m:details[0m [1;31m{[0m[1;33m:db[0m [1;35m"mem:test-data;USER=GUEST;PASSWORD=guest"[0m[1;31m}[0m,
           [1;33m:engine[0m [1;35m"h2"[0m,
           [1;33m:features[0m [1;31m([0m[1;35m"basic-aggregations"[0m
                      [1;35m"temporal-extract"[0m
                      [1;35m"actions/custom"[0m
                      [1;35m"now"[0m
                      [1;35m"standard-deviation-aggregations"[0m
                      [1;35m"date-arithmetics"[0m
                      [1;35m"actions"[0m
                      [1;35m"expression-aggregations"[0m
                      [1;35m"foreign-keys"[0m
                      [1;35m"right-join"[0m
                      [1;35m"left-join"[0m
                      [1;35m"native-parameters"[0m
                      [1;35m"schemas"[0m
                      [1;35m"nested-queries"[0m
                      [1;35m"expressions"[0m
                      [1;35m"uploads"[0m
                      [1;35m"regex"[0m
                      [1;35m"case-sensitivity-string-filter-options"[0m
                      [1;35m"binning"[0m
                      [1;35m"datetime-diff"[0m
                      [1;35m"inner-join"[0m
                      [1;35m"advanced-math-expressions"[0m[1;31m)[0m,
           [1;33m:id[0m [36m1[0m,
           [1;33m:initial_sync_status[0m [1;35m"complete"[0m,
           [1;33m:is_audit[0m [32mfalse[0m,
           [1;33m:is_full_sync[0m [32mtrue[0m,
           [1;33m:is_on_demand[0m [32mfalse[0m,
           [1;33m:is_sample[0m [32mfalse[0m,
           [1;33m:metadata_sync_schedule[0m [1;35m"0 50 * * * ? *"[0m,
           [1;33m:name[0m [1;35m"test-data"[0m,
           [1;33m:options[0m [1;30mnil[0m,
           [1;33m:points_of_interest[0m [1;30mnil[0m,
           [1;33m:refingerprint[0m [1;30mnil[0m,
           [1;33m:schedules[0m [1;31m{[0m[1;33m:cache_field_values[0m [1;31m{[0m[1;33m:schedule_day[0m [1;30mnil[0m,
                                            [1;33m:schedule_frame[0m [1;30mnil[0m,
                                            [1;33m:schedule_hour[0m [36m0[0m,
                                            [1;33m:schedule_minute[0m [36m50[0m,
                                            [1;33m:schedule_type[0m [1;35m"daily"[0m[1;31m}[0m,
                       [1;33m:metadata_sync[0m [1;31m{[0m[1;33m:schedule_day[0m [1;30mnil[0m,
                                       [1;33m:schedule_frame[0m [1;30mnil[0m,
                                       [1;33m:schedule_hour[0m [1;30mnil[0m,
                                       [1;33m:schedule_minute[0m [36m50[0m,
                                       [1;33m:schedule_type[0m [1;35m"hourly"[0m[1;31m}[0m[1;31m}[0m,
           [1;33m:settings[0m [1;31m{[0m[1;33m:database-enable-actions[0m [32mtrue[0m[1;31m}[0m,
           [1;33m:timezone[0m [1;35m"UTC"[0m,
           [1;33m:updated_at[0m [34m#<[0m[1;34mjava.time.LocalDateTime[0m[34m@[0m15033779 2023-09-02T03:03:16.054045[34m>[0m[1;31m}[0m

FAIL in metabase.api.database-test/admins-set-database-local-settings-test (database_test.clj:1575)
Admins should be allowed to update Database-local Settings (#19409) Update existing value response
expected: [1;31m{[0m[1;33m:settings[0m [1;31m{[0m[1;33m:database-enable-actions[0m [32mfalse[0m,
                      [1;33m:max-results-bare-rows[0m [36m1337[0m[1;31m}[0m[1;31m}[0m
  actual: [1;31m{[0m[1;33m:auto_run_queries[0m [32mtrue[0m,
           [1;33m:cache_field_values_schedule[0m [1;35m"0 50 0 * * ? *"[0m,
           [1;33m:cache_ttl[0m [1;30mnil[0m,
           [1;33m:caveats[0m [1;30mnil[0m,
           [1;33m:created_at[0m [34m#<[0m[1;34mjava.time.LocalDateTime[0m[34m@[0m69b42ebd 2023-09-02T02:59:46.383534[34m>[0m,
           [1;33m:creator_id[0m [1;30mnil[0m,
           [1;33m:dbms_version[0m [1;31m{[0m[1;33m:flavor[0m [1;35m"H2"[0m,
                          [1;33m:semantic-version[0m [1;31m([0m[36m2[0m [36m1[0m[1;31m)[0m,
                          [1;33m:version[0m [1;35m"2.1.214 (2022-06-13)"[0m[1;31m}[0m,
           [1;33m:description[0m [1;30mnil[0m,
           [1;33m:details[0m [1;31m{[0m[1;33m:db[0m [1;35m"mem:test-data;USER=GUEST;PASSWORD=guest"[0m[1;31m}[0m,
           [1;33m:engine[0m [1;35m"h2"[0m,
           [1;33m:features[0m [1;31m([0m[1;35m"basic-aggregations"[0m
                      [1;35m"temporal-extract"[0m
                      [1;35m"actions/custom"[0m
                      [1;35m"now"[0m
                      [1;35m"standard-deviation-aggregations"[0m
                      [1;35m"date-arithmetics"[0m
                      [1;35m"actions"[0m
                      [1;35m"expression-aggregations"[0m
                      [1;35m"foreign-keys"[0m
                      [1;35m"right-join"[0m
                      [1;35m"left-join"[0m
                      [1;35m"native-parameters"[0m
                      [1;35m"schemas"[0m
                      [1;35m"nested-queries"[0m
                      [1;35m"expressions"[0m
                      [1;35m"uploads"[0m
                      [1;35m"regex"[0m
                      [1;35m"case-sensitivity-string-filter-options"[0m
                      [1;35m"binning"[0m
                      [1;35m"datetime-diff"[0m
                      [1;35m"inner-join"[0m
                      [1;35m"advanced-math-expressions"[0m[1;31m)[0m,
           [1;33m:id[0m [36m1[0m,
           [1;33m:initial_sync_status[0m [1;35m"complete"[0m,
           [1;33m:is_audit[0m [32mfalse[0m,
           [1;33m:is_full_sync[0m [32mtrue[0m,
           [1;33m:is_on_demand[0m [32mfalse[0m,
           [1;33m:is_sample[0m [32mfalse[0m,
           [1;33m:metadata_sync_schedule[0m [1;35m"0 50 * * * ? *"[0m,
           [1;33m:name[0m [1;35m"test-data"[0m,
           [1;33m:options[0m [1;30mnil[0m,
           [1;33m:points_of_interest[0m [1;30mnil[0m,
           [1;33m:refingerprint[0m [1;30mnil[0m,
           [1;33m:schedules[0m [1;31m{[0m[1;33m:cache_field_values[0m [1;31m{[0m[1;33m:schedule_day[0m [1;30mnil[0m,
                                            [1;33m:schedule_frame[0m [1;30mnil[0m,
                                            [1;33m:schedule_hour[0m [36m0[0m,
                                            [1;33m:schedule_minute[0m [36m50[0m,
                                            [1;33m:schedule_type[0m [1;35m"daily"[0m[1;31m}[0m,
                       [1;33m:metadata_sync[0m [1;31m{[0m[1;33m:schedule_day[0m [1;30mnil[0m,
                                       [1;33m:schedule_frame[0m [1;30mnil[0m,
                                       [1;33m:schedule_hour[0m [1;30mnil[0m,
                                       [1;33m:schedule_minute[0m [36m50[0m,
                                       [1;33m:schedule_type[0m [1;35m"hourly"[0m[1;31m}[0m[1;31m}[0m,
           [1;33m:settings[0m [1;31m{[0m[1;33m:database-enable-actions[0m [32mfalse[0m[1;31m}[0m,
           [1;33m:timezone[0m [1;35m"UTC"[0m,
           [1;33m:updated_at[0m [34m#<[0m[1;34mjava.time.LocalDateTime[0m[34m@[0m3cb3b469 2023-09-02T03:03:16.084138[34m>[0m[1;31m}[0m

LONG TEST in metabase.api.dataset-test/pivot-dataset-test
Test took 1.543 seconds seconds to run

FAIL in metabase.api.dataset-test/non--download--queries-should-still-get-the-default-constraints (dataset_test.clj:259)
non-"download" queries should still get the default constraints (this also is a sanitiy check to make sure the `with-redefs` in the test above actually works)
expected: [36m10[0m
  actual: [36m100[0m


FAIL in metabase.api.dataset-test/compile-test (dataset_test.clj:278)
POST /api/dataset/native 
Can we fetch a native version of an MBQL query?
expected: [1;31m{[0m[1;33m:params[0m [1;30mnil[0m,
           [1;33m:query[0m [1;35m"SELECT \"PUBLIC\".\"VENUES\".\"ID\" AS \"ID\", \"PUBLIC\".\"VENUES\".\"NAME\" AS \"NAME\" FROM \"PUBLIC\".\"VENUES\" LIMIT 1048575"[0m[1;31m}[0m
  actual: [1;31m{[0m[1;33m:params[0m [1;30mnil[0m,
           [1;33m:query[0m [1;35m"SELECT \"PUBLIC\".\"VENUES\".\"ID\" AS \"ID\", \"PUBLIC\".\"VENUES\".\"NAME\" AS \"NAME\" FROM \"PUBLIC\".\"VENUES\" LIMIT 2000"[0m[1;31m}[0m
    diff: - [1;31m{[0m[1;33m:query[0m [1;35m"SELECT \"PUBLIC\".\"VENUES\".\"ID\" AS \"ID\", \"PUBLIC\".\"VENUES\".\"NAME\" AS \"NAME\" FROM \"PUBLIC\".\"VENUES\" LIMIT 1048575"[0m[1;31m}[0m
          + [1;31m{[0m[1;33m:query[0m [1;35m"SELECT \"PUBLIC\".\"VENUES\".\"ID\" AS \"ID\", \"PUBLIC\".\"VENUES\".\"NAME\" AS \"NAME\" FROM \"PUBLIC\".\"VENUES\" LIMIT 2000"[0m[1;31m}[0m

FAIL in metabase.api.dataset-test/compile-test (dataset_test.clj:287)
POST /api/dataset/native 
Can we fetch a native version of an MBQL query? 
Make sure parameters are spliced correctly
expected: [1;31m{[0m[1;33m:params[0m [1;30mnil[0m,
           [1;33m:query[0m [1;35m"SELECT \"PUBLIC\".\"CHECKINS\".\"ID\" AS \"ID\" FROM \"PUBLIC\".\"CHECKINS\" WHERE (\"PUBLIC\".\"CHECKINS\".\"DATE\" >= timestamp with time zone '2015-11-13 00:00:00.000Z') AND (\"PUBLIC\".\"CHECKINS\".\"DATE\" < timestamp with time zone '2015-11-14 00:00:00.000Z') LIMIT 1048575"[0m[1;31m}[0m
  actual: [1;31m{[0m[1;33m:params[0m [1;30mnil[0m,
           [1;33m:query[0m [1;35m"SELECT \"PUBLIC\".\"CHECKINS\".\"ID\" AS \"ID\" FROM \"PUBLIC\".\"CHECKINS\" WHERE (\"PUBLIC\".\"CHECKINS\".\"DATE\" >= timestamp with time zone '2015-11-13 00:00:00.000Z') AND (\"PUBLIC\".\"CHECKINS\".\"DATE\" < timestamp with time zone '2015-11-14 00:00:00.000Z') LIMIT 2000"[0m[1;31m}[0m
    diff: - [1;31m{[0m[1;33m:query[0m [1;35m"SELECT \"PUBLIC\".\"CHECKINS\".\"ID\" AS \"ID\" FROM \"PUBLIC\".\"CHECKINS\" WHERE (\"PUBLIC\".\"CHECKINS\".\"DATE\" >= timestamp with time zone '2015-11-13 00:00:00.000Z') AND (\"PUBLIC\".\"CHECKINS\".\"DATE\" < timestamp with time zone '2015-11-14 00:00:00.000Z') LIMIT 1048575"[0m[1;31m}[0m
          + [1;31m{[0m[1;33m:query[0m [1;35m"SELECT \"PUBLIC\".\"CHECKINS\".\"ID\" AS \"ID\" FROM \"PUBLIC\".\"CHECKINS\" WHERE (\"PUBLIC\".\"CHECKINS\".\"DATE\" >= timestamp with time zone '2015-11-13 00:00:00.000Z') AND (\"PUBLIC\".\"CHECKINS\".\"DATE\" < timestamp with time zone '2015-11-14 00:00:00.000Z') LIMIT 2000"[0m[1;31m}[0m

FAIL in metabase.api.dataset-test/compile-test (dataset_test.clj:311)
POST /api/dataset/native We should be able to format the resulting SQL query if desired
expected: [1;31m{[0m[1;33m:params[0m [1;30mnil[0m,
           [1;33m:query[0m [1;35m"SELECT\n  \"PUBLIC\".\"VENUES\".\"ID\" AS \"ID\",\n  \"PUBLIC\".\"VENUES\".\"NAME\" AS \"NAME\"\nFROM\n  \"PUBLIC\".\"VENUES\"\nLIMIT\n  1048575"[0m[1;31m}[0m
  actual: [1;31m{[0m[1;33m:params[0m [1;30mnil[0m,
           [1;33m:query[0m [1;35m"SELECT\n  \"PUBLIC\".\"VENUES\".\"ID\" AS \"ID\",\n  \"PUBLIC\".\"VENUES\".\"NAME\" AS \"NAME\"\nFROM\n  \"PUBLIC\".\"VENUES\"\nLIMIT\n  2000"[0m[1;31m}[0m
    diff: - [1;31m{[0m[1;33m:query[0m [1;35m"SELECT\n  \"PUBLIC\".\"VENUES\".\"ID\" AS \"ID\",\n  \"PUBLIC\".\"VENUES\".\"NAME\" AS \"NAME\"\nFROM\n  \"PUBLIC\".\"VENUES\"\nLIMIT\n  1048575"[0m[1;31m}[0m
          + [1;31m{[0m[1;33m:query[0m [1;35m"SELECT\n  \"PUBLIC\".\"VENUES\".\"ID\" AS \"ID\",\n  \"PUBLIC\".\"VENUES\".\"NAME\" AS \"NAME\"\nFROM\n  \"PUBLIC\".\"VENUES\"\nLIMIT\n  2000"[0m[1;31m}[0m

FAIL in metabase.api.dataset-test/compile-test (dataset_test.clj:324)
POST /api/dataset/native The default behavior is to format the SQL
expected: [1;31m{[0m[1;33m:params[0m [1;30mnil[0m,
           [1;33m:query[0m [1;35m"SELECT\n  \"PUBLIC\".\"VENUES\".\"ID\" AS \"ID\",\n  \"PUBLIC\".\"VENUES\".\"NAME\" AS \"NAME\"\nFROM\n  \"PUBLIC\".\"VENUES\"\nLIMIT\n  1048575"[0m[1;31m}[0m
  actual: [1;31m{[0m[1;33m:params[0m [1;30mnil[0m,
           [1;33m:query[0m [1;35m"SELECT\n  \"PUBLIC\".\"VENUES\".\"ID\" AS \"ID\",\n  \"PUBLIC\".\"VENUES\".\"NAME\" AS \"NAME\"\nFROM\n  \"PUBLIC\".\"VENUES\"\nLIMIT\n  2000"[0m[1;31m}[0m
    diff: - [1;31m{[0m[1;33m:query[0m [1;35m"SELECT\n  \"PUBLIC\".\"VENUES\".\"ID\" AS \"ID\",\n  \"PUBLIC\".\"VENUES\".\"NAME\" AS \"NAME\"\nFROM\n  \"PUBLIC\".\"VENUES\"\nLIMIT\n  1048575"[0m[1;31m}[0m
          + [1;31m{[0m[1;33m:query[0m [1;35m"SELECT\n  \"PUBLIC\".\"VENUES\".\"ID\" AS \"ID\",\n  \"PUBLIC\".\"VENUES\".\"NAME\" AS \"NAME\"\nFROM\n  \"PUBLIC\".\"VENUES\"\nLIMIT\n  2000"[0m[1;31m}[0m

FAIL in metabase.api.preview-embed-test/query-max-results-constraint-test (preview_embed_test.clj:167)
GET /api/preview_embed/card/:token/query Only 2000 results returned when there are many more [35musing sample-dataset dataset
[0m [34m
Setting :enable-embedding = true
[0m [34m
Setting :embedding-secret-key = "57ccb1ec276aadfe6e0726270de52b62ef61c4fbfc7bd21364ca77caef3d00c0"
[0m 
with temporary :model/Card with attributes
{:creator_id 2,
 :database_id 79,
 :dataset_query {:database 79, :type :query, :query {:source-table 253}},
 :display :table,
 :name "VHQDKDWSFITRZINVHSYB",
 :visualization_settings {}}


expected: [36m1[0m
  actual: [36m2000[0m


LONG TEST in metabase.api.session-test/failure-threshold-per-request-source
Test took 6.457 seconds seconds to run

LONG TEST in metabase.api.session-test/failure-threshold-throttling-test
Test took 3.585 seconds seconds to run

LONG TEST in metabase.api.setup-test/create-database-test
Test took 1.891 seconds seconds to run

LONG TEST in metabase.api.setup-test/setup-settings-test
Test took 2.122 seconds seconds to run

FAIL in metabase.automagic-dashboards.core-test/native-query-with-cards-test (automagic_dashboards.clj:53)

with temporary :model/Collection with attributes
{:name "WRELISUXGRMILNMBYKFQ", :color "#ABCDEF"}

 
with temporary :model/Card with attributes
{:table_id nil,
 :result_metadata
 [{:display_name "ID",
   :field_ref [:field "ID" {:base-type :type/BigInteger}],
   :name "ID",
   :base_type :type/BigInteger,
   :effective_type :type/BigInteger,
   :semantic_type :type/PK,
   :fingerprint nil}
  {:display_name "NAME",
   :field_ref [:field "NAME" {:base-type :type/Text}],
   :name "NAME",
   :base_type :type/Text,
   :effective_type :type/Text,
   :semantic_type :type/Name,
   :fingerprint
   {:global {:distinct-count 100, :nil% 0.0},
    :type
    #:type{:Text
           {:percent-json 0.0, :percent-url 0.0, :percent-email 0.0, :percent-state 0.0, :average-length 15.63}}}}
  {:display_name "CATEGORY_ID",
   :field_ref [:field "CATEGORY_ID" {:base-type :type/Integer}],
   :name "CATEGORY_ID",
   :base_type :type/Integer,
   :effective_type :type/Integer,
   :semantic_type nil,
   :fingerprint
   {:global {:distinct-count 28, :nil% 0.0},
    :type
    #:type{:Number
           {:min 2.0, :q1 6.89564392373896, :q3 49.240253073352044, :max 74.0, :sd 23.058108414099443, :avg 29.98}}}}
  {:display_name "LATITUDE",
   :field_ref [:field "LATITUDE" {:base-type :type/Float}],
   :name "LATITUDE",
   :base_type :type/Float,
   :effective_type :type/Float,
   :semantic_type :type/Latitude,
   :fingerprint
   {:global {:distinct-count 94, :nil% 0.0},
    :type
    #:type{:Number
           {:min 10.0646,
            :q1 34.06098873016278,
            :q3 37.77185,
            :max 40.7794,
            :sd 3.4346725397190827,
            :avg 35.505891999999996}}}}
  {:display_name "LONGITUDE",
   :field_ref [:field "LONGITUDE" {:base-type :type/Float}],
   :name "LONGITUDE",
   :base_type :type/Float,
   :effective_type :type/Float,
   :semantic_type :type/Longitude,
   :fingerprint
   {:global {:distinct-count 84, :nil% 0.0},
    :type
    #:type{:Number
           {:min -165.374,
            :q1 -122.40857106781186,
            :q3 -118.2635,
            :max -73.9533,
            :sd 14.162810671348238,
            :avg -115.99848699999998}}}}
  {:display_name "PRICE",
   :field_ref [:field "PRICE" {:base-type :type/Integer}],
   :name "PRICE",
   :base_type :type/Integer,
   :effective_type :type/Integer,
   :semantic_type nil,
   :fingerprint
   {:global {:distinct-count 4, :nil% 0.0},
    :type
    #:type{:Number
           {:min 1.0, :q1 1.4591129021415095, :q3 2.493086095768049, :max 4.0, :sd 0.7713951678941896, :avg 2.03}}}}],
 :database_id 1,
 :collection_id 597,
 :name "NZJAUAHWDQHEPVTJGRMV",
 :creator_id 2,
 :dataset_query {:native {:query "select * from venues"}, :type :native, :database 1},
 :display :table,
 :visualization_settings {}}

 
with temporary :model/Card with attributes
{:creator_id 2,
 :database_id 1,
 :dataset_query
 {:query {:filter [:> [:field "PRICE" {:base-type "type/Number"}] 10], :source-table "card__1155"},
  :type :query,
  :database -1337},
 :display :table,
 :name "YNXNVWAXYRBWFNOLQCIM",
 :visualization_settings {},
 :table_id nil,
 :collection_id 597}

 with test user :rasta
 
(with-model-cleanup "Card" "Dashboard" "Collection" "DashboardCard")
 (automagic-analysis
 (toucan2.instance/instance
  :model/Card
  {:description nil,
   :archived false,
   :collection_position nil,
   :table_id nil,
   :result_metadata
   ({:field_ref [:field "ID" {:base-type :type/BigInteger}],
     :base_type :type/BigInteger,
     :display_name "ID",
     :name "ID",
     :effective_type :type/BigInteger,
     :semantic_type :type/PK,
     :fingerprint nil,
     :source :fields}
    {:field_ref [:field "NAME" {:base-type :type/Text}],
     :base_type :type/Text,
     :display_name "NAME",
     :name "NAME",
     :effective_type :type/Text,
     :semantic_type :type/Name,
     :fingerprint
     {:global {:distinct-count 100, :nil% 0.0},
      :type
      #:type{:Text
             {:percent-json 0.0, :percent-url 0.0, :percent-email 0.0, :percent-state 0.0, :average-length 15.63}}},
     :source :fields}
    {:field_ref [:field "CATEGORY_ID" {:base-type :type/Integer}],
     :base_type :type/Integer,
     :display_name "CATEGORY_ID",
     :name "CATEGORY_ID",
     :effective_type :type/Integer,
     :semantic_type nil,
     :fingerprint
     {:global {:distinct-count 28, :nil% 0.0},
      :type
      #:type{:Number
             {:min 2.0, :q1 6.89564392373896, :q3 49.240253073352044, :max 74.0, :sd 23.058108414099443, :avg 29.98}}},
     :source :fields}
    {:field_ref [:field "LATITUDE" {:base-type :type/Float}],
     :base_type :type/Float,
     :display_name "LATITUDE",
     :name "LATITUDE",
     :effective_type :type/Float,
     :semantic_type :type/Latitude,
     :fingerprint
     {:global {:distinct-count 94, :nil% 0.0},
      :type
      #:type{:Number
             {:min 10.0646,
              :q1 34.06098873016278,
              :q3 37.77185,
              :max 40.7794,
              :sd 3.4346725397190827,
              :avg 35.505891999999996}}},
     :source :fields}
    {:field_ref [:field "LONGITUDE" {:base-type :type/Float}],
     :base_type :type/Float,
     :display_name "LONGITUDE",
     :name "LONGITUDE",
     :effective_type :type/Float,
     :semantic_type :type/Longitude,
     :fingerprint
     {:global {:distinct-count 84, :nil% 0.0},
      :type
      #:type{:Number
             {:min -165.374,
              :q1 -122.40857106781186,
              :q3 -118.2635,
              :max -73.9533,
              :sd 14.162810671348238,
              :avg -115.99848699999998}}},
     :source :fields}
    {:field_ref [:field "PRICE" {:base-type :type/Integer}],
     :base_type :type/Integer,
     :display_name "PRICE",
     :name "PRICE",
     :effective_type :type/Integer,
     :semantic_type nil,
     :fingerprint
     {:global {:distinct-count 4, :nil% 0.0},
      :type
      #:type{:Number
             {:min 1.0, :q1 1.4591129021415095, :q3 2.493086095768049, :max 4.0, :sd 0.7713951678941896, :avg 2.03}}},
     :source :fields}),
   :database_id 1,
   :enable_embedding false,
   :collection_id 597,
   :query_type :query,
   :name "YNXNVWAXYRBWFNOLQCIM",
   :creator_id 2,
   :updated_at #t "2023-09-02T03:04:19.482041Z",
   :made_public_by_id nil,
   :embedding_params nil,
   :cache_ttl nil,
   :dataset_query
   {:query {:filter [:> [:field "PRICE" {:base-type :type/Number}] 10], :source-table "card__1155"},
    :type :query,
    :database -1337},
   :id 1156,
   :parameter_mappings [],
   :display :table,
   :entity_id "_8fJKxFokEj_kLY2lbUX9",
   :collection_preview true,
   :visualization_settings {},
   :parameters [],
   :dataset false,
   :created_at #t "2023-09-02T03:04:19.482041",
   :public_uuid nil})
 {:cell-query nil, :show :all})
 Dashboard should be valid 
Dashboard =
{:description "An overview of \"YNXNVWAXYRBWFNOLQCIM\" and how it's distributed across time, place, and categories.",
 :ordered_cards
 ({:size_x 6,
   :dashboard_tab_id nil,
   :card
   {:description nil,
    :table_id nil,
    :database_id 1,
    :collection_id nil,
    :query_type :query,
    :name "NZJAUAHWDQHEPVTJGRMV by coordinates",
    :creator_id 2,
    :dataset_query
    {:type :query,
     :database 1,
     :query
     {:source-table "card__1155",
      :filter [:and [:> [:field "PRICE" {:base-type :type/Number}] 10]],
      :breakout ([:field "LONGITUDE" {:base-type :type/Float}] [:field "LATITUDE" {:base-type :type/Float}]),
      :aggregation (["count"])}},
    :id G__355531,
    :display "map",
    :visualization_settings
    {:graph.series_labels ("number"), :graph.metrics ("count"), :graph.dimensions ("LONGITUDE" "LATITUDE")}},
   :col 0,
   :id G__355533,
   :card_id G__355531,
   :visualization_settings {},
   :size_y 6,
   :row 14}
  {:size_x 18,
   :dashboard_tab_id nil,
   :creator_id 2,
   :card nil,
   :col 0,
   :id G__355530,
   :visualization_settings
   {:text "# Where these NZJAUAHWDQHEPVTJGRMV are",
    :virtual_card {:name nil, :display :text, :dataset_query {}, :visualization_settings {}},
    :dashcard.background false,
    :text.align_vertical :bottom},
   :size_y 2,
   :row 12}
  {:size_x 6,
   :dashboard_tab_id nil,
   :card
   {:description nil,
    :table_id nil,
    :database_id 1,
    :collection_id nil,
    :query_type :query,
    :name "NZJAUAHWDQHEPVTJGRMV by PRICE",
    :creator_id 2,
    :dataset_query
    {:type :query,
     :database 1,
     :query
     {:source-table "card__1155",
      :filter [:and [:> [:field "PRICE" {:base-type :type/Number}] 10]],
      :breakout ([:field "PRICE" {:base-type :type/Integer, :binning {:strategy :default}}]),
      :aggregation (["count"])}},
    :id G__355527,
    :display "bar",
    :visualization_settings
    {:graph.series_labels ("number"),
     :graph.metrics ("count"),
     :graph.dimensions ("PRICE"),
     :graph.colors ["#A989C5"]}},
   :col 0,
   :id G__355529,
   :card_id G__355527,
   :visualization_settings {},
   :size_y 4,
   :row 8}
  {:size_x 18,
   :dashboard_tab_id nil,
   :creator_id 2,
   :card nil,
   :col 0,
   :id G__355526,
   :visualization_settings
   {:text "# How these NZJAUAHWDQHEPVTJGRMV are distributed",
    :virtual_card {:name nil, :display :text, :dataset_query {}, :visualization_settings {}},
    :dashcard.background false,
    :text.align_vertical :bottom},
   :size_y 2,
   :row 6}
  {:size_x 6,
   :dashboard_tab_id nil,
   :card
   {:description nil,
    :table_id nil,
    :database_id 1,
    :collection_id nil,
    :query_type :query,
    :name "Total NZJAUAHWDQHEPVTJGRMV",
    :creator_id 2,
    :dataset_query
    {:type :query,
     :database 1,
     :query
     {:source-table "card__1155",
      :filter [:and [:> [:field "PRICE" {:base-type :type/Number}] 10]],
      :aggregation (["count"])}},
    :id G__355523,
    :display "scalar",
    :visualization_settings {:graph.series_labels ("number"), :graph.metrics ("count"), :graph.dimensions ()}},
   :col 0,
   :id G__355525,
   :card_id G__355523,
   :visualization_settings {},
   :size_y 4,
   :row 2}
  {:size_x 18,
   :dashboard_tab_id nil,
   :creator_id 2,
   :card nil,
   :col 0,
   :id G__355522,
   :visualization_settings
   {:text "# Summary",
    :virtual_card {:name nil, :display :text, :dataset_query {}, :visualization_settings {}},
    :dashcard.background false,
    :text.align_vertical :bottom},
   :size_y 2,
   :row 0}),
 :name "A look at \"YNXNVWAXYRBWFNOLQCIM\"",
 :transient_filters [:> [:field "PRICE" {:base-type :type/Number}] 10],
 :related
 {:compare
  ({:url
    "/auto/dashboard/question/1156/compare/adhoc/eyJkYXRhYmFzZSI6MSwidHlwZSI6InF1ZXJ5IiwicXVlcnkiOnsic291cmNlLXRhYmxlIjoiY2FyZF9fMTE1NSJ9fQ==",
    :title "Compare with entire dataset",
    :description ""})},
 :creator_id 2,
 :transient_name "Here's a quick look at \"YNXNVWAXYRBWFNOLQCIM\"",
 :more nil,
 :param_fields
 {"PRICE"
  (toucan2.instance/instance
   :model/Field
   {:display_name "PRICE",
    :field_ref [:field "PRICE" {:base-type :type/Integer}],
    :name "PRICE",
    :base_type :type/Integer,
    :effective_type :type/Integer,
    :semantic_type nil,
    :fingerprint
    {:global {:distinct-count 4, :nil% 0.0},
     :type
     #:type{:Number
            {:min 1.0,
             :q1 1.4591129021415095,
             :q3 2.493086095768049,
             :max 4.0,
             :sd 0.7713951678941896,
             :avg 2.03}}}})},
 :parameters [],
 :auto_apply_filters true}

 Cards should have correct cardinality
expected: [36m8[0m
  actual: [36m6[0m


LONG TEST in metabase.cmd.dump-to-h2-test/dump-to-h2-dump-plaintext-test
Test took 7.350 seconds seconds to run

LONG TEST in metabase.cmd.load-and-dump-test/load-and-dump-test
Test took 2.273 seconds seconds to run

LONG TEST in metabase.cmd.rotate-encryption-key-test/rotate-encryption-key!-test
Test took 2.576 seconds seconds to run

LONG TEST in metabase.db.custom-migrations-test/downgrade-dashboard-tabs-test
Test took 1.545 seconds seconds to run

LONG TEST in metabase.db.schema-migrations-test/grant-all-users-root-snippets-collection-readwrite-perms-test
Test took 2.102 seconds seconds to run

LONG TEST in metabase.db.schema-migrations-test/rollback-test
Test took 1.837 seconds seconds to run

LONG TEST in metabase.db.schema-migrations-test/add-migrated-collections-test
Test took 4.309 seconds seconds to run

FAIL in metabase.driver.common.parameters.values-test/card-query-test (values_test.clj:325)
with test user :rasta
 Card query template tag generates native query for MBQL query 
with temporary :model/Card with attributes
{:creator_id 2,
 :database_id 1,
 :dataset_query
 {:database 1, :type :query, :query {:database 1, :filter [:< [:field [:field 3 nil] nil] 3], :source-table 1}},
 :display :table,
 :name "YJZBGXIUISUGDUHGEUPX",
 :visualization_settings {}}


expected: [1;31m{[0m[1;33m:card-id[0m [36m1214[0m,
           [1;33m:params[0m [1;30mnil[0m,
           [1;33m:query[0m [1;35m"SELECT \"PUBLIC\".\"VENUES\".\"ID\" AS \"ID\", \"PUBLIC\".\"VENUES\".\"NAME\" AS \"NAME\", \"PUBLIC\".\"VENUES\".\"CATEGORY_ID\" AS \"CATEGORY_ID\", \"PUBLIC\".\"VENUES\".\"LATITUDE\" AS \"LATITUDE\", \"PUBLIC\".\"VENUES\".\"LONGITUDE\" AS \"LONGITUDE\", \"PUBLIC\".\"VENUES\".\"PRICE\" AS \"PRICE\" FROM \"PUBLIC\".\"VENUES\" WHERE \"PUBLIC\".\"VENUES\".\"PRICE\" < 3 LIMIT 1048575"[0m[1;31m}[0m
  actual: [1;31m{[0m[1;33m:card-id[0m [36m1214[0m,
           [1;33m:params[0m [1;30mnil[0m,
           [1;33m:query[0m [1;35m"SELECT \"PUBLIC\".\"VENUES\".\"ID\" AS \"ID\", \"PUBLIC\".\"VENUES\".\"NAME\" AS \"NAME\", \"PUBLIC\".\"VENUES\".\"CATEGORY_ID\" AS \"CATEGORY_ID\", \"PUBLIC\".\"VENUES\".\"LATITUDE\" AS \"LATITUDE\", \"PUBLIC\".\"VENUES\".\"LONGITUDE\" AS \"LONGITUDE\", \"PUBLIC\".\"VENUES\".\"PRICE\" AS \"PRICE\" FROM \"PUBLIC\".\"VENUES\" WHERE \"PUBLIC\".\"VENUES\".\"PRICE\" < 3 LIMIT 2000"[0m[1;31m}[0m
    diff: - [1;31m{[0m[1;33m:query[0m [1;35m"SELECT \"PUBLIC\".\"VENUES\".\"ID\" AS \"ID\", \"PUBLIC\".\"VENUES\".\"NAME\" AS \"NAME\", \"PUBLIC\".\"VENUES\".\"CATEGORY_ID\" AS \"CATEGORY_ID\", \"PUBLIC\".\"VENUES\".\"LATITUDE\" AS \"LATITUDE\", \"PUBLIC\".\"VENUES\".\"LONGITUDE\" AS \"LONGITUDE\", \"PUBLIC\".\"VENUES\".\"PRICE\" AS \"PRICE\" FROM \"PUBLIC\".\"VENUES\" WHERE \"PUBLIC\".\"VENUES\".\"PRICE\" < 3 LIMIT 1048575"[0m[1;31m}[0m
          + [1;31m{[0m[1;33m:query[0m [1;35m"SELECT \"PUBLIC\".\"VENUES\".\"ID\" AS \"ID\", \"PUBLIC\".\"VENUES\".\"NAME\" AS \"NAME\", \"PUBLIC\".\"VENUES\".\"CATEGORY_ID\" AS \"CATEGORY_ID\", \"PUBLIC\".\"VENUES\".\"LATITUDE\" AS \"LATITUDE\", \"PUBLIC\".\"VENUES\".\"LONGITUDE\" AS \"LONGITUDE\", \"PUBLIC\".\"VENUES\".\"PRICE\" AS \"PRICE\" FROM \"PUBLIC\".\"VENUES\" WHERE \"PUBLIC\".\"VENUES\".\"PRICE\" < 3 LIMIT 2000"[0m[1;31m}[0m

FAIL in metabase.driver.sql.query-processor-test/binning-optimize-math-expressions-test (query_processor_test.clj:1100)
Don't include nonsense like `+ 0.0` and `- 0.0` when generating expressions for binning [35musing sample-dataset dataset
[0m
expected: [1;31m[[0m[1;35m"SELECT"[0m
           [1;35m"  FLOOR((ORDERS.QUANTITY / 10)) * 10 AS QUANTITY,"[0m
           [1;35m"  COUNT(*) AS count"[0m
           [1;35m"FROM"[0m
           [1;35m"  ORDERS"[0m
           [1;35m"GROUP BY"[0m
           [1;35m"  FLOOR((ORDERS.QUANTITY / 10)) * 10"[0m
           [1;35m"ORDER BY"[0m
           [1;35m"  FLOOR((ORDERS.QUANTITY / 10)) * 10 ASC"[0m[1;31m][0m
  actual: [1;31m[[0m[1;35m"SELECT"[0m
           [1;35m"  FLOOR((ORDERS.QUANTITY / 7.5)) * 7.5 AS QUANTITY,"[0m
           [1;35m"  COUNT(*) AS count"[0m
           [1;35m"FROM"[0m
           [1;35m"  ORDERS"[0m
           [1;35m"GROUP BY"[0m
           [1;35m"  FLOOR((ORDERS.QUANTITY / 7.5)) * 7.5"[0m
           [1;35m"ORDER BY"[0m
           [1;35m"  FLOOR((ORDERS.QUANTITY / 7.5)) * 7.5 ASC"[0m[1;31m][0m
    diff: - [1;31m[[0m[1;30mnil[0m
             [1;35m"  FLOOR((ORDERS.QUANTITY / 10)) * 10 AS QUANTITY,"[0m
             [1;30mnil[0m
             [1;30mnil[0m
             [1;30mnil[0m
             [1;30mnil[0m
             [1;35m"  FLOOR((ORDERS.QUANTITY / 10)) * 10"[0m
             [1;30mnil[0m
             [1;35m"  FLOOR((ORDERS.QUANTITY / 10)) * 10 ASC"[0m[1;31m][0m
          + [1;31m[[0m[1;30mnil[0m
             [1;35m"  FLOOR((ORDERS.QUANTITY / 7.5)) * 7.5 AS QUANTITY,"[0m
             [1;30mnil[0m
             [1;30mnil[0m
             [1;30mnil[0m
             [1;30mnil[0m
             [1;35m"  FLOOR((ORDERS.QUANTITY / 7.5)) * 7.5"[0m
             [1;30mnil[0m
             [1;35m"  FLOOR((ORDERS.QUANTITY / 7.5)) * 7.5 ASC"[0m[1;31m][0m

FAIL in metabase.driver.sql.query-processor-test/joined-field-clauses-test (query_processor_test.clj:328)
Should correctly compile `:field` clauses with `:join-alias` when the join is at the same level
expected: [1;31m{[0m[1;33m:from[0m [1;31m[[0mVENUES[1;31m][0m,
           [1;33m:left-join[0m [1;31m[[0mCATEGORIES AS c ON VENUES.CATEGORY_ID = c.ID[1;31m][0m,
           [1;33m:limit[0m [1;31m[[0m[36m1048575[0m[1;31m][0m,
           [1;33m:select[0m [1;31m[[0mc.NAME AS c__NAME[1;31m][0m[1;31m}[0m
  actual: [1;31m{[0m[1;33m:from[0m [1;31m[[0mVENUES[1;31m][0m,
           [1;33m:left-join[0m [1;31m[[0mCATEGORIES AS c ON VENUES.CATEGORY_ID = c.ID[1;31m][0m,
           [1;33m:limit[0m [1;31m[[0m[36m2000[0m[1;31m][0m,
           [1;33m:select[0m [1;31m[[0mc.NAME AS c__NAME[1;31m][0m[1;31m}[0m
    diff: - [1;31m{[0m[1;33m:limit[0m [1;31m[[0m[36m1048575[0m[1;31m][0m[1;31m}[0m
          + [1;31m{[0m[1;33m:limit[0m [1;31m[[0m[36m2000[0m[1;31m][0m[1;31m}[0m

FAIL in metabase.driver.sql.query-processor-test/joined-field-clauses-test (query_processor_test.clj:343)
Should correctly compile `:field` clauses with `:join-alias` when the join is NOT at the same level
expected: [1;31m{[0m[1;33m:from[0m [1;31m[[0m[1;31m{[0m[1;33m:from[0m [1;31m[[0mVENUES[1;31m][0m,
                   [1;33m:left-join[0m [1;31m[[0mCATEGORIES AS c ON VENUES.CATEGORY_ID = c.ID[1;31m][0m,
                   [1;33m:select[0m [1;31m[[0mc.NAME AS c__NAME[1;31m][0m[1;31m}[0m
                  AS
                  source[1;31m][0m,
           [1;33m:limit[0m [1;31m[[0m[36m1048575[0m[1;31m][0m,
           [1;33m:select[0m [1;31m[[0msource.c__NAME AS c__NAME[1;31m][0m[1;31m}[0m
  actual: [1;31m{[0m[1;33m:from[0m [1;31m[[0m[1;31m{[0m[1;33m:from[0m [1;31m[[0mVENUES[1;31m][0m,
                   [1;33m:left-join[0m [1;31m[[0mCATEGORIES AS c ON VENUES.CATEGORY_ID = c.ID[1;31m][0m,
                   [1;33m:select[0m [1;31m[[0mc.NAME AS c__NAME[1;31m][0m[1;31m}[0m
                  AS
                  source[1;31m][0m,
           [1;33m:limit[0m [1;31m[[0m[36m2000[0m[1;31m][0m,
           [1;33m:select[0m [1;31m[[0msource.c__NAME AS c__NAME[1;31m][0m[1;31m}[0m
    diff: - [1;31m{[0m[1;33m:limit[0m [1;31m[[0m[36m1048575[0m[1;31m][0m[1;31m}[0m
          + [1;31m{[0m[1;33m:limit[0m [1;31m[[0m[36m2000[0m[1;31m][0m[1;31m}[0m
Created a new logger for metabase.email
ERROR TypeError: Cannot read property 'table.column_formatting' of null
[main] TRACE metabase.email.messages - NOT including CSV attachment for Card "card-name" because less than 10 rows in results
Created a new logger for metabase.logger

FAIL in metabase.models.database-test/can-read-database-setting-test (database_test.clj:84)
authenticated users should see settings with authenticated visibility
expected: [1;31m{[0m[1;35m"description"[0m [1;30mnil[0m,
           [1;35m"id"[0m [36m3[0m,
           [1;35m"name"[0m [1;35m"testpg"[0m,
           [1;35m"settings"[0m [1;31m{[0m[1;35m"database-enable-actions"[0m [32mtrue[0m,
                       [1;35m"max-results-bare-rows"[0m [36m2000[0m[1;31m}[0m[1;31m}[0m
  actual: [1;31m{[0m[1;35m"description"[0m [1;30mnil[0m,
           [1;35m"id"[0m [36m3[0m,
           [1;35m"name"[0m [1;35m"testpg"[0m,
           [1;35m"settings"[0m [1;31m{[0m[1;35m"database-enable-actions"[0m [32mtrue[0m[1;31m}[0m[1;31m}[0m
    diff: - [1;31m{[0m[1;35m"settings"[0m [1;31m{[0m[1;35m"max-results-bare-rows"[0m [36m2000[0m[1;31m}[0m[1;31m}[0m


LONG TEST in metabase.models.humanization-test/do-not-overwrite-custom-names-test
Test took 1.582 seconds seconds to run

LONG TEST in metabase.models.user-test/new-user-emails-test
Test took 1.921 seconds seconds to run

LONG TEST in metabase.pulse-test/rows-alert-test
Test took 2.053 seconds seconds to run

FAIL in metabase.pulse-test/ensure-constraints-test (pulse_test.clj:365)
Validate pulse queries are limited by `default-query-constraints` sent to :email channel 
with temporary :model/Card with attributes
{:creator_id 2,
 :database_id 1,
 :dataset_query {:database 1, :type :query, :query {:source-table 3, :aggregation nil}},
 :display :table,
 :name "Test card",
 :visualization_settings {}}

 
with temporary :model/Pulse with attributes
{:creator_id 2, :name "Pulse Name"}

 
with temporary :model/PulseCard with attributes
{:position 0, :include_csv false, :include_xls false, :pulse_id 300, :card_id 1504}

 
with temporary :model/PulseChannel with attributes
{:channel_type :email, :details {}, :schedule_type :daily, :schedule_hour 15, :pulse_id 300}

 
with temporary :model/PulseChannelRecipient with attributes
{:user_id 2, :pulse_channel_id 229}

 [34m
Setting :email-smtp-host = "fake_smtp_host"
[0m [34m
Setting :email-smtp-port = 587
[0m [34m
Setting :site-url = "https://metabase.com/testmb"
[0m tmp file = %sfile:/var/folders/h2/4pvwgwrx7wx5m08_pv3kpvl40000gn/T/metabase_attachment18409925165173100007csv Slurp in the generated CSV and count the lines found in the file Should return 30 results (the redef'd limit) plus the header row
expected: [36m31[0m
  actual: [36m1001[0m


FAIL in metabase.query-processor-test.constraints-test/override-limit-test (constraints_test.clj:49)

[36m:h2[0m constraints should override MBQL `:limit` if lower
expected: [1;31m[[0m[1;31m[[0m[1;35m"Red Medicine"[0m[1;31m][0m [1;31m[[0m[1;35m"Stout Burgers & Beers"[0m[1;31m][0m [1;31m[[0m[1;35m"The Apple Pan"[0m[1;31m][0m[1;31m][0m
  actual: [1;31m[[0m[1;31m[[0m[1;35m"Red Medicine"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Stout Burgers & Beers"[0m[1;31m][0m
           [1;31m[[0m[1;35m"The Apple Pan"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Wurstküche"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Brite Spot Family Restaurant"[0m[1;31m][0m
           [1;31m[[0m[1;35m"The 101 Coffee Shop"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Don Day Korean Restaurant"[0m[1;31m][0m
           [1;31m[[0m[1;35m"25°"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Krua Siri"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Fred 62"[0m[1;31m][0m[1;31m][0m
    diff: + [1;31m[[0m[1;30mnil[0m
             [1;30mnil[0m
             [1;30mnil[0m
             [1;31m[[0m[1;35m"Wurstküche"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Brite Spot Family Restaurant"[0m[1;31m][0m
             [1;31m[[0m[1;35m"The 101 Coffee Shop"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Don Day Korean Restaurant"[0m[1;31m][0m
             [1;31m[[0m[1;35m"25°"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Krua Siri"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Fred 62"[0m[1;31m][0m[1;31m][0m

FAIL in metabase.query-processor-test.constraints-test/max-results-test (constraints_test.clj:19)

[36m:h2[0m Do `:max-results` constraints affect the number of rows returned by native queries?
expected: [1;31m[[0m[1;31m[[0m[1;35m"Red Medicine"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Stout Burgers & Beers"[0m[1;31m][0m
           [1;31m[[0m[1;35m"The Apple Pan"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Wurstküche"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Brite Spot Family Restaurant"[0m[1;31m][0m[1;31m][0m
  actual: [1;31m[[0m[1;31m[[0m[1;35m"Red Medicine"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Stout Burgers & Beers"[0m[1;31m][0m
           [1;31m[[0m[1;35m"The Apple Pan"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Wurstküche"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Brite Spot Family Restaurant"[0m[1;31m][0m
           [1;31m[[0m[1;35m"The 101 Coffee Shop"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Don Day Korean Restaurant"[0m[1;31m][0m
           [1;31m[[0m[1;35m"25°"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Krua Siri"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Fred 62"[0m[1;31m][0m
           [1;31m[[0m[1;35m"The Gorbals"[0m[1;31m][0m
           [1;31m[[0m[1;35m"The Misfit Restaurant + Bar"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Pellicola Pizzeria"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Jones Hollywood"[0m[1;31m][0m
           [1;31m[[0m[1;35m"BCD Tofu House"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Pacific Dining Car - Santa Monica"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Ruen Pair Thai Restaurant"[0m[1;31m][0m
           [1;31m[[0m[1;35m"The Original Pantry"[0m[1;31m][0m
           [1;31m[[0m[1;35m"800 Degrees Neapolitan Pizzeria"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Greenblatt's Delicatessen & Fine Wine Shop"[0m[1;31m][0m
           [1;31m[[0m[1;35m"PizzaHacker"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Gordo Taqueria"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Taqueria Los Coyotes"[0m[1;31m][0m
           [1;31m[[0m[1;35m"La Tortilla"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Garaje"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Taqueria San Francisco"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Tout Sweet Patisserie"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Liguria Bakery"[0m[1;31m][0m
           [1;31m[[0m[1;35m"20th Century Cafe"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Noe Valley Bakery"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Bludso's BBQ"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Boneyard Bistro"[0m[1;31m][0m
           [1;31m[[0m[1;35m"My Brother's Bar-B-Q"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Beachwood BBQ & Brewing"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Smoke City Market"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Handy Market"[0m[1;31m][0m
           [1;31m[[0m[1;35m"bigmista's barbecue"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Zeke's Smokehouse"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Baby Blues BBQ"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Dear Mom"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Cheese Steak Shop"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Little Star Pizza"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Marnee Thai"[0m[1;31m][0m
           [1;31m[[0m[1;35m"In-N-Out Burger"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Tu Lan Restaurant"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Shanghai Dumpling King"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Marlowe"[0m[1;31m][0m
           [1;31m[[0m[1;35m"The Residence"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Hotel Biron"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Two Sisters Bar & Books"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Empress of China"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Cole's"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Tam O'Shanter"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Yamashiro Hollywood"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Dal Rae Restaurant"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Philippe the Original"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Musso & Frank Grill"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Taylor's Prime Steak House"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Pacific Dining Car"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Polo Lounge"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Lawry's The Prime Rib"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Hot Sauce and Panko"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Giordano Bros."[0m[1;31m][0m
           [1;31m[[0m[1;35m"Festa"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Slate"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Playground"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Mint Karaoke Lounge"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Dimples"[0m[1;31m][0m
           [1;31m[[0m[1;35m"The Virgil"[0m[1;31m][0m
           [1;31m[[0m[1;35m"The Drawing Room"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Frolic Room"[0m[1;31m][0m
           [1;31m[[0m[1;35m"The Daily Pint"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Pineapple Hill Saloon & Grill"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Chez Jay"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Geido"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Beyond Sushi"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Sushi Nakazawa"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Soto"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Sushi Yasuda"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Blue Ribbon Sushi"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Tanoshi Sushi & Sake Bar"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Bozu"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Sushi Yasaka"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Spitz Eagle Rock"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Cha Cha Chicken"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Yuca's Taqueria"[0m[1;31m][0m
           [1;31m[[0m[1;35m"The Gumbo Pot"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Kinaree Thai Bistro"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Tacos Villa Corona"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Señor Fish"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Manuel's Original El Tepeyac Cafe"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Tito's Tacos"[0m[1;31m][0m
           [1;31m[[0m[1;35m"33 Taps"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Ye Rustic Inn"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Rush Street"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Busby's West"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Barney's Beanery"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Lucky Baldwin's Pub"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Golden Road Brewing"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Mohawk Bend"[0m[1;31m][0m[1;31m][0m
    diff: + [1;31m[[0m[1;30mnil[0m
             [1;30mnil[0m
             [1;30mnil[0m
             [1;30mnil[0m
             [1;30mnil[0m
             [1;31m[[0m[1;35m"The 101 Coffee Shop"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Don Day Korean Restaurant"[0m[1;31m][0m
             [1;31m[[0m[1;35m"25°"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Krua Siri"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Fred 62"[0m[1;31m][0m
             [1;31m[[0m[1;35m"The Gorbals"[0m[1;31m][0m
             [1;31m[[0m[1;35m"The Misfit Restaurant + Bar"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Pellicola Pizzeria"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Jones Hollywood"[0m[1;31m][0m
             [1;31m[[0m[1;35m"BCD Tofu House"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Pacific Dining Car - Santa Monica"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Ruen Pair Thai Restaurant"[0m[1;31m][0m
             [1;31m[[0m[1;35m"The Original Pantry"[0m[1;31m][0m
             [1;31m[[0m[1;35m"800 Degrees Neapolitan Pizzeria"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Greenblatt's Delicatessen & Fine Wine Shop"[0m[1;31m][0m
             [1;31m[[0m[1;35m"PizzaHacker"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Gordo Taqueria"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Taqueria Los Coyotes"[0m[1;31m][0m
             [1;31m[[0m[1;35m"La Tortilla"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Garaje"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Taqueria San Francisco"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Tout Sweet Patisserie"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Liguria Bakery"[0m[1;31m][0m
             [1;31m[[0m[1;35m"20th Century Cafe"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Noe Valley Bakery"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Bludso's BBQ"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Boneyard Bistro"[0m[1;31m][0m
             [1;31m[[0m[1;35m"My Brother's Bar-B-Q"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Beachwood BBQ & Brewing"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Smoke City Market"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Handy Market"[0m[1;31m][0m
             [1;31m[[0m[1;35m"bigmista's barbecue"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Zeke's Smokehouse"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Baby Blues BBQ"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Dear Mom"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Cheese Steak Shop"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Little Star Pizza"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Marnee Thai"[0m[1;31m][0m
             [1;31m[[0m[1;35m"In-N-Out Burger"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Tu Lan Restaurant"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Shanghai Dumpling King"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Marlowe"[0m[1;31m][0m
             [1;31m[[0m[1;35m"The Residence"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Hotel Biron"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Two Sisters Bar & Books"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Empress of China"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Cole's"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Tam O'Shanter"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Yamashiro Hollywood"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Dal Rae Restaurant"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Philippe the Original"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Musso & Frank Grill"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Taylor's Prime Steak House"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Pacific Dining Car"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Polo Lounge"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Lawry's The Prime Rib"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Hot Sauce and Panko"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Giordano Bros."[0m[1;31m][0m
             [1;31m[[0m[1;35m"Festa"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Slate"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Playground"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Mint Karaoke Lounge"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Dimples"[0m[1;31m][0m
             [1;31m[[0m[1;35m"The Virgil"[0m[1;31m][0m
             [1;31m[[0m[1;35m"The Drawing Room"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Frolic Room"[0m[1;31m][0m
             [1;31m[[0m[1;35m"The Daily Pint"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Pineapple Hill Saloon & Grill"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Chez Jay"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Geido"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Beyond Sushi"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Sushi Nakazawa"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Soto"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Sushi Yasuda"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Blue Ribbon Sushi"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Tanoshi Sushi & Sake Bar"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Bozu"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Sushi Yasaka"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Spitz Eagle Rock"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Cha Cha Chicken"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Yuca's Taqueria"[0m[1;31m][0m
             [1;31m[[0m[1;35m"The Gumbo Pot"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Kinaree Thai Bistro"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Tacos Villa Corona"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Señor Fish"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Manuel's Original El Tepeyac Cafe"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Tito's Tacos"[0m[1;31m][0m
             [1;31m[[0m[1;35m"33 Taps"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Ye Rustic Inn"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Rush Street"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Busby's West"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Barney's Beanery"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Lucky Baldwin's Pub"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Golden Road Brewing"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Mohawk Bend"[0m[1;31m][0m[1;31m][0m

FAIL in metabase.query-processor-test.constraints-test/max-results-test (constraints_test.clj:33)

[36m:h2[0m does it also work when running via `process-query-and-save-with-max-results-constraints!`, the function that powers endpoints like `POST /api/dataset`?
expected: [1;31m[[0m[1;31m[[0m[1;35m"Red Medicine"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Stout Burgers & Beers"[0m[1;31m][0m
           [1;31m[[0m[1;35m"The Apple Pan"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Wurstküche"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Brite Spot Family Restaurant"[0m[1;31m][0m[1;31m][0m
  actual: [1;31m[[0m[1;31m[[0m[1;35m"Red Medicine"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Stout Burgers & Beers"[0m[1;31m][0m
           [1;31m[[0m[1;35m"The Apple Pan"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Wurstküche"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Brite Spot Family Restaurant"[0m[1;31m][0m
           [1;31m[[0m[1;35m"The 101 Coffee Shop"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Don Day Korean Restaurant"[0m[1;31m][0m
           [1;31m[[0m[1;35m"25°"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Krua Siri"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Fred 62"[0m[1;31m][0m
           [1;31m[[0m[1;35m"The Gorbals"[0m[1;31m][0m
           [1;31m[[0m[1;35m"The Misfit Restaurant + Bar"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Pellicola Pizzeria"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Jones Hollywood"[0m[1;31m][0m
           [1;31m[[0m[1;35m"BCD Tofu House"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Pacific Dining Car - Santa Monica"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Ruen Pair Thai Restaurant"[0m[1;31m][0m
           [1;31m[[0m[1;35m"The Original Pantry"[0m[1;31m][0m
           [1;31m[[0m[1;35m"800 Degrees Neapolitan Pizzeria"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Greenblatt's Delicatessen & Fine Wine Shop"[0m[1;31m][0m
           [1;31m[[0m[1;35m"PizzaHacker"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Gordo Taqueria"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Taqueria Los Coyotes"[0m[1;31m][0m
           [1;31m[[0m[1;35m"La Tortilla"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Garaje"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Taqueria San Francisco"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Tout Sweet Patisserie"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Liguria Bakery"[0m[1;31m][0m
           [1;31m[[0m[1;35m"20th Century Cafe"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Noe Valley Bakery"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Bludso's BBQ"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Boneyard Bistro"[0m[1;31m][0m
           [1;31m[[0m[1;35m"My Brother's Bar-B-Q"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Beachwood BBQ & Brewing"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Smoke City Market"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Handy Market"[0m[1;31m][0m
           [1;31m[[0m[1;35m"bigmista's barbecue"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Zeke's Smokehouse"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Baby Blues BBQ"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Dear Mom"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Cheese Steak Shop"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Little Star Pizza"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Marnee Thai"[0m[1;31m][0m
           [1;31m[[0m[1;35m"In-N-Out Burger"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Tu Lan Restaurant"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Shanghai Dumpling King"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Marlowe"[0m[1;31m][0m
           [1;31m[[0m[1;35m"The Residence"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Hotel Biron"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Two Sisters Bar & Books"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Empress of China"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Cole's"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Tam O'Shanter"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Yamashiro Hollywood"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Dal Rae Restaurant"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Philippe the Original"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Musso & Frank Grill"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Taylor's Prime Steak House"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Pacific Dining Car"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Polo Lounge"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Lawry's The Prime Rib"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Hot Sauce and Panko"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Giordano Bros."[0m[1;31m][0m
           [1;31m[[0m[1;35m"Festa"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Slate"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Playground"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Mint Karaoke Lounge"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Dimples"[0m[1;31m][0m
           [1;31m[[0m[1;35m"The Virgil"[0m[1;31m][0m
           [1;31m[[0m[1;35m"The Drawing Room"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Frolic Room"[0m[1;31m][0m
           [1;31m[[0m[1;35m"The Daily Pint"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Pineapple Hill Saloon & Grill"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Chez Jay"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Geido"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Beyond Sushi"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Sushi Nakazawa"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Soto"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Sushi Yasuda"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Blue Ribbon Sushi"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Tanoshi Sushi & Sake Bar"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Bozu"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Sushi Yasaka"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Spitz Eagle Rock"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Cha Cha Chicken"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Yuca's Taqueria"[0m[1;31m][0m
           [1;31m[[0m[1;35m"The Gumbo Pot"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Kinaree Thai Bistro"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Tacos Villa Corona"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Señor Fish"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Manuel's Original El Tepeyac Cafe"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Tito's Tacos"[0m[1;31m][0m
           [1;31m[[0m[1;35m"33 Taps"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Ye Rustic Inn"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Rush Street"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Busby's West"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Barney's Beanery"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Lucky Baldwin's Pub"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Golden Road Brewing"[0m[1;31m][0m
           [1;31m[[0m[1;35m"Mohawk Bend"[0m[1;31m][0m[1;31m][0m
    diff: + [1;31m[[0m[1;30mnil[0m
             [1;30mnil[0m
             [1;30mnil[0m
             [1;30mnil[0m
             [1;30mnil[0m
             [1;31m[[0m[1;35m"The 101 Coffee Shop"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Don Day Korean Restaurant"[0m[1;31m][0m
             [1;31m[[0m[1;35m"25°"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Krua Siri"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Fred 62"[0m[1;31m][0m
             [1;31m[[0m[1;35m"The Gorbals"[0m[1;31m][0m
             [1;31m[[0m[1;35m"The Misfit Restaurant + Bar"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Pellicola Pizzeria"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Jones Hollywood"[0m[1;31m][0m
             [1;31m[[0m[1;35m"BCD Tofu House"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Pacific Dining Car - Santa Monica"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Ruen Pair Thai Restaurant"[0m[1;31m][0m
             [1;31m[[0m[1;35m"The Original Pantry"[0m[1;31m][0m
             [1;31m[[0m[1;35m"800 Degrees Neapolitan Pizzeria"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Greenblatt's Delicatessen & Fine Wine Shop"[0m[1;31m][0m
             [1;31m[[0m[1;35m"PizzaHacker"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Gordo Taqueria"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Taqueria Los Coyotes"[0m[1;31m][0m
             [1;31m[[0m[1;35m"La Tortilla"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Garaje"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Taqueria San Francisco"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Tout Sweet Patisserie"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Liguria Bakery"[0m[1;31m][0m
             [1;31m[[0m[1;35m"20th Century Cafe"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Noe Valley Bakery"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Bludso's BBQ"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Boneyard Bistro"[0m[1;31m][0m
             [1;31m[[0m[1;35m"My Brother's Bar-B-Q"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Beachwood BBQ & Brewing"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Smoke City Market"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Handy Market"[0m[1;31m][0m
             [1;31m[[0m[1;35m"bigmista's barbecue"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Zeke's Smokehouse"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Baby Blues BBQ"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Dear Mom"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Cheese Steak Shop"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Little Star Pizza"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Marnee Thai"[0m[1;31m][0m
             [1;31m[[0m[1;35m"In-N-Out Burger"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Tu Lan Restaurant"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Shanghai Dumpling King"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Marlowe"[0m[1;31m][0m
             [1;31m[[0m[1;35m"The Residence"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Hotel Biron"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Two Sisters Bar & Books"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Empress of China"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Cole's"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Tam O'Shanter"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Yamashiro Hollywood"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Dal Rae Restaurant"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Philippe the Original"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Musso & Frank Grill"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Taylor's Prime Steak House"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Pacific Dining Car"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Polo Lounge"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Lawry's The Prime Rib"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Hot Sauce and Panko"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Giordano Bros."[0m[1;31m][0m
             [1;31m[[0m[1;35m"Festa"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Slate"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Playground"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Mint Karaoke Lounge"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Dimples"[0m[1;31m][0m
             [1;31m[[0m[1;35m"The Virgil"[0m[1;31m][0m
             [1;31m[[0m[1;35m"The Drawing Room"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Frolic Room"[0m[1;31m][0m
             [1;31m[[0m[1;35m"The Daily Pint"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Pineapple Hill Saloon & Grill"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Chez Jay"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Geido"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Beyond Sushi"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Sushi Nakazawa"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Soto"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Sushi Yasuda"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Blue Ribbon Sushi"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Tanoshi Sushi & Sake Bar"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Bozu"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Sushi Yasaka"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Spitz Eagle Rock"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Cha Cha Chicken"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Yuca's Taqueria"[0m[1;31m][0m
             [1;31m[[0m[1;35m"The Gumbo Pot"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Kinaree Thai Bistro"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Tacos Villa Corona"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Señor Fish"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Manuel's Original El Tepeyac Cafe"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Tito's Tacos"[0m[1;31m][0m
             [1;31m[[0m[1;35m"33 Taps"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Ye Rustic Inn"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Rush Street"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Busby's West"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Barney's Beanery"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Lucky Baldwin's Pub"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Golden Road Brewing"[0m[1;31m][0m
             [1;31m[[0m[1;35m"Mohawk Bend"[0m[1;31m][0m[1;31m][0m

FAIL in metabase.query-processor-test.date-bucketing-test/compile-time-interval-test (date_bucketing_test.clj:1153)
Make sure time-intervals work the way they're supposed to. [:time-interval $date -4 :month] should give us something like Oct 01 2020 - Feb 01 2021 if today is Feb 17 2021
expected: [1;35m"SELECT CHECKINS.DATE AS DATE FROM CHECKINS WHERE (CHECKINS.DATE >= DATE_TRUNC('month', DATEADD('month', CAST(-4 AS long), CAST(NOW() AS datetime)))) AND (CHECKINS.DATE < DATE_TRUNC('month', NOW())) GROUP BY CHECKINS.DATE ORDER BY CHECKINS.DATE ASC LIMIT 1048575"[0m
  actual: [1;35m"SELECT CHECKINS.DATE AS DATE FROM CHECKINS WHERE (CHECKINS.DATE >= DATE_TRUNC('month', DATEADD('month', CAST(-4 AS long), CAST(NOW() AS datetime)))) AND (CHECKINS.DATE < DATE_TRUNC('month', NOW())) GROUP BY CHECKINS.DATE ORDER BY CHECKINS.DATE ASC LIMIT 2000"[0m


LONG TEST in metabase.query-processor-test.date-bucketing-test/additional-unit-filtering-tests
Test took 1.601 seconds seconds to run

LONG TEST in metabase.query-processor-test.date-time-zone-functions-test/datetime-math-tests
Test took 3.326 seconds seconds to run

LONG TEST in metabase.query-processor-test.date-time-zone-functions-test/datetime-diff-time-zones-test
Test took 4.837 seconds seconds to run

LONG TEST in metabase.query-processor-test.date-time-zone-functions-test/extraction-function-tests
Test took 1.540 seconds seconds to run

LONG TEST in metabase.query-processor-test.date-time-zone-functions-test/datetime-diff-base-test
Test took 1.978 seconds seconds to run

FAIL in metabase.query-processor-test.explicit-joins-test/explict-join-with-default-options-test (explicit_joins_test.clj:25)
Can we specify an *explicit* JOIN using the default options? 
Native Query =
SELECT
  "PUBLIC"."VENUES"."ID" AS "ID",
  "PUBLIC"."VENUES"."NAME" AS "NAME",
  "PUBLIC"."VENUES"."CATEGORY_ID" AS "CATEGORY_ID",
  "PUBLIC"."VENUES"."LATITUDE" AS "LATITUDE",
  "PUBLIC"."VENUES"."LONGITUDE" AS "LONGITUDE",
  "PUBLIC"."VENUES"."PRICE" AS "PRICE"
FROM
  "PUBLIC"."VENUES"
  LEFT JOIN "PUBLIC"."CATEGORIES" AS "__join" ON "PUBLIC"."VENUES"."CATEGORY_ID" = 1
LIMIT
  2000

{:params nil}


expected: [1;31m{[0m[1;33m:from[0m [1;31m[[0mVENUES[1;31m][0m,
           [1;33m:left-join[0m [1;31m[[0mCATEGORIES AS __join ON VENUES.CATEGORY_ID = [36m1[0m[1;31m][0m,
           [1;33m:limit[0m [1;31m[[0m[36m1048575[0m[1;31m][0m,
           [1;33m:select[0m [1;31m[[0mVENUES.ID
                    AS
                    ID
                    VENUES.NAME
                    AS
                    NAME
                    VENUES.CATEGORY_ID
                    AS
                    CATEGORY_ID
                    VENUES.LATITUDE
                    AS
                    LATITUDE
                    VENUES.LONGITUDE
                    AS
                    LONGITUDE
                    VENUES.PRICE
                    AS
                    PRICE[1;31m][0m[1;31m}[0m
  actual: [1;31m{[0m[1;33m:from[0m [1;31m[[0mVENUES[1;31m][0m,
           [1;33m:left-join[0m [1;31m[[0mCATEGORIES AS __join ON VENUES.CATEGORY_ID = [36m1[0m[1;31m][0m,
           [1;33m:limit[0m [1;31m[[0m[36m2000[0m[1;31m][0m,
           [1;33m:select[0m [1;31m[[0mVENUES.ID
                    AS
                    ID
                    VENUES.NAME
                    AS
                    NAME
                    VENUES.CATEGORY_ID
                    AS
                    CATEGORY_ID
                    VENUES.LATITUDE
                    AS
                    LATITUDE
                    VENUES.LONGITUDE
                    AS
                    LONGITUDE
                    VENUES.PRICE
                    AS
                    PRICE[1;31m][0m[1;31m}[0m
    diff: - [1;31m{[0m[1;33m:limit[0m [1;31m[[0m[36m1048575[0m[1;31m][0m[1;31m}[0m
          + [1;31m{[0m[1;33m:limit[0m [1;31m[[0m[36m2000[0m[1;31m][0m[1;31m}[0m

LONG TEST in metabase.query-processor-test.expressions-test/no-lazyness-test
Test took 1.615 seconds seconds to run

FAIL in metabase.query-processor-test.failure-test/process-query-and-save-execution-test (failure_test.clj:58)
running via `process-query-and-save-execution!` should return similar info and a bunch of other nonsense too
expected: [1;31m{[0m[1;33m:class[0m java.lang.Class,
           [1;33m:context[0m [1;31m([0m[1;34meq[0m [1;33m:question[0m[1;31m)[0m,
           [1;33m:data[0m [1;31m{[0m[1;33m:cols[0m [1;31m([0m[1;34meq[0m [1;31m[][0m[1;31m)[0m, [1;33m:rows[0m [1;31m([0m[1;34meq[0m [1;31m[][0m[1;31m)[0m[1;31m}[0m,
           [1;33m:database_id[0m [1;31m([0m[1;34meq[0m [36m1[0m[1;31m)[0m,
           [1;33m:error[0m [1;31m([0m[1;34mconstrained[0m Str [1;35m"Non-blank string"[0m[1;31m)[0m,
           [1;33m:json_query[0m [1;31m{[0m[1;33m:database[0m [1;31m([0m[1;34meq[0m [36m1[0m[1;31m)[0m,
                        [1;33m:query[0m [1;31m{[0m[1;33m:fields[0m [1;31m([0m[1;34meq[0m [1;31m[[0m[1;31m[[0m[1;35m"datetime_field"[0m [36m1[0m [1;35m"MONTH"[0m[1;31m][0m[1;31m][0m[1;31m)[0m,
                                [1;33m:source-table[0m [1;31m([0m[1;34meq[0m [36m1[0m[1;31m)[0m[1;31m}[0m,
                        [1;33m:type[0m [1;31m([0m[1;34meq[0m [1;33m:query[0m[1;31m)[0m[1;31m}[0m,
           [1;33m:native[0m [1;31m{[0m[1;33m:params[0m [1;31m([0m[1;34meq[0m [1;30mnil[0m[1;31m)[0m,
                    [1;33m:query[0m [1;31m([0m[1;34meq[0m
                            [1;35m"SELECT DATE_TRUNC('month', \"PUBLIC\".\"VENUES\".\"ID\") AS \"ID\" FROM \"PUBLIC\".\"VENUES\" LIMIT 1048575"[0m[1;31m)[0m[1;31m}[0m,
           [1;33m:preprocessed[0m [1;31m{[0m[1;33m:database[0m [1;31m([0m[1;34meq[0m [36m1[0m[1;31m)[0m,
                          [1;33m:query[0m [1;31m{[0m[1;33m:fields[0m [1;31m([0m[1;34meq[0m
                                           [1;31m[[0m[1;31m[[0m[1;33m:field[0m [36m1[0m [1;31m{[0m[1;33m:temporal-unit[0m [1;33m:month[0m[1;31m}[0m[1;31m][0m[1;31m][0m[1;31m)[0m,
                                  [1;33m:limit[0m [1;31m([0m[1;34meq[0m [36m1048575[0m[1;31m)[0m,
                                  [1;33m:source-table[0m [1;31m([0m[1;34meq[0m [36m1[0m[1;31m)[0m,
                                  Keyword Any[1;31m}[0m,
                          [1;33m:type[0m [1;31m([0m[1;34meq[0m [1;33m:query[0m[1;31m)[0m,
                          Keyword Any,
                          [1;31m([0m[1;34moptional-key[0m [1;33m:driver[0m[1;31m)[0m [1;31m([0m[1;34meq[0m [1;33m:h2[0m[1;31m)[0m[1;31m}[0m,
           [1;33m:row_count[0m [1;31m([0m[1;34meq[0m [36m0[0m[1;31m)[0m,
           [1;33m:running_time[0m [1;31m([0m[1;34mconstrained[0m Int clojure.core$complement/fn--5737[1;31m)[0m,
           [1;33m:stacktrace[0m [1;31m[[0m[1;31m([0m[1;34mconstrained[0m Str [1;35m"Non-blank string"[0m[1;31m)[0m[1;31m][0m,
           [1;33m:started_at[0m java.time.ZonedDateTime,
           [1;33m:status[0m [1;31m([0m[1;34meq[0m [1;33m:failed[0m[1;31m)[0m,
           Keyword Any[1;31m}[0m
  actual: [1;31m{[0m[1;33m:card_id[0m [1;30mnil[0m,
           [1;33m:class[0m [34m#<[0m[1;34mClass[0m[34m@[0m66bd2b72 org.h2.jdbc.JdbcSQLDataException[34m>[0m,
           [1;33m:context[0m [1;33m:question[0m,
           [1;33m:data[0m [1;31m{[0m[1;33m:cols[0m [1;31m[][0m, [1;33m:rows[0m [1;31m[][0m[1;31m}[0m,
           [1;33m:database_id[0m [36m1[0m,
           [1;33m:error[0m [1;35m"Invalid value \"BIGINT\" for parameter \"DATE_TRUNC datetime argument\"; SQL statement:\nSELECT DATE_TRUNC('month', \"PUBLIC\".\"VENUES\".\"ID\") AS \"ID\" FROM \"PUBLIC\".\"VENUES\" LIMIT 2000 [90008-214]"[0m,
           [1;33m:error_type[0m [1;33m:invalid-query[0m,
           [1;33m:json_query[0m [1;31m{[0m[1;33m:database[0m [36m1[0m,
                        [1;33m:query[0m [1;31m{[0m[1;33m:fields[0m [1;31m[[0m[1;31m[[0m[1;35m"datetime_field"[0m [36m1[0m [1;35m"MONTH"[0m[1;31m][0m[1;31m][0m,
                                [1;33m:source-table[0m [36m1[0m[1;31m}[0m,
                        [1;33m:type[0m [1;33m:query[0m[1;31m}[0m,
           [1;33m:native[0m [1;31m{[0m[1;33m:params[0m [1;30mnil[0m,
                    [1;33m:query[0m [1;35m"SELECT DATE_TRUNC('month', \"PUBLIC\".\"VENUES\".\"ID\") AS \"ID\" FROM \"PUBLIC\".\"VENUES\" LIMIT 2000"[0m[1;31m}[0m,
           [1;33m:preprocessed[0m [1;31m{[0m[1;33m:database[0m [36m1[0m,
                          [1;33m:info[0m [1;31m{[0m[1;33m:context[0m [1;33m:question[0m[1;31m}[0m,
                          [1;33m:query[0m [1;31m{[0m[1;33m:fields[0m [1;31m[[0m[1;31m[[0m[1;33m:field[0m [36m1[0m [1;31m{[0m[1;33m:temporal-unit[0m [1;33m:month[0m[1;31m}[0m[1;31m][0m[1;31m][0m,
                                  [1;33m:limit[0m [36m2000[0m,
                                  [1;33m:source-table[0m [36m1[0m,
                                  [1;33m:metabase.query-processor.middleware.limit/original-limit[0m [1;30mnil[0m[1;31m}[0m,
                          [1;33m:type[0m [1;33m:query[0m[1;31m}[0m,
           [1;33m:row_count[0m [36m0[0m,
           [1;33m:running_time[0m [36m0[0m,
           [1;33m:stacktrace[0m [1;31m[[0m[1;35m"org.h2.message.DbException.getJdbcSQLException(DbException.java:646)"[0m
                        [1;35m"org.h2.message.DbException.getJdbcSQLException(DbException.java:477)"[0m
                        [1;35m"org.h2.message.DbException.get(DbException.java:223)"[0m
                        [1;35m"org.h2.mvstore.db.Store.getInvalidExpressionTypeException(Store.java:190)"[0m
                        [1;35m"org.h2.expression.function.DateTimeFunction.optimize(DateTimeFunction.java:977)"[0m
                        [1;35m"org.h2.expression.Alias.optimize(Alias.java:52)"[0m
                        [1;35m"org.h2.command.query.Select.prepareExpressions(Select.java:1170)"[0m
                        [1;35m"org.h2.command.query.Query.prepare(Query.java:218)"[0m
                        [1;35m"org.h2.command.Parser.prepareCommand(Parser.java:575)"[0m
                        [1;35m"org.h2.engine.SessionLocal.prepareLocal(SessionLocal.java:631)"[0m
                        [1;35m"org.h2.engine.SessionLocal.prepareCommand(SessionLocal.java:554)"[0m
                        [1;35m"org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1116)"[0m
                        [1;35m"org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:237)"[0m
                        [1;35m"org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:223)"[0m
                        [1;35m"com.mchange.v2.c3p0.impl.NewProxyStatement.execute(NewProxyStatement.java:75)"[0m
                        [1;35m"--> driver.sql_jdbc.execute$eval108682$fn__108683.invoke(execute.clj:548)"[0m
                        [1;35m"driver.sql_jdbc.execute$execute_statement_or_prepared_statement_BANG_.invokeStatic(execute.clj:556)"[0m
                        [1;35m"driver.sql_jdbc.execute$execute_statement_or_prepared_statement_BANG_.invoke(execute.clj:553)"[0m
                        [1;35m"driver.sql_jdbc.execute$execute_reducible_query$fn__108773$fn__108774.invoke(execute.clj:671)"[0m
                        [1;35m"driver.sql_jdbc.execute$execute_reducible_query$fn__108773.invoke(execute.clj:670)"[0m
                        [1;35m"driver.h2$eval118127$fn__118129$fn__118131.invoke(h2.clj:494)"[0m
                        [1;35m"driver.sql_jdbc.execute$eval108500$do_with_resolved_connection__108501.invoke(execute.clj:334)"[0m
                        [1;35m"driver.h2$eval118127$fn__118129.invoke(h2.clj:485)"[0m
                        [1;35m"driver.sql_jdbc.execute$execute_reducible_query.invokeStatic(execute.clj:664)"[0m
                        [1;35m"driver.sql_jdbc.execute$execute_reducible_query.invoke(execute.clj:653)"[0m
                        [1;35m"driver.sql_jdbc.execute$execute_reducible_query.invokeStatic(execute.clj:661)"[0m
                        [1;35m"driver.sql_jdbc.execute$execute_reducible_query.invoke(execute.clj:653)"[0m
                        [1;35m"driver.sql_jdbc$eval117700$fn__117701.invoke(sql_jdbc.clj:72)"[0m
                        [1;35m"driver.h2$eval117877$fn__117878.invoke(h2.clj:223)"[0m
                        [1;35m"query_processor.context$executef.invokeStatic(context.clj:60)"[0m
                        [1;35m"query_processor.context$executef.invoke(context.clj:49)"[0m
                        [1;35m"query_processor.context.default$default_runf.invokeStatic(default.clj:68)"[0m
                        [1;35m"query_processor.context.default$default_runf.invoke(default.clj:66)"[0m
                        [1;35m"query_processor.context$runf.invokeStatic(context.clj:46)"[0m
                        [1;35m"query_processor.context$runf.invoke(context.clj:40)"[0m
                        [1;35m"query_processor.reducible$identity_qp.invokeStatic(reducible.clj:15)"[0m
                        [1;35m"query_processor.reducible$identity_qp.invoke(reducible.clj:12)"[0m
                        [1;35m"query_processor.middleware.cache$maybe_return_cached_results$maybe_return_cached_results_STAR___92055.invoke(cache.clj:224)"[0m
                        [1;35m"query_processor.middleware.permissions$check_query_permissions$fn__92395.invoke(permissions.clj:126)"[0m
                        [1;35m"metabase_enterprise.advanced_permissions.query_processor.middleware.permissions$check_download_permissions$fn__96054.invoke(permissions.clj:128)"[0m
                        [1;35m"metabase_enterprise.sandbox.query_processor.middleware.column_level_perms_check$maybe_apply_column_level_perms_check$fn__96301.invoke(column_level_perms_check.clj:31)"[0m
                        [1;35m"query_processor.middleware.mbql_to_native$mbql__GT_native$fn__93869.invoke(mbql_to_native.clj:24)"[0m
                        [1;35m"query_processor$fn__96949$combined_post_process__96954$combined_post_process_STAR___96955.invoke(query_processor.clj:260)"[0m
                        [1;35m"query_processor$fn__96949$combined_pre_process__96950$combined_pre_process_STAR___96951.invoke(query_processor.clj:257)"[0m
                        [1;35m"query_processor.middleware.resolve_database_and_driver$resolve_database_and_driver$fn__95157$fn__95162.invoke(resolve_database_and_driver.clj:36)"[0m
                        [1;35m"driver$do_with_driver.invokeStatic(driver.clj:91)"[0m
                        [1;35m"driver$do_with_driver.invoke(driver.clj:86)"[0m
                        [1;35m"query_processor.middleware.resolve_database_and_driver$resolve_database_and_driver$fn__95157.invoke(resolve_database_and_driver.clj:35)"[0m
                        [1;35m"query_processor.middleware.fetch_source_query$resolve_card_id_source_tables$fn__93672.invoke(fetch_source_query.clj:316)"[0m
                        [1;35m"query_processor.middleware.store$initialize_store$fn__95831$fn__95832.invoke(store.clj:12)"[0m
                        [1;35m"query_processor.store$do_with_store.invokeStatic(store.clj:56)"[0m
                        [1;35m"query_processor.store$do_with_store.invoke(store.clj:50)"[0m
                        [1;35m"query_processor.middleware.store$initialize_store$fn__95831.invoke(store.clj:11)"[0m
                        [1;35m"query_processor_test.test_mlv2$around_middleware$fn__76167.invoke(test_mlv2.clj:87)"[0m
                        [1;35m"query_processor.middleware.normalize_query$normalize$fn__93899.invoke(normalize_query.clj:36)"[0m
                        [1;35m"metabase_enterprise.audit_app.query_processor.middleware.handle_audit_queries$handle_internal_queries$fn__96267.invoke(handle_audit_queries.clj:131)"[0m
                        [1;35m"query_processor.middleware.constraints$add_default_userland_constraints$fn__90868.invoke(constraints.clj:53)"[0m
                        [1;35m"query_processor.middleware.process_userland_query$process_userland_query$fn__95029.invoke(process_userland_query.clj:151)"[0m
                        [1;35m"query_processor.middleware.catch_exceptions$catch_exceptions$fn__92519.invoke(catch_exceptions.clj:171)"[0m
                        [1;35m"query_processor.reducible$async_qp$qp_STAR___80331$thunk__80333.invoke(reducible.clj:103)"[0m
                        [1;35m"query_processor.reducible$async_qp$qp_STAR___80331.invoke(reducible.clj:109)"[0m
                        [1;35m"query_processor.reducible$async_qp$qp_STAR___80331.invoke(reducible.clj:94)"[0m
                        [1;35m"query_processor.reducible$async_qp$qp_STAR___80331.invoke(reducible.clj:91)"[0m
                        [1;35m"query_processor.reducible$sync_qp$qp_STAR___80343.doInvoke(reducible.clj:129)"[0m
                        [1;35m"query_processor$process_userland_query.invokeStatic(query_processor.clj:383)"[0m
                        [1;35m"query_processor$process_userland_query.doInvoke(query_processor.clj:379)"[0m
                        [1;35m"query_processor$eval96998$process_query_and_save_execution_BANG___97007$fn__97008.invoke(query_processor.clj:391)"[0m
                        [1;35m"query_processor$eval96998$process_query_and_save_execution_BANG___97007.invoke(query_processor.clj:387)"[0m
                        [1;35m"query_processor_test.failure_test$fn__232678.invokeStatic(failure_test.clj:73)"[0m
                        [1;35m"query_processor_test.failure_test$fn__232678.invoke(failure_test.clj:56)"[0m
                        [1;35m"query_processor_test.failure_test$eval232663$fn__232664$fn__232665.invoke(failure_test.clj:13)"[0m
                        [1;35m"test.util.log$do_with_log_level.invokeStatic(log.clj:145)"[0m
                        [1;35m"test.util.log$do_with_log_level.invoke(log.clj:132)"[0m
                        [1;35m"query_processor_test.failure_test$eval232663$fn__232664.invoke(failure_test.clj:12)"[0m
                        [1;35m"test.redefs$new_with_redefs_fn.invokeStatic(redefs.clj:31)"[0m
                        [1;35m"test.redefs$new_with_redefs_fn.doInvoke(redefs.clj:29)"[0m
                        [1;35m"test_runner$find_and_run_tests_cli.invokeStatic(test_runner.clj:99)"[0m
                        [1;35m"test_runner$find_and_run_tests_cli.invoke(test_runner.clj:96)"[0m[1;31m][0m,
           [1;33m:started_at[0m [34m#<[0m[1;34mjava.time.ZonedDateTime[0m[34m@[0m339fa750 2023-09-02T03:06:56.492858Z[UTC][34m>[0m,
           [1;33m:state[0m [1;35m"90008"[0m,
           [1;33m:status[0m [1;33m:failed[0m,
           [1;33m:via[0m [1;31m[[0m[1;31m{[0m[1;33m:class[0m [34m#<[0m[1;34mClass[0m[34m@[0m59d09ff3 clojure.lang.ExceptionInfo[34m>[0m,
                  [1;33m:error[0m [1;35m"Error executing query: Invalid value \"BIGINT\" for parameter \"DATE_TRUNC datetime argument\"; SQL statement:\nSELECT DATE_TRUNC('month', \"PUBLIC\".\"VENUES\".\"ID\") AS \"ID\" FROM \"PUBLIC\".\"VENUES\" LIMIT 2000 [90008-214]"[0m,
                  [1;33m:error_type[0m [1;33m:invalid-query[0m,
                  [1;33m:ex-data[0m [1;31m{[0m[1;33m:driver[0m [1;33m:h2[0m,
                            [1;33m:params[0m [1;30mnil[0m,
                            [1;33m:sql[0m [1;31m[[0m[1;35m"-- Metabase"[0m
                                  [1;35m"SELECT"[0m
                                  [1;35m"  DATE_TRUNC('month', \"PUBLIC\".\"VENUES\".\"ID\") AS \"ID\""[0m
                                  [1;35m"FROM"[0m
                                  [1;35m"  \"PUBLIC\".\"VENUES\""[0m
                                  [1;35m"LIMIT"[0m
                                  [1;35m"  2000"[0m[1;31m][0m,
                            [1;33m:type[0m [1;33m:invalid-query[0m[1;31m}[0m,
                  [1;33m:stacktrace[0m [1;31m[[0m[1;35m"--> driver.sql_jdbc.execute$execute_reducible_query$fn__108773$fn__108774.invoke(execute.clj:673)"[0m
                               [1;35m"driver.sql_jdbc.execute$execute_reducible_query$fn__108773.invoke(execute.clj:670)"[0m
                               [1;35m"driver.h2$eval118127$fn__118129$fn__118131.invoke(h2.clj:494)"[0m
                               [1;35m"driver.sql_jdbc.execute$eval108500$do_with_resolved_connection__108501.invoke(execute.clj:334)"[0m
                               [1;35m"driver.h2$eval118127$fn__118129.invoke(h2.clj:485)"[0m
                               [1;35m"driver.sql_jdbc.execute$execute_reducible_query.invokeStatic(execute.clj:664)"[0m
                               [1;35m"driver.sql_jdbc.execute$execute_reducible_query.invoke(execute.clj:653)"[0m
                               [1;35m"driver.sql_jdbc.execute$execute_reducible_query.invokeStatic(execute.clj:661)"[0m
                               [1;35m"driver.sql_jdbc.execute$execute_reducible_query.invoke(execute.clj:653)"[0m
                               [1;35m"driver.sql_jdbc$eval117700$fn__117701.invoke(sql_jdbc.clj:72)"[0m
                               [1;35m"driver.h2$eval117877$fn__117878.invoke(h2.clj:223)"[0m
                               [1;35m"query_processor.context$executef.invokeStatic(context.clj:60)"[0m
                               [1;35m"query_processor.context$executef.invoke(context.clj:49)"[0m
                               [1;35m"query_processor.context.default$default_runf.invokeStatic(default.clj:68)"[0m
                               [1;35m"query_processor.context.default$default_runf.invoke(default.clj:66)"[0m
                               [1;35m"query_processor.context$runf.invokeStatic(context.clj:46)"[0m
                               [1;35m"query_processor.context$runf.invoke(context.clj:40)"[0m
                               [1;35m"query_processor.reducible$identity_qp.invokeStatic(reducible.clj:15)"[0m
                               [1;35m"query_processor.reducible$identity_qp.invoke(reducible.clj:12)"[0m
                               [1;35m"query_processor.middleware.cache$maybe_return_cached_results$maybe_return_cached_results_STAR___92055.invoke(cache.clj:224)"[0m
                               [1;35m"query_processor.middleware.permissions$check_query_permissions$fn__92395.invoke(permissions.clj:126)"[0m
                               [1;35m"metabase_enterprise.advanced_permissions.query_processor.middleware.permissions$check_download_permissions$fn__96054.invoke(permissions.clj:128)"[0m
                               [1;35m"metabase_enterprise.sandbox.query_processor.middleware.column_level_perms_check$maybe_apply_column_level_perms_check$fn__96301.invoke(column_level_perms_check.clj:31)"[0m
                               [1;35m"query_processor.middleware.mbql_to_native$mbql__GT_native$fn__93869.invoke(mbql_to_native.clj:24)"[0m
                               [1;35m"query_processor$fn__96949$combined_post_process__96954$combined_post_process_STAR___96955.invoke(query_processor.clj:260)"[0m
                               [1;35m"query_processor$fn__96949$combined_pre_process__96950$combined_pre_process_STAR___96951.invoke(query_processor.clj:257)"[0m
                               [1;35m"query_processor.middleware.resolve_database_and_driver$resolve_database_and_driver$fn__95157$fn__95162.invoke(resolve_database_and_driver.clj:36)"[0m
                               [1;35m"driver$do_with_driver.invokeStatic(driver.clj:91)"[0m
                               [1;35m"driver$do_with_driver.invoke(driver.clj:86)"[0m
                               [1;35m"query_processor.middleware.resolve_database_and_driver$resolve_database_and_driver$fn__95157.invoke(resolve_database_and_driver.clj:35)"[0m
                               [1;35m"query_processor.middleware.fetch_source_query$resolve_card_id_source_tables$fn__93672.invoke(fetch_source_query.clj:316)"[0m
                               [1;35m"query_processor.middleware.store$initialize_store$fn__95831$fn__95832.invoke(store.clj:12)"[0m
                               [1;35m"query_processor.store$do_with_store.invokeStatic(store.clj:56)"[0m
                               [1;35m"query_processor.store$do_with_store.invoke(store.clj:50)"[0m
                               [1;35m"query_processor.middleware.store$initialize_store$fn__95831.invoke(store.clj:11)"[0m
                               [1;35m"query_processor_test.test_mlv2$around_middleware$fn__76167.invoke(test_mlv2.clj:87)"[0m
                               [1;35m"query_processor.middleware.normalize_query$normalize$fn__93899.invoke(normalize_query.clj:36)"[0m
                               [1;35m"metabase_enterprise.audit_app.query_processor.middleware.handle_audit_queries$handle_internal_queries$fn__96267.invoke(handle_audit_queries.clj:131)"[0m
                               [1;35m"query_processor.middleware.constraints$add_default_userland_constraints$fn__90868.invoke(constraints.clj:53)"[0m
                               [1;35m"query_processor.middleware.process_userland_query$process_userland_query$fn__95029.invoke(process_userland_query.clj:151)"[0m
                               [1;35m"query_processor.middleware.catch_exceptions$catch_exceptions$fn__92519.invoke(catch_exceptions.clj:171)"[0m
                               [1;35m"query_processor.reducible$async_qp$qp_STAR___80331$thunk__80333.invoke(reducible.clj:103)"[0m
                               [1;35m"query_processor.reducible$async_qp$qp_STAR___80331.invoke(reducible.clj:109)"[0m
                               [1;35m"query_processor.reducible$async_qp$qp_STAR___80331.invoke(reducible.clj:94)"[0m
                               [1;35m"query_processor.reducible$async_qp$qp_STAR___80331.invoke(reducible.clj:91)"[0m
                               [1;35m"query_processor.reducible$sync_qp$qp_STAR___80343.doInvoke(reducible.clj:129)"[0m
                               [1;35m"query_processor$process_userland_query.invokeStatic(query_processor.clj:383)"[0m
                               [1;35m"query_processor$process_userland_query.doInvoke(query_processor.clj:379)"[0m
                               [1;35m"query_processor$eval96998$process_query_and_save_execution_BANG___97007$fn__97008.invoke(query_processor.clj:391)"[0m
                               [1;35m"query_processor$eval96998$process_query_and_save_execution_BANG___97007.invoke(query_processor.clj:387)"[0m
                               [1;35m"query_processor_test.failure_test$fn__232678.invokeStatic(failure_test.clj:73)"[0m
                               [1;35m"query_processor_test.failure_test$fn__232678.invoke(failure_test.clj:56)"[0m
                               [1;35m"query_processor_test.failure_test$eval232663$fn__232664$fn__232665.invoke(failure_test.clj:13)"[0m
                               [1;35m"test.util.log$do_with_log_level.invokeStatic(log.clj:145)"[0m
                               [1;35m"test.util.log$do_with_log_level.invoke(log.clj:132)"[0m
                               [1;35m"query_processor_test.failure_test$eval232663$fn__232664.invoke(failure_test.clj:12)"[0m
                               [1;35m"test.redefs$new_with_redefs_fn.invokeStatic(redefs.clj:31)"[0m
                               [1;35m"test.redefs$new_with_redefs_fn.doInvoke(redefs.clj:29)"[0m
                               [1;35m"test_runner$find_and_run_tests_cli.invokeStatic(test_runner.clj:99)"[0m
                               [1;35m"test_runner$find_and_run_tests_cli.invoke(test_runner.clj:96)"[0m[1;31m][0m,
                  [1;33m:status[0m [1;33m:failed[0m[1;31m}[0m[1;31m][0m[1;31m}[0m

FAIL in metabase.query-processor-test.failure-test/process-userland-query-test (failure_test.clj:45)
running a bad query via `process-query` should return stacktrace, query, preprocessed query, and native query
expected: [1;31m{[0m[1;33m:class[0m java.lang.Class,
           [1;33m:error[0m Str,
           [1;33m:json_query[0m [1;31m{[0m[1;33m:database[0m [1;31m([0m[1;34meq[0m [36m1[0m[1;31m)[0m,
                        [1;33m:query[0m [1;31m{[0m[1;33m:fields[0m [1;31m([0m[1;34meq[0m [1;31m[[0m[1;31m[[0m[1;35m"datetime_field"[0m [36m1[0m [1;35m"MONTH"[0m[1;31m][0m[1;31m][0m[1;31m)[0m,
                                [1;33m:source-table[0m [1;31m([0m[1;34meq[0m [36m1[0m[1;31m)[0m[1;31m}[0m,
                        [1;33m:type[0m [1;31m([0m[1;34meq[0m [1;33m:query[0m[1;31m)[0m[1;31m}[0m,
           [1;33m:native[0m [1;31m{[0m[1;33m:params[0m [1;31m([0m[1;34meq[0m [1;30mnil[0m[1;31m)[0m,
                    [1;33m:query[0m [1;31m([0m[1;34meq[0m
                            [1;35m"SELECT DATE_TRUNC('month', \"PUBLIC\".\"VENUES\".\"ID\") AS \"ID\" FROM \"PUBLIC\".\"VENUES\" LIMIT 1048575"[0m[1;31m)[0m[1;31m}[0m,
           [1;33m:preprocessed[0m [1;31m{[0m[1;33m:database[0m [1;31m([0m[1;34meq[0m [36m1[0m[1;31m)[0m,
                          [1;33m:query[0m [1;31m{[0m[1;33m:fields[0m [1;31m([0m[1;34meq[0m
                                           [1;31m[[0m[1;31m[[0m[1;33m:field[0m [36m1[0m [1;31m{[0m[1;33m:temporal-unit[0m [1;33m:month[0m[1;31m}[0m[1;31m][0m[1;31m][0m[1;31m)[0m,
                                  [1;33m:limit[0m [1;31m([0m[1;34meq[0m [36m1048575[0m[1;31m)[0m,
                                  [1;33m:source-table[0m [1;31m([0m[1;34meq[0m [36m1[0m[1;31m)[0m,
                                  Keyword Any[1;31m}[0m,
                          [1;33m:type[0m [1;31m([0m[1;34meq[0m [1;33m:query[0m[1;31m)[0m,
                          Keyword Any,
                          [1;31m([0m[1;34moptional-key[0m [1;33m:driver[0m[1;31m)[0m [1;31m([0m[1;34meq[0m [1;33m:h2[0m[1;31m)[0m[1;31m}[0m,
           [1;33m:stacktrace[0m [1;31m[[0m[1;31m([0m[1;34mconstrained[0m Str [1;35m"Non-blank string"[0m[1;31m)[0m[1;31m][0m,
           [1;33m:status[0m [1;31m([0m[1;34meq[0m [1;33m:failed[0m[1;31m)[0m,
           Keyword Any[1;31m}[0m
  actual: [1;31m{[0m[1;33m:card_id[0m [1;30mnil[0m,
           [1;33m:class[0m [34m#<[0m[1;34mClass[0m[34m@[0m66bd2b72 org.h2.jdbc.JdbcSQLDataException[34m>[0m,
           [1;33m:context[0m [1;30mnil[0m,
           [1;33m:data[0m [1;31m{[0m[1;33m:cols[0m [1;31m[][0m, [1;33m:rows[0m [1;31m[][0m[1;31m}[0m,
           [1;33m:database_id[0m [36m1[0m,
           [1;33m:error[0m [1;35m"Invalid value \"BIGINT\" for parameter \"DATE_TRUNC datetime argument\"; SQL statement:\nSELECT DATE_TRUNC('month', \"PUBLIC\".\"VENUES\".\"ID\") AS \"ID\" FROM \"PUBLIC\".\"VENUES\" LIMIT 2000 [90008-214]"[0m,
           [1;33m:error_type[0m [1;33m:invalid-query[0m,
           [1;33m:json_query[0m [1;31m{[0m[1;33m:database[0m [36m1[0m,
                        [1;33m:query[0m [1;31m{[0m[1;33m:fields[0m [1;31m[[0m[1;31m[[0m[1;35m"datetime_field"[0m [36m1[0m [1;35m"MONTH"[0m[1;31m][0m[1;31m][0m,
                                [1;33m:source-table[0m [36m1[0m[1;31m}[0m,
                        [1;33m:type[0m [1;33m:query[0m[1;31m}[0m,
           [1;33m:native[0m [1;31m{[0m[1;33m:params[0m [1;30mnil[0m,
                    [1;33m:query[0m [1;35m"SELECT DATE_TRUNC('month', \"PUBLIC\".\"VENUES\".\"ID\") AS \"ID\" FROM \"PUBLIC\".\"VENUES\" LIMIT 2000"[0m[1;31m}[0m,
           [1;33m:preprocessed[0m [1;31m{[0m[1;33m:database[0m [36m1[0m,
                          [1;33m:query[0m [1;31m{[0m[1;33m:fields[0m [1;31m[[0m[1;31m[[0m[1;33m:field[0m [36m1[0m [1;31m{[0m[1;33m:temporal-unit[0m [1;33m:month[0m[1;31m}[0m[1;31m][0m[1;31m][0m,
                                  [1;33m:limit[0m [36m2000[0m,
                                  [1;33m:source-table[0m [36m1[0m,
                                  [1;33m:metabase.query-processor.middleware.limit/original-limit[0m [1;30mnil[0m[1;31m}[0m,
                          [1;33m:type[0m [1;33m:query[0m[1;31m}[0m,
           [1;33m:row_count[0m [36m0[0m,
           [1;33m:running_time[0m [36m0[0m,
           [1;33m:stacktrace[0m [1;31m[[0m[1;35m"org.h2.message.DbException.getJdbcSQLException(DbException.java:646)"[0m
                        [1;35m"org.h2.message.DbException.getJdbcSQLException(DbException.java:477)"[0m
                        [1;35m"org.h2.message.DbException.get(DbException.java:223)"[0m
                        [1;35m"org.h2.mvstore.db.Store.getInvalidExpressionTypeException(Store.java:190)"[0m
                        [1;35m"org.h2.expression.function.DateTimeFunction.optimize(DateTimeFunction.java:977)"[0m
                        [1;35m"org.h2.expression.Alias.optimize(Alias.java:52)"[0m
                        [1;35m"org.h2.command.query.Select.prepareExpressions(Select.java:1170)"[0m
                        [1;35m"org.h2.command.query.Query.prepare(Query.java:218)"[0m
                        [1;35m"org.h2.command.Parser.prepareCommand(Parser.java:575)"[0m
                        [1;35m"org.h2.engine.SessionLocal.prepareLocal(SessionLocal.java:631)"[0m
                        [1;35m"org.h2.engine.SessionLocal.prepareCommand(SessionLocal.java:554)"[0m
                        [1;35m"org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1116)"[0m
                        [1;35m"org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:237)"[0m
                        [1;35m"org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:223)"[0m
                        [1;35m"com.mchange.v2.c3p0.impl.NewProxyStatement.execute(NewProxyStatement.java:75)"[0m
                        [1;35m"--> driver.sql_jdbc.execute$eval108682$fn__108683.invoke(execute.clj:548)"[0m
                        [1;35m"driver.sql_jdbc.execute$execute_statement_or_prepared_statement_BANG_.invokeStatic(execute.clj:556)"[0m
                        [1;35m"driver.sql_jdbc.execute$execute_statement_or_prepared_statement_BANG_.invoke(execute.clj:553)"[0m
                        [1;35m"driver.sql_jdbc.execute$execute_reducible_query$fn__108773$fn__108774.invoke(execute.clj:671)"[0m
                        [1;35m"driver.sql_jdbc.execute$execute_reducible_query$fn__108773.invoke(execute.clj:670)"[0m
                        [1;35m"driver.h2$eval118127$fn__118129$fn__118131.invoke(h2.clj:494)"[0m
                        [1;35m"driver.sql_jdbc.execute$eval108500$do_with_resolved_connection__108501.invoke(execute.clj:334)"[0m
                        [1;35m"driver.h2$eval118127$fn__118129.invoke(h2.clj:485)"[0m
                        [1;35m"driver.sql_jdbc.execute$execute_reducible_query.invokeStatic(execute.clj:664)"[0m
                        [1;35m"driver.sql_jdbc.execute$execute_reducible_query.invoke(execute.clj:653)"[0m
                        [1;35m"driver.sql_jdbc.execute$execute_reducible_query.invokeStatic(execute.clj:661)"[0m
                        [1;35m"driver.sql_jdbc.execute$execute_reducible_query.invoke(execute.clj:653)"[0m
                        [1;35m"driver.sql_jdbc$eval117700$fn__117701.invoke(sql_jdbc.clj:72)"[0m
                        [1;35m"driver.h2$eval117877$fn__117878.invoke(h2.clj:223)"[0m
                        [1;35m"query_processor.context$executef.invokeStatic(context.clj:60)"[0m
                        [1;35m"query_processor.context$executef.invoke(context.clj:49)"[0m
                        [1;35m"query_processor.context.default$default_runf.invokeStatic(default.clj:68)"[0m
                        [1;35m"query_processor.context.default$default_runf.invoke(default.clj:66)"[0m
                        [1;35m"query_processor.context$runf.invokeStatic(context.clj:46)"[0m
                        [1;35m"query_processor.context$runf.invoke(context.clj:40)"[0m
                        [1;35m"query_processor.reducible$identity_qp.invokeStatic(reducible.clj:15)"[0m
                        [1;35m"query_processor.reducible$identity_qp.invoke(reducible.clj:12)"[0m
                        [1;35m"query_processor.middleware.cache$maybe_return_cached_results$maybe_return_cached_results_STAR___92055.invoke(cache.clj:224)"[0m
                        [1;35m"query_processor.middleware.permissions$check_query_permissions$fn__92395.invoke(permissions.clj:126)"[0m
                        [1;35m"metabase_enterprise.advanced_permissions.query_processor.middleware.permissions$check_download_permissions$fn__96054.invoke(permissions.clj:128)"[0m
                        [1;35m"metabase_enterprise.sandbox.query_processor.middleware.column_level_perms_check$maybe_apply_column_level_perms_check$fn__96301.invoke(column_level_perms_check.clj:31)"[0m
                        [1;35m"query_processor.middleware.mbql_to_native$mbql__GT_native$fn__93869.invoke(mbql_to_native.clj:24)"[0m
                        [1;35m"query_processor$fn__96949$combined_post_process__96954$combined_post_process_STAR___96955.invoke(query_processor.clj:260)"[0m
                        [1;35m"query_processor$fn__96949$combined_pre_process__96950$combined_pre_process_STAR___96951.invoke(query_processor.clj:257)"[0m
                        [1;35m"query_processor.middleware.resolve_database_and_driver$resolve_database_and_driver$fn__95157$fn__95162.invoke(resolve_database_and_driver.clj:36)"[0m
                        [1;35m"driver$do_with_driver.invokeStatic(driver.clj:91)"[0m
                        [1;35m"driver$do_with_driver.invoke(driver.clj:86)"[0m
                        [1;35m"query_processor.middleware.resolve_database_and_driver$resolve_database_and_driver$fn__95157.invoke(resolve_database_and_driver.clj:35)"[0m
                        [1;35m"query_processor.middleware.fetch_source_query$resolve_card_id_source_tables$fn__93672.invoke(fetch_source_query.clj:316)"[0m
                        [1;35m"query_processor.middleware.store$initialize_store$fn__95831$fn__95832.invoke(store.clj:12)"[0m
                        [1;35m"query_processor.store$do_with_store.invokeStatic(store.clj:56)"[0m
                        [1;35m"query_processor.store$do_with_store.invoke(store.clj:50)"[0m
                        [1;35m"query_processor.middleware.store$initialize_store$fn__95831.invoke(store.clj:11)"[0m
                        [1;35m"query_processor_test.test_mlv2$around_middleware$fn__76167.invoke(test_mlv2.clj:87)"[0m
                        [1;35m"query_processor.middleware.normalize_query$normalize$fn__93899.invoke(normalize_query.clj:36)"[0m
                        [1;35m"metabase_enterprise.audit_app.query_processor.middleware.handle_audit_queries$handle_internal_queries$fn__96267.invoke(handle_audit_queries.clj:131)"[0m
                        [1;35m"query_processor.middleware.constraints$add_default_userland_constraints$fn__90868.invoke(constraints.clj:53)"[0m
                        [1;35m"query_processor.middleware.process_userland_query$process_userland_query$fn__95029.invoke(process_userland_query.clj:151)"[0m
                        [1;35m"query_processor.middleware.catch_exceptions$catch_exceptions$fn__92519.invoke(catch_exceptions.clj:171)"[0m
                        [1;35m"query_processor.reducible$async_qp$qp_STAR___80331$thunk__80333.invoke(reducible.clj:103)"[0m
                        [1;35m"query_processor.reducible$async_qp$qp_STAR___80331.invoke(reducible.clj:109)"[0m
                        [1;35m"query_processor.reducible$async_qp$qp_STAR___80331.invoke(reducible.clj:94)"[0m
                        [1;35m"query_processor.reducible$async_qp$qp_STAR___80331.invoke(reducible.clj:91)"[0m
                        [1;35m"query_processor.reducible$sync_qp$qp_STAR___80343.doInvoke(reducible.clj:129)"[0m
                        [1;35m"query_processor$process_userland_query.invokeStatic(query_processor.clj:383)"[0m
                        [1;35m"query_processor$process_userland_query.doInvoke(query_processor.clj:379)"[0m
                        [1;35m"query_processor_test.failure_test$fn__232672.invokeStatic(failure_test.clj:54)"[0m
                        [1;35m"query_processor_test.failure_test$fn__232672.invoke(failure_test.clj:43)"[0m
                        [1;35m"query_processor_test.failure_test$eval232663$fn__232664$fn__232665.invoke(failure_test.clj:13)"[0m
                        [1;35m"test.util.log$do_with_log_level.invokeStatic(log.clj:145)"[0m
                        [1;35m"test.util.log$do_with_log_level.invoke(log.clj:132)"[0m
                        [1;35m"query_processor_test.failure_test$eval232663$fn__232664.invoke(failure_test.clj:12)"[0m
                        [1;35m"test.redefs$new_with_redefs_fn.invokeStatic(redefs.clj:31)"[0m
                        [1;35m"test.redefs$new_with_redefs_fn.doInvoke(redefs.clj:29)"[0m
                        [1;35m"test_runner$find_and_run_tests_cli.invokeStatic(test_runner.clj:99)"[0m
                        [1;35m"test_runner$find_and_run_tests_cli.invoke(test_runner.clj:96)"[0m[1;31m][0m,
           [1;33m:started_at[0m [34m#<[0m[1;34mjava.time.ZonedDateTime[0m[34m@[0m5112f30c 2023-09-02T03:06:56.548067Z[UTC][34m>[0m,
           [1;33m:state[0m [1;35m"90008"[0m,
           [1;33m:status[0m [1;33m:failed[0m,
           [1;33m:via[0m [1;31m[[0m[1;31m{[0m[1;33m:class[0m [34m#<[0m[1;34mClass[0m[34m@[0m59d09ff3 clojure.lang.ExceptionInfo[34m>[0m,
                  [1;33m:error[0m [1;35m"Error executing query: Invalid value \"BIGINT\" for parameter \"DATE_TRUNC datetime argument\"; SQL statement:\nSELECT DATE_TRUNC('month', \"PUBLIC\".\"VENUES\".\"ID\") AS \"ID\" FROM \"PUBLIC\".\"VENUES\" LIMIT 2000 [90008-214]"[0m,
                  [1;33m:error_type[0m [1;33m:invalid-query[0m,
                  [1;33m:ex-data[0m [1;31m{[0m[1;33m:driver[0m [1;33m:h2[0m,
                            [1;33m:params[0m [1;30mnil[0m,
                            [1;33m:sql[0m [1;31m[[0m[1;35m"-- Metabase"[0m
                                  [1;35m"SELECT"[0m
                                  [1;35m"  DATE_TRUNC('month', \"PUBLIC\".\"VENUES\".\"ID\") AS \"ID\""[0m
                                  [1;35m"FROM"[0m
                                  [1;35m"  \"PUBLIC\".\"VENUES\""[0m
                                  [1;35m"LIMIT"[0m
                                  [1;35m"  2000"[0m[1;31m][0m,
                            [1;33m:type[0m [1;33m:invalid-query[0m[1;31m}[0m,
                  [1;33m:stacktrace[0m [1;31m[[0m[1;35m"--> driver.sql_jdbc.execute$execute_reducible_query$fn__108773$fn__108774.invoke(execute.clj:673)"[0m
                               [1;35m"driver.sql_jdbc.execute$execute_reducible_query$fn__108773.invoke(execute.clj:670)"[0m
                               [1;35m"driver.h2$eval118127$fn__118129$fn__118131.invoke(h2.clj:494)"[0m
                               [1;35m"driver.sql_jdbc.execute$eval108500$do_with_resolved_connection__108501.invoke(execute.clj:334)"[0m
                               [1;35m"driver.h2$eval118127$fn__118129.invoke(h2.clj:485)"[0m
                               [1;35m"driver.sql_jdbc.execute$execute_reducible_query.invokeStatic(execute.clj:664)"[0m
                               [1;35m"driver.sql_jdbc.execute$execute_reducible_query.invoke(execute.clj:653)"[0m
                               [1;35m"driver.sql_jdbc.execute$execute_reducible_query.invokeStatic(execute.clj:661)"[0m
                               [1;35m"driver.sql_jdbc.execute$execute_reducible_query.invoke(execute.clj:653)"[0m
                               [1;35m"driver.sql_jdbc$eval117700$fn__117701.invoke(sql_jdbc.clj:72)"[0m
                               [1;35m"driver.h2$eval117877$fn__117878.invoke(h2.clj:223)"[0m
                               [1;35m"query_processor.context$executef.invokeStatic(context.clj:60)"[0m
                               [1;35m"query_processor.context$executef.invoke(context.clj:49)"[0m
                               [1;35m"query_processor.context.default$default_runf.invokeStatic(default.clj:68)"[0m
                               [1;35m"query_processor.context.default$default_runf.invoke(default.clj:66)"[0m
                               [1;35m"query_processor.context$runf.invokeStatic(context.clj:46)"[0m
                               [1;35m"query_processor.context$runf.invoke(context.clj:40)"[0m
                               [1;35m"query_processor.reducible$identity_qp.invokeStatic(reducible.clj:15)"[0m
                               [1;35m"query_processor.reducible$identity_qp.invoke(reducible.clj:12)"[0m
                               [1;35m"query_processor.middleware.cache$maybe_return_cached_results$maybe_return_cached_results_STAR___92055.invoke(cache.clj:224)"[0m
                               [1;35m"query_processor.middleware.permissions$check_query_permissions$fn__92395.invoke(permissions.clj:126)"[0m
                               [1;35m"metabase_enterprise.advanced_permissions.query_processor.middleware.permissions$check_download_permissions$fn__96054.invoke(permissions.clj:128)"[0m
                               [1;35m"metabase_enterprise.sandbox.query_processor.middleware.column_level_perms_check$maybe_apply_column_level_perms_check$fn__96301.invoke(column_level_perms_check.clj:31)"[0m
                               [1;35m"query_processor.middleware.mbql_to_native$mbql__GT_native$fn__93869.invoke(mbql_to_native.clj:24)"[0m
                               [1;35m"query_processor$fn__96949$combined_post_process__96954$combined_post_process_STAR___96955.invoke(query_processor.clj:260)"[0m
                               [1;35m"query_processor$fn__96949$combined_pre_process__96950$combined_pre_process_STAR___96951.invoke(query_processor.clj:257)"[0m
                               [1;35m"query_processor.middleware.resolve_database_and_driver$resolve_database_and_driver$fn__95157$fn__95162.invoke(resolve_database_and_driver.clj:36)"[0m
                               [1;35m"driver$do_with_driver.invokeStatic(driver.clj:91)"[0m
                               [1;35m"driver$do_with_driver.invoke(driver.clj:86)"[0m
                               [1;35m"query_processor.middleware.resolve_database_and_driver$resolve_database_and_driver$fn__95157.invoke(resolve_database_and_driver.clj:35)"[0m
                               [1;35m"query_processor.middleware.fetch_source_query$resolve_card_id_source_tables$fn__93672.invoke(fetch_source_query.clj:316)"[0m
                               [1;35m"query_processor.middleware.store$initialize_store$fn__95831$fn__95832.invoke(store.clj:12)"[0m
                               [1;35m"query_processor.store$do_with_store.invokeStatic(store.clj:56)"[0m
                               [1;35m"query_processor.store$do_with_store.invoke(store.clj:50)"[0m
                               [1;35m"query_processor.middleware.store$initialize_store$fn__95831.invoke(store.clj:11)"[0m
                               [1;35m"query_processor_test.test_mlv2$around_middleware$fn__76167.invoke(test_mlv2.clj:87)"[0m
                               [1;35m"query_processor.middleware.normalize_query$normalize$fn__93899.invoke(normalize_query.clj:36)"[0m
                               [1;35m"metabase_enterprise.audit_app.query_processor.middleware.handle_audit_queries$handle_internal_queries$fn__96267.invoke(handle_audit_queries.clj:131)"[0m
                               [1;35m"query_processor.middleware.constraints$add_default_userland_constraints$fn__90868.invoke(constraints.clj:53)"[0m
                               [1;35m"query_processor.middleware.process_userland_query$process_userland_query$fn__95029.invoke(process_userland_query.clj:151)"[0m
                               [1;35m"query_processor.middleware.catch_exceptions$catch_exceptions$fn__92519.invoke(catch_exceptions.clj:171)"[0m
                               [1;35m"query_processor.reducible$async_qp$qp_STAR___80331$thunk__80333.invoke(reducible.clj:103)"[0m
                               [1;35m"query_processor.reducible$async_qp$qp_STAR___80331.invoke(reducible.clj:109)"[0m
                               [1;35m"query_processor.reducible$async_qp$qp_STAR___80331.invoke(reducible.clj:94)"[0m
                               [1;35m"query_processor.reducible$async_qp$qp_STAR___80331.invoke(reducible.clj:91)"[0m
                               [1;35m"query_processor.reducible$sync_qp$qp_STAR___80343.doInvoke(reducible.clj:129)"[0m
                               [1;35m"query_processor$process_userland_query.invokeStatic(query_processor.clj:383)"[0m
                               [1;35m"query_processor$process_userland_query.doInvoke(query_processor.clj:379)"[0m
                               [1;35m"query_processor_test.failure_test$fn__232672.invokeStatic(failure_test.clj:54)"[0m
                               [1;35m"query_processor_test.failure_test$fn__232672.invoke(failure_test.clj:43)"[0m
                               [1;35m"query_processor_test.failure_test$eval232663$fn__232664$fn__232665.invoke(failure_test.clj:13)"[0m
                               [1;35m"test.util.log$do_with_log_level.invokeStatic(log.clj:145)"[0m
                               [1;35m"test.util.log$do_with_log_level.invoke(log.clj:132)"[0m
                               [1;35m"query_processor_test.failure_test$eval232663$fn__232664.invoke(failure_test.clj:12)"[0m
                               [1;35m"test.redefs$new_with_redefs_fn.invokeStatic(redefs.clj:31)"[0m
                               [1;35m"test.redefs$new_with_redefs_fn.doInvoke(redefs.clj:29)"[0m
                               [1;35m"test_runner$find_and_run_tests_cli.invokeStatic(test_runner.clj:99)"[0m
                               [1;35m"test_runner$find_and_run_tests_cli.invoke(test_runner.clj:96)"[0m[1;31m][0m,
                  [1;33m:status[0m [1;33m:failed[0m[1;31m}[0m[1;31m][0m[1;31m}[0m

LONG TEST in metabase.query-processor-test.filter-test/temporal-arithmetic-test
Test took 1.616 seconds seconds to run

LONG TEST in metabase.query-processor-test.nested-queries-test/inception-test
Test took 2.458 seconds seconds to run

FAIL in metabase.query-processor-test.nested-queries-test/date-range-test (nested_queries_test.clj:1283)

[36m:h2[0m Date ranges should work the same in nested queries as is regular queries (#15352) [35musing sample-dataset dataset
[0m nested query
expected: [1;31m{[0m[1;33m:params[0m [1;31m[[0m[34m#<[0m[1;34mjava.time.ZonedDateTime[0m[34m@[0m429813be 2020-02-01T00:00Z[UTC][34m>[0m
                    [34m#<[0m[1;34mjava.time.ZonedDateTime[0m[34m@[0m750433a5 2020-03-01T00:00Z[UTC][34m>[0m[1;31m][0m,
           [1;33m:query[0m [1;35m"SELECT \"source\".\"count\" AS \"count\" FROM (SELECT COUNT(*) AS \"count\" FROM \"PUBLIC\".\"ORDERS\" WHERE (\"PUBLIC\".\"ORDERS\".\"CREATED_AT\" >= ?) AND (\"PUBLIC\".\"ORDERS\".\"CREATED_AT\" < ?)) AS \"source\" LIMIT 1048575"[0m[1;31m}[0m
  actual: [1;31m{[0m[1;33m:params[0m [1;31m([0m[34m#<[0m[1;34mjava.time.ZonedDateTime[0m[34m@[0m1b708d1f 2020-02-01T00:00Z[UTC][34m>[0m
                    [34m#<[0m[1;34mjava.time.ZonedDateTime[0m[34m@[0m5a8313f6 2020-03-01T00:00Z[UTC][34m>[0m[1;31m)[0m,
           [1;33m:query[0m [1;35m"SELECT \"source\".\"count\" AS \"count\" FROM (SELECT COUNT(*) AS \"count\" FROM \"PUBLIC\".\"ORDERS\" WHERE (\"PUBLIC\".\"ORDERS\".\"CREATED_AT\" >= ?) AND (\"PUBLIC\".\"ORDERS\".\"CREATED_AT\" < ?)) AS \"source\" LIMIT 2000"[0m[1;31m}[0m
    diff: - [1;31m{[0m[1;33m:query[0m [1;35m"SELECT \"source\".\"count\" AS \"count\" FROM (SELECT COUNT(*) AS \"count\" FROM \"PUBLIC\".\"ORDERS\" WHERE (\"PUBLIC\".\"ORDERS\".\"CREATED_AT\" >= ?) AND (\"PUBLIC\".\"ORDERS\".\"CREATED_AT\" < ?)) AS \"source\" LIMIT 1048575"[0m[1;31m}[0m
          + [1;31m{[0m[1;33m:query[0m [1;35m"SELECT \"source\".\"count\" AS \"count\" FROM (SELECT COUNT(*) AS \"count\" FROM \"PUBLIC\".\"ORDERS\" WHERE (\"PUBLIC\".\"ORDERS\".\"CREATED_AT\" >= ?) AND (\"PUBLIC\".\"ORDERS\".\"CREATED_AT\" < ?)) AS \"source\" LIMIT 2000"[0m[1;31m}[0m

LONG TEST in metabase.query-processor-test.nested-queries-test/multilevel-nested-questions-with-joins
Test took 5.241 seconds seconds to run

FAIL in metabase.query-processor-test.nested-queries-test/native-query-with-default-params-as-source-test (nested_queries_test.clj:489)
make sure using a native query with default params as a source works
expected: [1;31m{[0m[1;33m:params[0m [1;31m[[0m[1;35m"Widget"[0m[1;31m][0m,
           [1;33m:query[0m [1;35m"SELECT \"source\".* FROM (SELECT * FROM PRODUCTS WHERE CATEGORY = ? LIMIT 10) AS \"source\" LIMIT 1048575"[0m[1;31m}[0m
  actual: [1;31m{[0m[1;33m:params[0m [1;31m([0m[1;35m"Widget"[0m[1;31m)[0m,
           [1;33m:query[0m [1;35m"SELECT \"source\".* FROM (SELECT * FROM PRODUCTS WHERE CATEGORY = ? LIMIT 10) AS \"source\" LIMIT 2000"[0m[1;31m}[0m
    diff: - [1;31m{[0m[1;33m:query[0m [1;35m"SELECT \"source\".* FROM (SELECT * FROM PRODUCTS WHERE CATEGORY = ? LIMIT 10) AS \"source\" LIMIT 1048575"[0m[1;31m}[0m
          + [1;31m{[0m[1;33m:query[0m [1;35m"SELECT \"source\".* FROM (SELECT * FROM PRODUCTS WHERE CATEGORY = ? LIMIT 10) AS \"source\" LIMIT 2000"[0m[1;31m}[0m

FAIL in metabase.query-processor-test.query-to-native-test/compile-test (query_to_native_test.clj:14)
Can we convert an MBQL query to a native query?
expected: [1;31m{[0m[1;33m:params[0m [1;30mnil[0m,
           [1;33m:query[0m [1;35m"SELECT \"PUBLIC\".\"VENUES\".\"ID\" AS \"ID\", \"PUBLIC\".\"VENUES\".\"NAME\" AS \"NAME\", \"PUBLIC\".\"VENUES\".\"CATEGORY_ID\" AS \"CATEGORY_ID\", \"PUBLIC\".\"VENUES\".\"LATITUDE\" AS \"LATITUDE\", \"PUBLIC\".\"VENUES\".\"LONGITUDE\" AS \"LONGITUDE\", \"PUBLIC\".\"VENUES\".\"PRICE\" AS \"PRICE\" FROM \"PUBLIC\".\"VENUES\" LIMIT 1048575"[0m[1;31m}[0m
  actual: [1;31m{[0m[1;33m:params[0m [1;30mnil[0m,
           [1;33m:query[0m [1;35m"SELECT \"PUBLIC\".\"VENUES\".\"ID\" AS \"ID\", \"PUBLIC\".\"VENUES\".\"NAME\" AS \"NAME\", \"PUBLIC\".\"VENUES\".\"CATEGORY_ID\" AS \"CATEGORY_ID\", \"PUBLIC\".\"VENUES\".\"LATITUDE\" AS \"LATITUDE\", \"PUBLIC\".\"VENUES\".\"LONGITUDE\" AS \"LONGITUDE\", \"PUBLIC\".\"VENUES\".\"PRICE\" AS \"PRICE\" FROM \"PUBLIC\".\"VENUES\" LIMIT 2000"[0m[1;31m}[0m
    diff: - [1;31m{[0m[1;33m:query[0m [1;35m"SELECT \"PUBLIC\".\"VENUES\".\"ID\" AS \"ID\", \"PUBLIC\".\"VENUES\".\"NAME\" AS \"NAME\", \"PUBLIC\".\"VENUES\".\"CATEGORY_ID\" AS \"CATEGORY_ID\", \"PUBLIC\".\"VENUES\".\"LATITUDE\" AS \"LATITUDE\", \"PUBLIC\".\"VENUES\".\"LONGITUDE\" AS \"LONGITUDE\", \"PUBLIC\".\"VENUES\".\"PRICE\" AS \"PRICE\" FROM \"PUBLIC\".\"VENUES\" LIMIT 1048575"[0m[1;31m}[0m
          + [1;31m{[0m[1;33m:query[0m [1;35m"SELECT \"PUBLIC\".\"VENUES\".\"ID\" AS \"ID\", \"PUBLIC\".\"VENUES\".\"NAME\" AS \"NAME\", \"PUBLIC\".\"VENUES\".\"CATEGORY_ID\" AS \"CATEGORY_ID\", \"PUBLIC\".\"VENUES\".\"LATITUDE\" AS \"LATITUDE\", \"PUBLIC\".\"VENUES\".\"LONGITUDE\" AS \"LONGITUDE\", \"PUBLIC\".\"VENUES\".\"PRICE\" AS \"PRICE\" FROM \"PUBLIC\".\"VENUES\" LIMIT 2000"[0m[1;31m}[0m

FAIL in metabase.query-processor.middleware.add-rows-truncated-test/e2e-test (add_rows_truncated_test.clj:42)
expected: [1;31m{[0m[1;33m:rows_truncated[0m [36m5[0m[1;31m}[0m
  actual: [1;31m{[0m[1;33m:average_execution_time[0m [1;30mnil[0m,
           [1;33m:context[0m [1;30mnil[0m,
           [1;33m:data[0m [1;31m{[0m[1;33m:cols[0m [1;31m([0m[1;31m{[0m[1;33m:base_type[0m [1;33m:type/BigInteger[0m,
                          [1;33m:coercion_strategy[0m [1;30mnil[0m,
                          [1;33m:description[0m [1;30mnil[0m,
                          [1;33m:display_name[0m [1;35m"ID"[0m,
                          [1;33m:effective_type[0m [1;33m:type/BigInteger[0m,
                          [1;33m:field_ref[0m [1;31m[[0m[1;33m:field[0m [36m1[0m [1;30mnil[0m[1;31m][0m,
                          [1;33m:fingerprint[0m [1;30mnil[0m,
                          [1;33m:id[0m [36m1[0m,
                          [1;33m:name[0m [1;35m"ID"[0m,
                          [1;33m:nfc_path[0m [1;30mnil[0m,
                          [1;33m:parent_id[0m [1;30mnil[0m,
                          [1;33m:semantic_type[0m [1;33m:type/PK[0m,
                          [1;33m:settings[0m [1;30mnil[0m,
                          [1;33m:source[0m [1;33m:fields[0m,
                          [1;33m:table_id[0m [36m1[0m,
                          [1;33m:visibility_type[0m [1;33m:normal[0m[1;31m}[0m
                         [1;31m{[0m[1;33m:base_type[0m [1;33m:type/Text[0m,
                          [1;33m:coercion_strategy[0m [1;30mnil[0m,
                          [1;33m:description[0m [1;30mnil[0m,
                          [1;33m:display_name[0m [1;35m"Name"[0m,
                          [1;33m:effective_type[0m [1;33m:type/Text[0m,
                          [1;33m:field_ref[0m [1;31m[[0m[1;33m:field[0m [36m5[0m [1;30mnil[0m[1;31m][0m,
                          [1;33m:fingerprint[0m [1;31m{[0m[1;33m:global[0m [1;31m{[0m[1;33m:distinct-count[0m [36m100[0m, [1;33m:nil%[0m [36m0.0[0m[1;31m}[0m,
                                        [1;33m:type[0m [1;31m{[0m[1;33m:type/Text[0m [1;31m{[0m[1;33m:average-length[0m [36m15.63[0m,
                                                           [1;33m:percent-email[0m [36m0.0[0m,
                                                           [1;33m:percent-json[0m [36m0.0[0m,
                                                           [1;33m:percent-state[0m [36m0.0[0m,
                                                           [1;33m:percent-url[0m [36m0.0[0m[1;31m}[0m[1;31m}[0m[1;31m}[0m,
                          [1;33m:id[0m [36m5[0m,
                          [1;33m:name[0m [1;35m"NAME"[0m,
                          [1;33m:nfc_path[0m [1;30mnil[0m,
                          [1;33m:parent_id[0m [1;30mnil[0m,
                          [1;33m:semantic_type[0m [1;33m:type/Name[0m,
                          [1;33m:settings[0m [1;30mnil[0m,
                          [1;33m:source[0m [1;33m:fields[0m,
                          [1;33m:table_id[0m [36m1[0m,
                          [1;33m:visibility_type[0m [1;33m:normal[0m[1;31m}[0m
                         [1;31m{[0m[1;33m:base_type[0m [1;33m:type/Integer[0m,
                          [1;33m:coercion_strategy[0m [1;30mnil[0m,
                          [1;33m:description[0m [1;30mnil[0m,
                          [1;33m:display_name[0m [1;35m"Category ID"[0m,
                          [1;33m:effective_type[0m [1;33m:type/Integer[0m,
                          [1;33m:field_ref[0m [1;31m[[0m[1;33m:field[0m [36m4[0m [1;30mnil[0m[1;31m][0m,
                          [1;33m:fingerprint[0m [1;31m{[0m[1;33m:global[0m [1;31m{[0m[1;33m:distinct-count[0m [36m28[0m, [1;33m:nil%[0m [36m0.0[0m[1;31m}[0m[1;31m}[0m,
                          [1;33m:id[0m [36m4[0m,
                          [1;33m:name[0m [1;35m"CATEGORY_ID"[0m,
                          [1;33m:nfc_path[0m [1;30mnil[0m,
                          [1;33m:parent_id[0m [1;30mnil[0m,
                          [1;33m:semantic_type[0m [1;33m:type/FK[0m,
                          [1;33m:settings[0m [1;30mnil[0m,
                          [1;33m:source[0m [1;33m:fields[0m,
                          [1;33m:table_id[0m [36m1[0m,
                          [1;33m:visibility_type[0m [1;33m:normal[0m[1;31m}[0m
                         [1;31m{[0m[1;33m:base_type[0m [1;33m:type/Float[0m,
                          [1;33m:coercion_strategy[0m [1;30mnil[0m,
                          [1;33m:description[0m [1;30mnil[0m,
                          [1;33m:display_name[0m [1;35m"Latitude"[0m,
                          [1;33m:effective_type[0m [1;33m:type/Float[0m,
                          [1;33m:field_ref[0m [1;31m[[0m[1;33m:field[0m [36m6[0m [1;30mnil[0m[1;31m][0m,
                          [1;33m:fingerprint[0m [1;31m{[0m[1;33m:global[0m [1;31m{[0m[1;33m:distinct-count[0m [36m94[0m, [1;33m:nil%[0m [36m0.0[0m[1;31m}[0m,
                                        [1;33m:type[0m [1;31m{[0m[1;33m:type/Number[0m [1;31m{[0m[1;33m:avg[0m [36m35.505891999999996[0m,
                                                             [1;33m:max[0m [36m40.7794[0m,
                                                             [1;33m:min[0m [36m10.0646[0m,
                                                             [1;33m:q1[0m [36m34.06098873016278[0m,
                                                             [1;33m:q3[0m [36m37.77185[0m,
                                                             [1;33m:sd[0m [36m3.4346725397190827[0m[1;31m}[0m[1;31m}[0m[1;31m}[0m,
                          [1;33m:id[0m [36m6[0m,
                          [1;33m:name[0m [1;35m"LATITUDE"[0m,
                          [1;33m:nfc_path[0m [1;30mnil[0m,
                          [1;33m:parent_id[0m [1;30mnil[0m,
                          [1;33m:semantic_type[0m [1;33m:type/Latitude[0m,
                          [1;33m:settings[0m [1;30mnil[0m,
                          [1;33m:source[0m [1;33m:fields[0m,
                          [1;33m:table_id[0m [36m1[0m,
                          [1;33m:visibility_type[0m [1;33m:normal[0m[1;31m}[0m
                         [1;31m{[0m[1;33m:base_type[0m [1;33m:type/Float[0m,
                          [1;33m:coercion_strategy[0m [1;30mnil[0m,
                          [1;33m:description[0m [1;30mnil[0m,
                          [1;33m:display_name[0m [1;35m"Longitude"[0m,
                          [1;33m:effective_type[0m [1;33m:type/Float[0m,
                          [1;33m:field_ref[0m [1;31m[[0m[1;33m:field[0m [36m2[0m [1;30mnil[0m[1;31m][0m,
                          [1;33m:fingerprint[0m [1;31m{[0m[1;33m:global[0m [1;31m{[0m[1;33m:distinct-count[0m [36m84[0m, [1;33m:nil%[0m [36m0.0[0m[1;31m}[0m,
                                        [1;33m:type[0m [1;31m{[0m[1;33m:type/Number[0m [1;31m{[0m[1;33m:avg[0m [36m-115.99848699999998[0m,
                                                             [1;33m:max[0m [36m-73.9533[0m,
                                                             [1;33m:min[0m [36m-165.374[0m,
                                                             [1;33m:q1[0m [36m-122.40857106781186[0m,
                                                             [1;33m:q3[0m [36m-118.2635[0m,
                                                             [1;33m:sd[0m [36m14.162810671348238[0m[1;31m}[0m[1;31m}[0m[1;31m}[0m,
                          [1;33m:id[0m [36m2[0m,
                          [1;33m:name[0m [1;35m"LONGITUDE"[0m,
                          [1;33m:nfc_path[0m [1;30mnil[0m,
                          [1;33m:parent_id[0m [1;30mnil[0m,
                          [1;33m:semantic_type[0m [1;33m:type/Longitude[0m,
                          [1;33m:settings[0m [1;30mnil[0m,
                          [1;33m:source[0m [1;33m:fields[0m,
                          [1;33m:table_id[0m [36m1[0m,
                          [1;33m:visibility_type[0m [1;33m:normal[0m[1;31m}[0m
                         [1;31m{[0m[1;33m:base_type[0m [1;33m:type/Integer[0m,
                          [1;33m:coercion_strategy[0m [1;30mnil[0m,
                          [1;33m:description[0m [1;30mnil[0m,
                          [1;33m:display_name[0m [1;35m"Price"[0m,
                          [1;33m:effective_type[0m [1;33m:type/Integer[0m,
                          [1;33m:field_ref[0m [1;31m[[0m[1;33m:field[0m [36m3[0m [1;30mnil[0m[1;31m][0m,
                          [1;33m:fingerprint[0m [1;31m{[0m[1;33m:global[0m [1;31m{[0m[1;33m:distinct-count[0m [36m4[0m, [1;33m:nil%[0m [36m0.0[0m[1;31m}[0m,
                                        [1;33m:type[0m [1;31m{[0m[1;33m:type/Number[0m [1;31m{[0m[1;33m:avg[0m [36m2.03[0m,
                                                             [1;33m:max[0m [36m4.0[0m,
                                                             [1;33m:min[0m [36m1.0[0m,
                                                             [1;33m:q1[0m [36m1.4591129021415095[0m,
                                                             [1;33m:q3[0m [36m2.493086095768049[0m,
                                                             [1;33m:sd[0m [36m0.7713951678941896[0m[1;31m}[0m[1;31m}[0m[1;31m}[0m,
                          [1;33m:id[0m [36m3[0m,
                          [1;33m:name[0m [1;35m"PRICE"[0m,
                          [1;33m:nfc_path[0m [1;30mnil[0m,
                          [1;33m:parent_id[0m [1;30mnil[0m,
                          [1;33m:semantic_type[0m [1;33m:type/Category[0m,
                          [1;33m:settings[0m [1;30mnil[0m,
                          [1;33m:source[0m [1;33m:fields[0m,
                          [1;33m:table_id[0m [36m1[0m,
                          [1;33m:visibility_type[0m [1;33m:normal[0m[1;31m}[0m[1;31m)[0m,
                  [1;33m:insights[0m [1;30mnil[0m,
                  [1;33m:native_form[0m [1;31m{[0m[1;33m:params[0m [1;30mnil[0m,
                                [1;33m:query[0m [1;35m"SELECT \"PUBLIC\".\"VENUES\".\"ID\" AS \"ID\", \"PUBLIC\".\"VENUES\".\"NAME\" AS \"NAME\", \"PUBLIC\".\"VENUES\".\"CATEGORY_ID\" AS \"CATEGORY_ID\", \"PUBLIC\".\"VENUES\".\"LATITUDE\" AS \"LATITUDE\", \"PUBLIC\".\"VENUES\".\"LONGITUDE\" AS \"LONGITUDE\", \"PUBLIC\".\"VENUES\".\"PRICE\" AS \"PRICE\" FROM \"PUBLIC\".\"VENUES\" ORDER BY \"PUBLIC\".\"VENUES\".\"ID\" ASC LIMIT 2000"[0m[1;31m}[0m,
                  [1;33m:results_metadata[0m [1;31m{[0m[1;33m:columns[0m [1;31m[[0m[1;31m{[0m[1;33m:base_type[0m [1;33m:type/BigInteger[0m,
                                                [1;33m:coercion_strategy[0m [1;30mnil[0m,
                                                [1;33m:description[0m [1;30mnil[0m,
                                                [1;33m:display_name[0m [1;35m"ID"[0m,
                                                [1;33m:effective_type[0m [1;33m:type/BigInteger[0m,
                                                [1;33m:field_ref[0m [1;31m[[0m[1;33m:field[0m [36m1[0m [1;30mnil[0m[1;31m][0m,
                                                [1;33m:fingerprint[0m [1;30mnil[0m,
                                                [1;33m:id[0m [36m1[0m,
                                                [1;33m:name[0m [1;35m"ID"[0m,
                                                [1;33m:semantic_type[0m [1;33m:type/PK[0m,
                                                [1;33m:settings[0m [1;30mnil[0m,
                                                [1;33m:visibility_type[0m [1;33m:normal[0m[1;31m}[0m
                                               [1;31m{[0m[1;33m:base_type[0m [1;33m:type/Text[0m,
                                                [1;33m:coercion_strategy[0m [1;30mnil[0m,
                                                [1;33m:description[0m [1;30mnil[0m,
                                                [1;33m:display_name[0m [1;35m"Name"[0m,
                                                [1;33m:effective_type[0m [1;33m:type/Text[0m,
                                                [1;33m:field_ref[0m [1;31m[[0m[1;33m:field[0m [36m5[0m [1;30mnil[0m[1;31m][0m,
                                                [1;33m:fingerprint[0m [1;31m{[0m[1;33m:global[0m [1;31m{[0m[1;33m:distinct-count[0m [36m100[0m,
                                                                       [1;33m:nil%[0m [36m0.0[0m[1;31m}[0m,
                                                              [1;33m:type[0m [1;31m{[0m[1;33m:type/Text[0m [1;31m{[0m[1;33m:average-length[0m [36m15.63[0m,
                                                                                 [1;33m:percent-email[0m [36m0.0[0m,
                                                                                 [1;33m:percent-json[0m [36m0.0[0m,
                                                                                 [1;33m:percent-state[0m [36m0.0[0m,
                                                                                 [1;33m:percent-url[0m [36m0.0[0m[1;31m}[0m[1;31m}[0m[1;31m}[0m,
                                                [1;33m:id[0m [36m5[0m,
                                                [1;33m:name[0m [1;35m"NAME"[0m,
                                                [1;33m:semantic_type[0m [1;33m:type/Name[0m,
                                                [1;33m:settings[0m [1;30mnil[0m,
                                                [1;33m:visibility_type[0m [1;33m:normal[0m[1;31m}[0m
                                               [1;31m{[0m[1;33m:base_type[0m [1;33m:type/Integer[0m,
                                                [1;33m:coercion_strategy[0m [1;30mnil[0m,
                                                [1;33m:description[0m [1;30mnil[0m,
                                                [1;33m:display_name[0m [1;35m"Category ID"[0m,
                                                [1;33m:effective_type[0m [1;33m:type/Integer[0m,
                                                [1;33m:field_ref[0m [1;31m[[0m[1;33m:field[0m [36m4[0m [1;30mnil[0m[1;31m][0m,
                                                [1;33m:fingerprint[0m [1;31m{[0m[1;33m:global[0m [1;31m{[0m[1;33m:distinct-count[0m [36m28[0m,
                                                                       [1;33m:nil%[0m [36m0.0[0m[1;31m}[0m[1;31m}[0m,
                                                [1;33m:id[0m [36m4[0m,
                                                [1;33m:name[0m [1;35m"CATEGORY_ID"[0m,
                                                [1;33m:semantic_type[0m [1;33m:type/FK[0m,
                                                [1;33m:settings[0m [1;30mnil[0m,
                                                [1;33m:visibility_type[0m [1;33m:normal[0m[1;31m}[0m
                                               [1;31m{[0m[1;33m:base_type[0m [1;33m:type/Float[0m,
                                                [1;33m:coercion_strategy[0m [1;30mnil[0m,
                                                [1;33m:description[0m [1;30mnil[0m,
                                                [1;33m:display_name[0m [1;35m"Latitude"[0m,
                                                [1;33m:effective_type[0m [1;33m:type/Float[0m,
                                                [1;33m:field_ref[0m [1;31m[[0m[1;33m:field[0m [36m6[0m [1;30mnil[0m[1;31m][0m,
                                                [1;33m:fingerprint[0m [1;31m{[0m[1;33m:global[0m [1;31m{[0m[1;33m:distinct-count[0m [36m94[0m,
                                                                       [1;33m:nil%[0m [36m0.0[0m[1;31m}[0m,
                                                              [1;33m:type[0m [1;31m{[0m[1;33m:type/Number[0m [1;31m{[0m[1;33m:avg[0m [36m35.505891999999996[0m,
                                                                                   [1;33m:max[0m [36m40.7794[0m,
                                                                                   [1;33m:min[0m [36m10.0646[0m,
                                                                                   [1;33m:q1[0m [36m34.06098873016278[0m,
                                                                                   [1;33m:q3[0m [36m37.77185[0m,
                                                                                   [1;33m:sd[0m [36m3.4346725397190827[0m[1;31m}[0m[1;31m}[0m[1;31m}[0m,
                                                [1;33m:id[0m [36m6[0m,
                                                [1;33m:name[0m [1;35m"LATITUDE"[0m,
                                                [1;33m:semantic_type[0m [1;33m:type/Latitude[0m,
                                                [1;33m:settings[0m [1;30mnil[0m,
                                                [1;33m:visibility_type[0m [1;33m:normal[0m[1;31m}[0m
                                               [1;31m{[0m[1;33m:base_type[0m [1;33m:type/Float[0m,
                                                [1;33m:coercion_strategy[0m [1;30mnil[0m,
                                                [1;33m:description[0m [1;30mnil[0m,
                                                [1;33m:display_name[0m [1;35m"Longitude"[0m,
                                                [1;33m:effective_type[0m [1;33m:type/Float[0m,
                                                [1;33m:field_ref[0m [1;31m[[0m[1;33m:field[0m [36m2[0m [1;30mnil[0m[1;31m][0m,
                                                [1;33m:fingerprint[0m [1;31m{[0m[1;33m:global[0m [1;31m{[0m[1;33m:distinct-count[0m [36m84[0m,
                                                                       [1;33m:nil%[0m [36m0.0[0m[1;31m}[0m,
                                                              [1;33m:type[0m [1;31m{[0m[1;33m:type/Number[0m [1;31m{[0m[1;33m:avg[0m [36m-115.99848699999998[0m,
                                                                                   [1;33m:max[0m [36m-73.9533[0m,
                                                                                   [1;33m:min[0m [36m-165.374[0m,
                                                                                   [1;33m:q1[0m [36m-122.40857106781186[0m,
                                                                                   [1;33m:q3[0m [36m-118.2635[0m,
                                                                                   [1;33m:sd[0m [36m14.162810671348238[0m[1;31m}[0m[1;31m}[0m[1;31m}[0m,
                                                [1;33m:id[0m [36m2[0m,
                                                [1;33m:name[0m [1;35m"LONGITUDE"[0m,
                                                [1;33m:semantic_type[0m [1;33m:type/Longitude[0m,
                                                [1;33m:settings[0m [1;30mnil[0m,
                                                [1;33m:visibility_type[0m [1;33m:normal[0m[1;31m}[0m
                                               [1;31m{[0m[1;33m:base_type[0m [1;33m:type/Integer[0m,
                                                [1;33m:coercion_strategy[0m [1;30mnil[0m,
                                                [1;33m:description[0m [1;30mnil[0m,
                                                [1;33m:display_name[0m [1;35m"Price"[0m,
                                                [1;33m:effective_type[0m [1;33m:type/Integer[0m,
                                                [1;33m:field_ref[0m [1;31m[[0m[1;33m:field[0m [36m3[0m [1;30mnil[0m[1;31m][0m,
                                                [1;33m:fingerprint[0m [1;31m{[0m[1;33m:global[0m [1;31m{[0m[1;33m:distinct-count[0m [36m4[0m,
                                                                       [1;33m:nil%[0m [36m0.0[0m[1;31m}[0m,
                                                              [1;33m:type[0m [1;31m{[0m[1;33m:type/Number[0m [1;31m{[0m[1;33m:avg[0m [36m2.03[0m,
                                                                                   [1;33m:max[0m [36m4.0[0m,
                                                                                   [1;33m:min[0m [36m1.0[0m,
                                                                                   [1;33m:q1[0m [36m1.4591129021415095[0m,
                                                                                   [1;33m:q3[0m [36m2.493086095768049[0m,
                                                                                   [1;33m:sd[0m [36m0.7713951678941896[0m[1;31m}[0m[1;31m}[0m[1;31m}[0m,
                                                [1;33m:id[0m [36m3[0m,
                                                [1;33m:name[0m [1;35m"PRICE"[0m,
                                                [1;33m:semantic_type[0m [1;33m:type/Category[0m,
                                                [1;33m:settings[0m [1;30mnil[0m,
                                                [1;33m:visibility_type[0m [1;33m:normal[0m[1;31m}[0m[1;31m][0m[1;31m}[0m,
                  [1;33m:results_timezone[0m [1;35m"UTC"[0m,
                  [1;33m:rows[0m [1;31m[[0m[1;31m[[0m[36m1[0m [1;35m"Red Medicine"[0m [36m4[0m [36m10.0646[0m [36m-165.374[0m [36m3[0m[1;31m][0m
                         [1;31m[[0m[36m2[0m [1;35m"Stout Burgers & Beers"[0m [36m11[0m [36m34.0996[0m [36m-118.329[0m [36m2[0m[1;31m][0m
                         [1;31m[[0m[36m3[0m [1;35m"The Apple Pan"[0m [36m11[0m [36m34.0406[0m [36m-118.428[0m [36m2[0m[1;31m][0m
                         [1;31m[[0m[36m4[0m [1;35m"Wurstküche"[0m [36m29[0m [36m33.9997[0m [36m-118.465[0m [36m2[0m[1;31m][0m
                         [1;31m[[0m[36m5[0m
                          [1;35m"Brite Spot Family Restaurant"[0m
                          [36m20[0m
                          [36m34.0778[0m
                          [36m-118.261[0m
                          [36m2[0m[1;31m][0m
                         [1;31m[[0m[36m6[0m [1;35m"The 101 Coffee Shop"[0m [36m20[0m [36m34.1054[0m [36m-118.324[0m [36m2[0m[1;31m][0m
                         [1;31m[[0m[36m7[0m [1;35m"Don Day Korean Restaurant"[0m [36m44[0m [36m34.0689[0m [36m-118.305[0m [36m2[0m[1;31m][0m
                         [1;31m[[0m[36m8[0m [1;35m"25°"[0m [36m11[0m [36m34.1015[0m [36m-118.342[0m [36m2[0m[1;31m][0m
                         [1;31m[[0m[36m9[0m [1;35m"Krua Siri"[0m [36m71[0m [36m34.1018[0m [36m-118.301[0m [36m1[0m[1;31m][0m
                         [1;31m[[0m[36m10[0m [1;35m"Fred 62"[0m [36m20[0m [36m34.1046[0m [36m-118.292[0m [36m2[0m[1;31m][0m
                         [1;31m[[0m[36m11[0m [1;35m"The Gorbals"[0m [36m2[0m [36m34.0474[0m [36m-118.25[0m [36m2[0m[1;31m][0m
                         [1;31m[[0m[36m12[0m [1;35m"The Misfit Restaurant + Bar"[0m [36m2[0m [36m34.0154[0m [36m-118.497[0m [36m2[0m[1;31m][0m
                         [1;31m[[0m[36m13[0m [1;35m"Pellicola Pizzeria"[0m [36m58[0m [36m34.0451[0m [36m-118.257[0m [36m1[0m[1;31m][0m
                         [1;31m[[0m[36m14[0m [1;35m"Jones Hollywood"[0m [36m7[0m [36m34.0908[0m [36m-118.346[0m [36m3[0m[1;31m][0m
                         [1;31m[[0m[36m15[0m [1;35m"BCD Tofu House"[0m [36m44[0m [36m34.0619[0m [36m-118.303[0m [36m2[0m[1;31m][0m
                         [1;31m[[0m[36m16[0m
                          [1;35m"Pacific Dining Car - Santa Monica"[0m
                          [36m67[0m
                          [36m34.0367[0m
                          [36m-118.476[0m
                          [36m4[0m[1;31m][0m
                         [1;31m[[0m[36m17[0m [1;35m"Ruen Pair Thai Restaurant"[0m [36m71[0m [36m34.1021[0m [36m-118.306[0m [36m2[0m[1;31m][0m
                         [1;31m[[0m[36m18[0m [1;35m"The Original Pantry"[0m [36m20[0m [36m34.0464[0m [36m-118.263[0m [36m2[0m[1;31m][0m
                         [1;31m[[0m[36m19[0m
                          [1;35m"800 Degrees Neapolitan Pizzeria"[0m
                          [36m58[0m
                          [36m34.0597[0m
                          [36m-118.444[0m
                          [36m2[0m[1;31m][0m
                         [1;31m[[0m[36m20[0m
                          [1;35m"Greenblatt's Delicatessen & Fine Wine Shop"[0m
                          [36m3[0m
                          [36m34.0981[0m
                          [36m-118.365[0m
                          [36m2[0m[1;31m][0m
                         [1;31m[[0m[36m21[0m [1;35m"PizzaHacker"[0m [36m58[0m [36m37.7441[0m [36m-122.421[0m [36m2[0m[1;31m][0m
                         [1;31m[[0m[36m22[0m [1;35m"Gordo Taqueria"[0m [36m50[0m [36m37.7822[0m [36m-122.484[0m [36m1[0m[1;31m][0m
                         [1;31m[[0m[36m23[0m [1;35m"Taqueria Los Coyotes"[0m [36m50[0m [36m37.765[0m [36m-122.42[0m [36m2[0m[1;31m][0m
                         [1;31m[[0m[36m24[0m [1;35m"La Tortilla"[0m [36m50[0m [36m37.7612[0m [36m-122.435[0m [36m1[0m[1;31m][0m
                         [1;31m[[0m[36m25[0m [1;35m"Garaje"[0m [36m50[0m [36m37.7818[0m [36m-122.396[0m [36m2[0m[1;31m][0m
                         [1;31m[[0m[36m26[0m [1;35m"Taqueria San Francisco"[0m [36m50[0m [36m37.753[0m [36m-122.408[0m [36m1[0m[1;31m][0m
                         [1;31m[[0m[36m27[0m [1;35m"Tout Sweet Patisserie"[0m [36m13[0m [36m37.7873[0m [36m-122.407[0m [36m2[0m[1;31m][0m
                         [1;31m[[0m[36m28[0m [1;35m"Liguria Bakery"[0m [36m6[0m [36m37.8014[0m [36m-122.409[0m [36m1[0m[1;31m][0m
                         [1;31m[[0m[36m29[0m [1;35m"20th Century Cafe"[0m [36m12[0m [36m37.775[0m [36m-122.423[0m [36m2[0m[1;31m][0m
                         [1;31m[[0m[36m30[0m [1;35m"Noe Valley Bakery"[0m [36m6[0m [36m37.7513[0m [36m-122.434[0m [36m2[0m[1;31m][0m
                         [1;31m[[0m[36m31[0m [1;35m"Bludso's BBQ"[0m [36m5[0m [36m33.8894[0m [36m-118.207[0m [36m2[0m[1;31m][0m
                         [1;31m[[0m[36m32[0m [1;35m"Boneyard Bistro"[0m [36m5[0m [36m34.1477[0m [36m-118.428[0m [36m3[0m[1;31m][0m
                         [1;31m[[0m[36m33[0m [1;35m"My Brother's Bar-B-Q"[0m [36m5[0m [36m34.167[0m [36m-118.595[0m [36m2[0m[1;31m][0m
                         [1;31m[[0m[36m34[0m [1;35m"Beachwood BBQ & Brewing"[0m [36m10[0m [36m33.7701[0m [36m-118.191[0m [36m2[0m[1;31m][0m
                         [1;31m[[0m[36m35[0m [1;35m"Smoke City Market"[0m [36m5[0m [36m34.1661[0m [36m-118.448[0m [36m1[0m[1;31m][0m
                         [1;31m[[0m[36m36[0m [1;35m"Handy Market"[0m [36m3[0m [36m34.1716[0m [36m-118.335[0m [36m2[0m[1;31m][0m
                         [1;31m[[0m[36m37[0m [1;35m"bigmista's barbecue"[0m [36m5[0m [36m34.118[0m [36m-118.26[0m [36m2[0m[1;31m][0m
                         [1;31m[[0m[36m38[0m [1;35m"Zeke's Smokehouse"[0m [36m5[0m [36m34.2053[0m [36m-118.226[0m [36m2[0m[1;31m][0m
                         [1;31m[[0m[36m39[0m [1;35m"Baby Blues BBQ"[0m [36m5[0m [36m34.0003[0m [36m-118.465[0m [36m2[0m[1;31m][0m
                         [1;31m[[0m[36m40[0m [1;35m"Dear Mom"[0m [36m46[0m [36m37.7655[0m [36m-122.413[0m [36m2[0m[1;31m][0m
                         [1;31m[[0m[36m41[0m [1;35m"Cheese Steak Shop"[0m [36m18[0m [36m37.7855[0m [36m-122.44[0m [36m1[0m[1;31m][0m
                         [1;31m[[0m[36m42[0m [1;35m"Little Star Pizza"[0m [36m58[0m [36m37.7665[0m [36m-122.422[0m [36m2[0m[1;31m][0m
                         [1;31m[[0m[36m43[0m [1;35m"Marnee Thai"[0m [36m71[0m [36m37.7634[0m [36m-122.482[0m [36m2[0m[1;31m][0m
                         [1;31m[[0m[36m44[0m [1;35m"In-N-Out Burger"[0m [36m11[0m [36m37.8078[0m [36m-122.418[0m [36m1[0m[1;31m][0m
                         [1;31m[[0m[36m45[0m [1;35m"Tu Lan Restaurant"[0m [36m4[0m [36m37.7821[0m [36m-122.41[0m [36m1[0m[1;31m][0m
                         [1;31m[[0m[36m46[0m [1;35m"Shanghai Dumpling King"[0m [36m19[0m [36m37.7317[0m [36m-122.451[0m [36m2[0m[1;31m][0m
                         [1;31m[[0m[36m47[0m [1;35m"Marlowe"[0m [36m2[0m [36m37.7767[0m [36m-122.396[0m [36m3[0m[1;31m][0m
                         [1;31m[[0m[36m48[0m [1;35m"The Residence"[0m [36m7[0m [36m37.7677[0m [36m-122.429[0m [36m2[0m[1;31m][0m
                         [1;31m[[0m[36m49[0m [1;35m"Hotel Biron"[0m [36m74[0m [36m37.7735[0m [36m-122.422[0m [36m3[0m[1;31m][0m
                         [1;31m[[0m[36m50[0m [1;35m"Two Sisters Bar & Books"[0m [36m48[0m [36m37.7765[0m [36m-122.426[0m [36m2[0m[1;31m][0m
                         [1;31m[[0m[36m51[0m [1;35m"Empress of China"[0m [36m15[0m [36m37.7949[0m [36m-122.406[0m [36m3[0m[1;31m][0m
                         [1;31m[[0m[36m52[0m [1;35m"Cole's"[0m [36m7[0m [36m34.0448[0m [36m-118.25[0m [36m2[0m[1;31m][0m
                         [1;31m[[0m[36m53[0m [1;35m"Tam O'Shanter"[0m [36m18[0m [36m34.1254[0m [36m-118.264[0m [36m3[0m[1;31m][0m
                         [1;31m[[0m[36m54[0m [1;35m"Yamashiro Hollywood"[0m [36m2[0m [36m34.1057[0m [36m-118.342[0m [36m3[0m[1;31m][0m
                         [1;31m[[0m[36m55[0m [1;35m"Dal Rae Restaurant"[0m [36m67[0m [36m33.983[0m [36m-118.096[0m [36m4[0m[1;31m][0m
                         [1;31m[[0m[36m56[0m [1;35m"Philippe the Original"[0m [36m18[0m [36m34.0597[0m [36m-118.237[0m [36m1[0m[1;31m][0m
                         [1;31m[[0m[36m57[0m [1;35m"Musso & Frank Grill"[0m [36m2[0m [36m34.1018[0m [36m-118.335[0m [36m3[0m[1;31m][0m
                         [1;31m[[0m[36m58[0m [1;35m"Taylor's Prime Steak House"[0m [36m67[0m [36m34.0579[0m [36m-118.302[0m [36m3[0m[1;31m][0m
                         [1;31m[[0m[36m59[0m [1;35m"Pacific Dining Car"[0m [36m2[0m [36m34.0555[0m [36m-118.266[0m [36m3[0m[1;31m][0m
                         [1;31m[[0m[36m60[0m [1;35m"Polo Lounge"[0m [36m48[0m [36m34.0815[0m [36m-118.414[0m [36m3[0m[1;31m][0m
                         [1;31m[[0m[36m61[0m [1;35m"Lawry's The Prime Rib"[0m [36m67[0m [36m34.0677[0m [36m-118.376[0m [36m4[0m[1;31m][0m
                         [1;31m[[0m[36m62[0m [1;35m"Hot Sauce and Panko"[0m [36m64[0m [36m37.7825[0m [36m-122.476[0m [36m1[0m[1;31m][0m
                         [1;31m[[0m[36m63[0m [1;35m"Giordano Bros."[0m [36m18[0m [36m37.765[0m [36m-122.422[0m [36m1[0m[1;31m][0m
                         [1;31m[[0m[36m64[0m [1;35m"Festa"[0m [36m43[0m [36m37.7852[0m [36m-122.432[0m [36m2[0m[1;31m][0m
                         [1;31m[[0m[36m65[0m [1;35m"Slate"[0m [36m48[0m [36m37.765[0m [36m-122.418[0m [36m2[0m[1;31m][0m
                         [1;31m[[0m[36m66[0m [1;35m"Playground"[0m [36m43[0m [36m37.7858[0m [36m-122.43[0m [36m2[0m[1;31m][0m
                         [1;31m[[0m[36m67[0m [1;35m"Mint Karaoke Lounge"[0m [36m43[0m [36m37.7702[0m [36m-122.426[0m [36m2[0m[1;31m][0m
                         [1;31m[[0m[36m68[0m [1;35m"Dimples"[0m [36m43[0m [36m37.7856[0m [36m-122.43[0m [36m1[0m[1;31m][0m
                         [1;31m[[0m[36m69[0m [1;35m"The Virgil"[0m [36m48[0m [36m34.091[0m [36m-118.287[0m [36m2[0m[1;31m][0m
                         [1;31m[[0m[36m70[0m [1;35m"The Drawing Room"[0m [36m7[0m [36m34.1037[0m [36m-118.287[0m [36m1[0m[1;31m][0m
                         [1;31m[[0m[36m71[0m [1;35m"Frolic Room"[0m [36m7[0m [36m34.1016[0m [36m-118.326[0m [36m1[0m[1;31m][0m
                         [1;31m[[0m[36m72[0m [1;35m"The Daily Pint"[0m [36m7[0m [36m34.0211[0m [36m-118.466[0m [36m2[0m[1;31m][0m
                         [1;31m[[0m[36m73[0m
                          [1;35m"Pineapple Hill Saloon & Grill"[0m
                          [36m7[0m
                          [36m34.1525[0m
                          [36m-118.448[0m
                          [36m2[0m[1;31m][0m
                         [1;31m[[0m[36m74[0m [1;35m"Chez Jay"[0m [36m2[0m [36m34.0104[0m [36m-118.493[0m [36m2[0m[1;31m][0m
                         [1;31m[[0m[36m75[0m [1;35m"Geido"[0m [36m40[0m [36m40.6778[0m [36m-73.9729[0m [36m2[0m[1;31m][0m
                         [1;31m[[0m[36m76[0m [1;35m"Beyond Sushi"[0m [36m40[0m [36m40.7328[0m [36m-73.9861[0m [36m2[0m[1;31m][0m
                         [1;31m[[0m[36m77[0m [1;35m"Sushi Nakazawa"[0m [36m40[0m [36m40.7318[0m [36m-74.0045[0m [36m4[0m[1;31m][0m
                         [1;31m[[0m[36m78[0m [1;35m"Soto"[0m [36m40[0m [36m40.7321[0m [36m-74.0006[0m [36m2[0m[1;31m][0m
                         [1;31m[[0m[36m79[0m [1;35m"Sushi Yasuda"[0m [36m40[0m [36m40.7514[0m [36m-73.9736[0m [36m4[0m[1;31m][0m
                         [1;31m[[0m[36m80[0m [1;35m"Blue Ribbon Sushi"[0m [36m40[0m [36m40.7262[0m [36m-74.0026[0m [36m3[0m[1;31m][0m
                         [1;31m[[0m[36m81[0m [1;35m"Tanoshi Sushi & Sake Bar"[0m [36m40[0m [36m40.7677[0m [36m-73.9533[0m [36m4[0m[1;31m][0m
                         [1;31m[[0m[36m82[0m [1;35m"Bozu"[0m [36m40[0m [36m40.7129[0m [36m-73.9576[0m [36m2[0m[1;31m][0m
                         [1;31m[[0m[36m83[0m [1;35m"Sushi Yasaka"[0m [36m40[0m [36m40.7794[0m [36m-73.9835[0m [36m2[0m[1;31m][0m
                         [1;31m[[0m[36m84[0m [1;35m"Spitz Eagle Rock"[0m [36m49[0m [36m34.1411[0m [36m-118.221[0m [36m2[0m[1;31m][0m
                         [1;31m[[0m[36m85[0m [1;35m"Cha Cha Chicken"[0m [36m14[0m [36m34.0071[0m [36m-118.49[0m [36m1[0m[1;31m][0m
                         [1;31m[[0m[36m86[0m [1;35m"Yuca's Taqueria"[0m [36m50[0m [36m34.1092[0m [36m-118.287[0m [36m1[0m[1;31m][0m
                         [1;31m[[0m[36m87[0m [1;35m"The Gumbo Pot"[0m [36m64[0m [36m34.072[0m [36m-118.361[0m [36m2[0m[1;31m][0m
                         [1;31m[[0m[36m88[0m [1;35m"Kinaree Thai Bistro"[0m [36m71[0m [36m34.094[0m [36m-118.344[0m [36m1[0m[1;31m][0m
                         [1;31m[[0m[36m89[0m [1;35m"Tacos Villa Corona"[0m [36m50[0m [36m34.1177[0m [36m-118.261[0m [36m1[0m[1;31m][0m
                         [1;31m[[0m[36m90[0m [1;35m"Señor Fish"[0m [36m50[0m [36m34.0489[0m [36m-118.238[0m [36m2[0m[1;31m][0m
                         [1;31m[[0m[36m91[0m
                          [1;35m"Manuel's Original El Tepeyac Cafe"[0m
                          [36m50[0m
                          [36m34.0478[0m
                          [36m-118.198[0m
                          [36m2[0m[1;31m][0m
                         [1;31m[[0m[36m92[0m [1;35m"Tito's Tacos"[0m [36m50[0m [36m34.0082[0m [36m-118.415[0m [36m1[0m[1;31m][0m
                         [1;31m[[0m[36m93[0m [1;35m"33 Taps"[0m [36m7[0m [36m34.1018[0m [36m-118.326[0m [36m2[0m[1;31m][0m
                         [1;31m[[0m[36m94[0m [1;35m"Ye Rustic Inn"[0m [36m7[0m [36m34.1044[0m [36m-118.288[0m [36m1[0m[1;31m][0m
                         [1;31m[[0m[36m95[0m [1;35m"Rush Street"[0m [36m2[0m [36m34.023[0m [36m-118.395[0m [36m2[0m[1;31m][0m
                         [1;31m[[0m[36m96[0m [1;35m"Busby's West"[0m [36m48[0m [36m34.0372[0m [36m-118.469[0m [36m2[0m[1;31m][0m
                         [1;31m[[0m[36m97[0m [1;35m"Barney's Beanery"[0m [36m46[0m [36m34.0908[0m [36m-118.375[0m [36m2[0m[1;31m][0m
                         [1;31m[[0m[36m98[0m [1;35m"Lucky Baldwin's Pub"[0m [36m7[0m [36m34.1454[0m [36m-118.149[0m [36m2[0m[1;31m][0m
                         [1;31m[[0m[36m99[0m [1;35m"Golden Road Brewing"[0m [36m10[0m [36m34.1505[0m [36m-118.274[0m [36m2[0m[1;31m][0m
                         [1;31m[[0m[36m100[0m [1;35m"Mohawk Bend"[0m [36m46[0m [36m34.0777[0m [36m-118.265[0m [36m2[0m[1;31m][0m[1;31m][0m[1;31m}[0m,
           [1;33m:database_id[0m [36m1[0m,
           [1;33m:json_query[0m [1;31m{[0m[1;33m:constraints[0m [1;31m{[0m[1;33m:max-result[0m [36m10[0m, [1;33m:max-results-bare-rows[0m [36m5[0m[1;31m}[0m,
                        [1;33m:database[0m [36m1[0m,
                        [1;33m:query[0m [1;31m{[0m[1;33m:order-by[0m [1;31m[[0m[1;31m[[0m[1;33m:asc[0m [1;31m[[0m[1;33m:field[0m [36m1[0m [1;30mnil[0m[1;31m][0m[1;31m][0m[1;31m][0m,
                                [1;33m:source-table[0m [36m1[0m[1;31m}[0m,
                        [1;33m:type[0m [1;33m:query[0m[1;31m}[0m,
           [1;33m:row_count[0m [36m100[0m,
           [1;33m:running_time[0m [36m40[0m,
           [1;33m:started_at[0m [34m#<[0m[1;34mjava.time.ZonedDateTime[0m[34m@[0m630726e6 2023-09-02T03:07:28.011413Z[UTC][34m>[0m,
           [1;33m:status[0m [1;33m:completed[0m[1;31m}[0m


FAIL in metabase.query-processor.middleware.catch-exceptions-test/permissions-test (catch_exceptions_test.clj:163)
They should see it if they have ad-hoc native query perms
expected: [1;31m{[0m[1;33m:native[0m [1;31m([0m[1;34meq[0m
                    [1;31m{[0m[1;33m:params[0m [1;30mnil[0m,
                     [1;33m:query[0m [1;35m"SELECT DATE_TRUNC('month', \"PUBLIC\".\"VENUES\".\"ID\") AS \"ID\" FROM \"PUBLIC\".\"VENUES\" LIMIT 1048575"[0m[1;31m}[0m[1;31m)[0m,
           [1;33m:preprocessed[0m [1;31m([0m[1;34mpred[0m map?--5477[1;31m)[0m,
           Any Any[1;31m}[0m
  actual: [1;31m{[0m[1;33m:card_id[0m [1;30mnil[0m,
           [1;33m:class[0m [34m#<[0m[1;34mClass[0m[34m@[0m66bd2b72 org.h2.jdbc.JdbcSQLDataException[34m>[0m,
           [1;33m:context[0m [1;30mnil[0m,
           [1;33m:data[0m [1;31m{[0m[1;33m:cols[0m [1;31m[][0m, [1;33m:rows[0m [1;31m[][0m[1;31m}[0m,
           [1;33m:database_id[0m [36m443[0m,
           [1;33m:error[0m [1;35m"Invalid value \"BIGINT\" for parameter \"DATE_TRUNC datetime argument\"; SQL statement:\nSELECT DATE_TRUNC('month', \"PUBLIC\".\"VENUES\".\"ID\") AS \"ID\" FROM \"PUBLIC\".\"VENUES\" LIMIT 2000 [90008-214]"[0m,
           [1;33m:error_type[0m [1;33m:invalid-query[0m,
           [1;33m:json_query[0m [1;31m{[0m[1;33m:database[0m [36m443[0m,
                        [1;33m:query[0m [1;31m{[0m[1;33m:fields[0m [1;31m[[0m[1;31m[[0m[1;33m:field[0m [36m4334[0m [1;31m{[0m[1;33m:temporal-unit[0m [1;33m:month[0m[1;31m}[0m[1;31m][0m[1;31m][0m,
                                [1;33m:source-table[0m [36m1076[0m[1;31m}[0m,
                        [1;33m:type[0m [1;33m:query[0m[1;31m}[0m,
           [1;33m:native[0m [1;31m{[0m[1;33m:params[0m [1;30mnil[0m,
                    [1;33m:query[0m [1;35m"SELECT DATE_TRUNC('month', \"PUBLIC\".\"VENUES\".\"ID\") AS \"ID\" FROM \"PUBLIC\".\"VENUES\" LIMIT 2000"[0m[1;31m}[0m,
           [1;33m:preprocessed[0m [1;31m{[0m[1;33m:database[0m [36m443[0m,
                          [1;33m:query[0m [1;31m{[0m[1;33m:fields[0m [1;31m[[0m[1;31m[[0m[1;33m:field[0m [36m4334[0m [1;31m{[0m[1;33m:temporal-unit[0m [1;33m:month[0m[1;31m}[0m[1;31m][0m[1;31m][0m,
                                  [1;33m:limit[0m [36m2000[0m,
                                  [1;33m:source-table[0m [36m1076[0m,
                                  [1;33m:metabase.query-processor.middleware.limit/original-limit[0m [1;30mnil[0m[1;31m}[0m,
                          [1;33m:type[0m [1;33m:query[0m[1;31m}[0m,
           [1;33m:row_count[0m [36m0[0m,
           [1;33m:running_time[0m [36m0[0m,
           [1;33m:stacktrace[0m [1;31m[[0m[1;35m"org.h2.message.DbException.getJdbcSQLException(DbException.java:646)"[0m
                        [1;35m"org.h2.message.DbException.getJdbcSQLException(DbException.java:477)"[0m
                        [1;35m"org.h2.message.DbException.get(DbException.java:223)"[0m
                        [1;35m"org.h2.mvstore.db.Store.getInvalidExpressionTypeException(Store.java:190)"[0m
                        [1;35m"org.h2.expression.function.DateTimeFunction.optimize(DateTimeFunction.java:977)"[0m
                        [1;35m"org.h2.expression.Alias.optimize(Alias.java:52)"[0m
                        [1;35m"org.h2.command.query.Select.prepareExpressions(Select.java:1170)"[0m
                        [1;35m"org.h2.command.query.Query.prepare(Query.java:218)"[0m
                        [1;35m"org.h2.command.Parser.prepareCommand(Parser.java:575)"[0m
                        [1;35m"org.h2.engine.SessionLocal.prepareLocal(SessionLocal.java:631)"[0m
                        [1;35m"org.h2.engine.SessionLocal.prepareCommand(SessionLocal.java:554)"[0m
                        [1;35m"org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1116)"[0m
                        [1;35m"org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:237)"[0m
                        [1;35m"org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:223)"[0m
                        [1;35m"com.mchange.v2.c3p0.impl.NewProxyStatement.execute(NewProxyStatement.java:75)"[0m
                        [1;35m"--> driver.sql_jdbc.execute$eval108682$fn__108683.invoke(execute.clj:548)"[0m
                        [1;35m"driver.sql_jdbc.execute$execute_statement_or_prepared_statement_BANG_.invokeStatic(execute.clj:556)"[0m
                        [1;35m"driver.sql_jdbc.execute$execute_statement_or_prepared_statement_BANG_.invoke(execute.clj:553)"[0m
                        [1;35m"driver.sql_jdbc.execute$execute_reducible_query$fn__108773$fn__108774.invoke(execute.clj:671)"[0m
                        [1;35m"driver.sql_jdbc.execute$execute_reducible_query$fn__108773.invoke(execute.clj:670)"[0m
                        [1;35m"driver.h2$eval118127$fn__118129$fn__118131.invoke(h2.clj:494)"[0m
                        [1;35m"driver.sql_jdbc.execute$eval108500$do_with_resolved_connection__108501.invoke(execute.clj:334)"[0m
                        [1;35m"driver.h2$eval118127$fn__118129.invoke(h2.clj:485)"[0m
                        [1;35m"driver.sql_jdbc.execute$execute_reducible_query.invokeStatic(execute.clj:664)"[0m
                        [1;35m"driver.sql_jdbc.execute$execute_reducible_query.invoke(execute.clj:653)"[0m
                        [1;35m"driver.sql_jdbc.execute$execute_reducible_query.invokeStatic(execute.clj:661)"[0m
                        [1;35m"driver.sql_jdbc.execute$execute_reducible_query.invoke(execute.clj:653)"[0m
                        [1;35m"driver.sql_jdbc$eval117700$fn__117701.invoke(sql_jdbc.clj:72)"[0m
                        [1;35m"driver.h2$eval117877$fn__117878.invoke(h2.clj:223)"[0m
                        [1;35m"query_processor.context$executef.invokeStatic(context.clj:60)"[0m
                        [1;35m"query_processor.context$executef.invoke(context.clj:49)"[0m
                        [1;35m"query_processor.context.default$default_runf.invokeStatic(default.clj:68)"[0m
                        [1;35m"query_processor.context.default$default_runf.invoke(default.clj:66)"[0m
                        [1;35m"query_processor.context$runf.invokeStatic(context.clj:46)"[0m
                        [1;35m"query_processor.context$runf.invoke(context.clj:40)"[0m
                        [1;35m"query_processor.reducible$identity_qp.invokeStatic(reducible.clj:15)"[0m
                        [1;35m"query_processor.reducible$identity_qp.invoke(reducible.clj:12)"[0m
                        [1;35m"query_processor.middleware.cache$maybe_return_cached_results$maybe_return_cached_results_STAR___92055.invoke(cache.clj:224)"[0m
                        [1;35m"query_processor.middleware.permissions$check_query_permissions$fn__92395.invoke(permissions.clj:126)"[0m
                        [1;35m"metabase_enterprise.advanced_permissions.query_processor.middleware.permissions$check_download_permissions$fn__96054.invoke(permissions.clj:128)"[0m
                        [1;35m"metabase_enterprise.sandbox.query_processor.middleware.column_level_perms_check$maybe_apply_column_level_perms_check$fn__96301.invoke(column_level_perms_check.clj:31)"[0m
                        [1;35m"query_processor.middleware.mbql_to_native$mbql__GT_native$fn__93869.invoke(mbql_to_native.clj:24)"[0m
                        [1;35m"query_processor$fn__96949$combined_post_process__96954$combined_post_process_STAR___96955.invoke(query_processor.clj:260)"[0m
                        [1;35m"query_processor$fn__96949$combined_pre_process__96950$combined_pre_process_STAR___96951.invoke(query_processor.clj:257)"[0m
                        [1;35m"query_processor.middleware.resolve_database_and_driver$resolve_database_and_driver$fn__95157$fn__95162.invoke(resolve_database_and_driver.clj:36)"[0m
                        [1;35m"driver$do_with_driver.invokeStatic(driver.clj:91)"[0m
                        [1;35m"driver$do_with_driver.invoke(driver.clj:86)"[0m
                        [1;35m"query_processor.middleware.resolve_database_and_driver$resolve_database_and_driver$fn__95157.invoke(resolve_database_and_driver.clj:35)"[0m
                        [1;35m"query_processor.middleware.fetch_source_query$resolve_card_id_source_tables$fn__93672.invoke(fetch_source_query.clj:316)"[0m
                        [1;35m"query_processor.middleware.store$initialize_store$fn__95831$fn__95832.invoke(store.clj:12)"[0m
                        [1;35m"query_processor.store$do_with_store.invokeStatic(store.clj:56)"[0m
                        [1;35m"query_processor.store$do_with_store.invoke(store.clj:50)"[0m
                        [1;35m"query_processor.middleware.store$initialize_store$fn__95831.invoke(store.clj:11)"[0m
                        [1;35m"query_processor_test.test_mlv2$around_middleware$fn__76167.invoke(test_mlv2.clj:87)"[0m
                        [1;35m"query_processor.middleware.normalize_query$normalize$fn__93899.invoke(normalize_query.clj:36)"[0m
                        [1;35m"metabase_enterprise.audit_app.query_processor.middleware.handle_audit_queries$handle_internal_queries$fn__96267.invoke(handle_audit_queries.clj:131)"[0m
                        [1;35m"query_processor.middleware.constraints$add_default_userland_constraints$fn__90868.invoke(constraints.clj:53)"[0m
                        [1;35m"query_processor.middleware.process_userland_query$process_userland_query$fn__95029.invoke(process_userland_query.clj:151)"[0m
                        [1;35m"query_processor.middleware.catch_exceptions$catch_exceptions$fn__92519.invoke(catch_exceptions.clj:171)"[0m
                        [1;35m"query_processor.reducible$async_qp$qp_STAR___80331$thunk__80333.invoke(reducible.clj:103)"[0m
                        [1;35m"query_processor.reducible$async_qp$qp_STAR___80331.invoke(reducible.clj:109)"[0m
                        [1;35m"query_processor.reducible$async_qp$qp_STAR___80331.invoke(reducible.clj:94)"[0m
                        [1;35m"query_processor.reducible$async_qp$qp_STAR___80331.invoke(reducible.clj:91)"[0m
                        [1;35m"query_processor.reducible$sync_qp$qp_STAR___80343.doInvoke(reducible.clj:129)"[0m
                        [1;35m"query_processor$process_userland_query.invokeStatic(query_processor.clj:383)"[0m
                        [1;35m"query_processor$process_userland_query.doInvoke(query_processor.clj:379)"[0m
                        [1;35m"query_processor.middleware.catch_exceptions_test$fn__217063$fn__217064$fn__217072.invoke(catch_exceptions_test.clj:169)"[0m
                        [1;35m"test.data.users$do_with_test_user$fn__113752.invoke(users.clj:198)"[0m
                        [1;35m"server.middleware.session$do_with_current_user.invokeStatic(session.clj:315)"[0m
                        [1;35m"server.middleware.session$do_with_current_user.invoke(session.clj:304)"[0m
                        [1;35m"test.data.users$do_with_test_user.invokeStatic(users.clj:197)"[0m
                        [1;35m"test.data.users$do_with_test_user.invoke(users.clj:195)"[0m
                        [1;35m"query_processor.middleware.catch_exceptions_test$fn__217063$fn__217064.invoke(catch_exceptions_test.clj:168)"[0m
                        [1;35m"test.data.impl$do_with_db.invokeStatic(impl.clj:186)"[0m
                        [1;35m"test.data.impl$do_with_db.invoke(impl.clj:180)"[0m
                        [1;35m"test.data.impl$do_with_temp_copy_of_db.invokeStatic(impl.clj:337)"[0m
                        [1;35m"test.data.impl$do_with_temp_copy_of_db.invoke(impl.clj:327)"[0m
                        [1;35m"query_processor.middleware.catch_exceptions_test$fn__217063.invokeStatic(catch_exceptions_test.clj:150)"[0m
                        [1;35m"query_processor.middleware.catch_exceptions_test$fn__217063.invoke(catch_exceptions_test.clj:149)"[0m
                        [1;35m"test.redefs$new_with_redefs_fn.invokeStatic(redefs.clj:31)"[0m
                        [1;35m"test.redefs$new_with_redefs_fn.doInvoke(redefs.clj:29)"[0m
                        [1;35m"test_runner$find_and_run_tests_cli.invokeStatic(test_runner.clj:99)"[0m
                        [1;35m"test_runner$find_and_run_tests_cli.invoke(test_runner.clj:96)"[0m[1;31m][0m,
           [1;33m:started_at[0m [34m#<[0m[1;34mjava.time.ZonedDateTime[0m[34m@[0m43d38b82 2023-09-02T03:07:33.650832Z[UTC][34m>[0m,
           [1;33m:state[0m [1;35m"90008"[0m,
           [1;33m:status[0m [1;33m:failed[0m,
           [1;33m:via[0m [1;31m[[0m[1;31m{[0m[1;33m:class[0m [34m#<[0m[1;34mClass[0m[34m@[0m59d09ff3 clojure.lang.ExceptionInfo[34m>[0m,
                  [1;33m:error[0m [1;35m"Error executing query: Invalid value \"BIGINT\" for parameter \"DATE_TRUNC datetime argument\"; SQL statement:\nSELECT DATE_TRUNC('month', \"PUBLIC\".\"VENUES\".\"ID\") AS \"ID\" FROM \"PUBLIC\".\"VENUES\" LIMIT 2000 [90008-214]"[0m,
                  [1;33m:error_type[0m [1;33m:invalid-query[0m,
                  [1;33m:ex-data[0m [1;31m{[0m[1;33m:driver[0m [1;33m:h2[0m,
                            [1;33m:params[0m [1;30mnil[0m,
                            [1;33m:sql[0m [1;31m[[0m[1;35m"-- Metabase"[0m
                                  [1;35m"SELECT"[0m
                                  [1;35m"  DATE_TRUNC('month', \"PUBLIC\".\"VENUES\".\"ID\") AS \"ID\""[0m
                                  [1;35m"FROM"[0m
                                  [1;35m"  \"PUBLIC\".\"VENUES\""[0m
                                  [1;35m"LIMIT"[0m
                                  [1;35m"  2000"[0m[1;31m][0m,
                            [1;33m:type[0m [1;33m:invalid-query[0m[1;31m}[0m,
                  [1;33m:stacktrace[0m [1;31m[[0m[1;35m"--> driver.sql_jdbc.execute$execute_reducible_query$fn__108773$fn__108774.invoke(execute.clj:673)"[0m
                               [1;35m"driver.sql_jdbc.execute$execute_reducible_query$fn__108773.invoke(execute.clj:670)"[0m
                               [1;35m"driver.h2$eval118127$fn__118129$fn__118131.invoke(h2.clj:494)"[0m
                               [1;35m"driver.sql_jdbc.execute$eval108500$do_with_resolved_connection__108501.invoke(execute.clj:334)"[0m
                               [1;35m"driver.h2$eval118127$fn__118129.invoke(h2.clj:485)"[0m
                               [1;35m"driver.sql_jdbc.execute$execute_reducible_query.invokeStatic(execute.clj:664)"[0m
                               [1;35m"driver.sql_jdbc.execute$execute_reducible_query.invoke(execute.clj:653)"[0m
                               [1;35m"driver.sql_jdbc.execute$execute_reducible_query.invokeStatic(execute.clj:661)"[0m
                               [1;35m"driver.sql_jdbc.execute$execute_reducible_query.invoke(execute.clj:653)"[0m
                               [1;35m"driver.sql_jdbc$eval117700$fn__117701.invoke(sql_jdbc.clj:72)"[0m
                               [1;35m"driver.h2$eval117877$fn__117878.invoke(h2.clj:223)"[0m
                               [1;35m"query_processor.context$executef.invokeStatic(context.clj:60)"[0m
                               [1;35m"query_processor.context$executef.invoke(context.clj:49)"[0m
                               [1;35m"query_processor.context.default$default_runf.invokeStatic(default.clj:68)"[0m
                               [1;35m"query_processor.context.default$default_runf.invoke(default.clj:66)"[0m
                               [1;35m"query_processor.context$runf.invokeStatic(context.clj:46)"[0m
                               [1;35m"query_processor.context$runf.invoke(context.clj:40)"[0m
                               [1;35m"query_processor.reducible$identity_qp.invokeStatic(reducible.clj:15)"[0m
                               [1;35m"query_processor.reducible$identity_qp.invoke(reducible.clj:12)"[0m
                               [1;35m"query_processor.middleware.cache$maybe_return_cached_results$maybe_return_cached_results_STAR___92055.invoke(cache.clj:224)"[0m
                               [1;35m"query_processor.middleware.permissions$check_query_permissions$fn__92395.invoke(permissions.clj:126)"[0m
                               [1;35m"metabase_enterprise.advanced_permissions.query_processor.middleware.permissions$check_download_permissions$fn__96054.invoke(permissions.clj:128)"[0m
                               [1;35m"metabase_enterprise.sandbox.query_processor.middleware.column_level_perms_check$maybe_apply_column_level_perms_check$fn__96301.invoke(column_level_perms_check.clj:31)"[0m
                               [1;35m"query_processor.middleware.mbql_to_native$mbql__GT_native$fn__93869.invoke(mbql_to_native.clj:24)"[0m
                               [1;35m"query_processor$fn__96949$combined_post_process__96954$combined_post_process_STAR___96955.invoke(query_processor.clj:260)"[0m
                               [1;35m"query_processor$fn__96949$combined_pre_process__96950$combined_pre_process_STAR___96951.invoke(query_processor.clj:257)"[0m
                               [1;35m"query_processor.middleware.resolve_database_and_driver$resolve_database_and_driver$fn__95157$fn__95162.invoke(resolve_database_and_driver.clj:36)"[0m
                               [1;35m"driver$do_with_driver.invokeStatic(driver.clj:91)"[0m
                               [1;35m"driver$do_with_driver.invoke(driver.clj:86)"[0m
                               [1;35m"query_processor.middleware.resolve_database_and_driver$resolve_database_and_driver$fn__95157.invoke(resolve_database_and_driver.clj:35)"[0m
                               [1;35m"query_processor.middleware.fetch_source_query$resolve_card_id_source_tables$fn__93672.invoke(fetch_source_query.clj:316)"[0m
                               [1;35m"query_processor.middleware.store$initialize_store$fn__95831$fn__95832.invoke(store.clj:12)"[0m
                               [1;35m"query_processor.store$do_with_store.invokeStatic(store.clj:56)"[0m
                               [1;35m"query_processor.store$do_with_store.invoke(store.clj:50)"[0m
                               [1;35m"query_processor.middleware.store$initialize_store$fn__95831.invoke(store.clj:11)"[0m
                               [1;35m"query_processor_test.test_mlv2$around_middleware$fn__76167.invoke(test_mlv2.clj:87)"[0m
                               [1;35m"query_processor.middleware.normalize_query$normalize$fn__93899.invoke(normalize_query.clj:36)"[0m
                               [1;35m"metabase_enterprise.audit_app.query_processor.middleware.handle_audit_queries$handle_internal_queries$fn__96267.invoke(handle_audit_queries.clj:131)"[0m
                               [1;35m"query_processor.middleware.constraints$add_default_userland_constraints$fn__90868.invoke(constraints.clj:53)"[0m
                               [1;35m"query_processor.middleware.process_userland_query$process_userland_query$fn__95029.invoke(process_userland_query.clj:151)"[0m
                               [1;35m"query_processor.middleware.catch_exceptions$catch_exceptions$fn__92519.invoke(catch_exceptions.clj:171)"[0m
                               [1;35m"query_processor.reducible$async_qp$qp_STAR___80331$thunk__80333.invoke(reducible.clj:103)"[0m
                               [1;35m"query_processor.reducible$async_qp$qp_STAR___80331.invoke(reducible.clj:109)"[0m
                               [1;35m"query_processor.reducible$async_qp$qp_STAR___80331.invoke(reducible.clj:94)"[0m
                               [1;35m"query_processor.reducible$async_qp$qp_STAR___80331.invoke(reducible.clj:91)"[0m
                               [1;35m"query_processor.reducible$sync_qp$qp_STAR___80343.doInvoke(reducible.clj:129)"[0m
                               [1;35m"query_processor$process_userland_query.invokeStatic(query_processor.clj:383)"[0m
                               [1;35m"query_processor$process_userland_query.doInvoke(query_processor.clj:379)"[0m
                               [1;35m"query_processor.middleware.catch_exceptions_test$fn__217063$fn__217064$fn__217072.invoke(catch_exceptions_test.clj:169)"[0m
                               [1;35m"test.data.users$do_with_test_user$fn__113752.invoke(users.clj:198)"[0m
                               [1;35m"server.middleware.session$do_with_current_user.invokeStatic(session.clj:315)"[0m
                               [1;35m"server.middleware.session$do_with_current_user.invoke(session.clj:304)"[0m
                               [1;35m"test.data.users$do_with_test_user.invokeStatic(users.clj:197)"[0m
                               [1;35m"test.data.users$do_with_test_user.invoke(users.clj:195)"[0m
                               [1;35m"query_processor.middleware.catch_exceptions_test$fn__217063$fn__217064.invoke(catch_exceptions_test.clj:168)"[0m
                               [1;35m"test.data.impl$do_with_db.invokeStatic(impl.clj:186)"[0m
                               [1;35m"test.data.impl$do_with_db.invoke(impl.clj:180)"[0m
                               [1;35m"test.data.impl$do_with_temp_copy_of_db.invokeStatic(impl.clj:337)"[0m
                               [1;35m"test.data.impl$do_with_temp_copy_of_db.invoke(impl.clj:327)"[0m
                               [1;35m"query_processor.middleware.catch_exceptions_test$fn__217063.invokeStatic(catch_exceptions_test.clj:150)"[0m
                               [1;35m"query_processor.middleware.catch_exceptions_test$fn__217063.invoke(catch_exceptions_test.clj:149)"[0m
                               [1;35m"test.redefs$new_with_redefs_fn.invokeStatic(redefs.clj:31)"[0m
                               [1;35m"test.redefs$new_with_redefs_fn.doInvoke(redefs.clj:29)"[0m
                               [1;35m"test_runner$find_and_run_tests_cli.invokeStatic(test_runner.clj:99)"[0m
                               [1;35m"test_runner$find_and_run_tests_cli.invoke(test_runner.clj:96)"[0m[1;31m][0m,
                  [1;33m:status[0m [1;33m:failed[0m[1;31m}[0m[1;31m][0m[1;31m}[0m

FAIL in metabase.query-processor.middleware.limit-test/max-results-constraint-test (limit_test.clj:39)
Apply an arbitrary max-results on the query and ensure our results size is appropriately constrained
expected: [36m1234[0m
  actual: [36m2000[0m


FAIL in metabase.query-processor.middleware.limit-test/no-aggregation-test (limit_test.clj:51)
Apply a max-results-bare-rows limit specifically on no-aggregation query
number of rows in results should match limit added by middleware
expected: [36m46[0m
  actual: [36m2000[0m


FAIL in metabase.query-processor.middleware.limit-test/no-aggregation-test (limit_test.clj:54)
Apply a max-results-bare-rows limit specifically on no-aggregation query
:row_count should match the limit added by middleware
expected: [36m46[0m
  actual: [36m2000[0m


FAIL in metabase.query-processor.middleware.limit-test/no-aggregation-test (limit_test.clj:57)
Apply a max-results-bare-rows limit specifically on no-aggregation query
Preprocessed query should have :limit added to it
expected: [1;31m{[0m[1;33m:constraints[0m [1;31m{[0m[1;33m:max-results[0m [36m46[0m[1;31m}[0m,
           [1;33m:query[0m [1;31m{[0m[1;33m:limit[0m [36m46[0m,
                   [1;33m:metabase.query-processor.middleware.limit/original-limit[0m [1;30mnil[0m[1;31m}[0m,
           [1;33m:type[0m [1;33m:query[0m[1;31m}[0m
  actual: [1;31m{[0m[1;33m:constraints[0m [1;31m{[0m[1;33m:max-results[0m [36m46[0m[1;31m}[0m,
           [1;33m:query[0m [1;31m{[0m[1;33m:limit[0m [36m2000[0m,
                   [1;33m:metabase.query-processor.middleware.limit/original-limit[0m [1;30mnil[0m[1;31m}[0m,
           [1;33m:type[0m [1;33m:query[0m[1;31m}[0m
    diff: - [1;31m{[0m[1;33m:query[0m [1;31m{[0m[1;33m:limit[0m [36m46[0m[1;31m}[0m[1;31m}[0m
          + [1;31m{[0m[1;33m:query[0m [1;31m{[0m[1;33m:limit[0m [36m2000[0m[1;31m}[0m[1;31m}[0m

FAIL in metabase.query-processor.middleware.limit-test/limit-results-rows-test (limit_test.clj:20)
Apply to an infinite sequence and make sure it gets capped at `qp.i/absolute-max-results`
expected: [36m10000[0m
  actual: [36m2000[0m


FAIL in metabase.query-processor.middleware.limit-test/disable-max-results-test (limit_test.clj:27)
Apply `absolute-max-results` limit in the default case
expected: [1;31m{[0m[1;33m:query[0m [1;31m{[0m[1;33m:limit[0m [36m1048575[0m,
                   [1;33m:metabase.query-processor.middleware.limit/original-limit[0m [1;30mnil[0m[1;31m}[0m,
           [1;33m:type[0m [1;33m:query[0m[1;31m}[0m
  actual: [1;31m{[0m[1;33m:query[0m [1;31m{[0m[1;33m:limit[0m [36m2000[0m,
                   [1;33m:metabase.query-processor.middleware.limit/original-limit[0m [1;30mnil[0m[1;31m}[0m,
           [1;33m:type[0m [1;33m:query[0m[1;31m}[0m
    diff: - [1;31m{[0m[1;33m:query[0m [1;31m{[0m[1;33m:limit[0m [36m1048575[0m[1;31m}[0m[1;31m}[0m
          + [1;31m{[0m[1;33m:query[0m [1;31m{[0m[1;33m:limit[0m [36m2000[0m[1;31m}[0m[1;31m}[0m

FAIL in metabase.query-processor.middleware.parameters-test/expand-multiple-referenced-cards-in-template-tags (parameters_test.clj:225)
recursive native/MBQL queries, referenced in template tags, are correctly substituted 
with temporary :model/Card with attributes
{:creator_id 2,
 :database_id 1,
 :dataset_query {:database 1, :type :query, :query {:source-table 1}},
 :display :table,
 :name "KIFVTAEJJOFLQFMHYALD",
 :visualization_settings {}}

 
with temporary :model/Card with attributes
{:creator_id 2,
 :database_id 1,
 :dataset_query
 {:type :native,
  :native
  {:query "SELECT * FROM {{#1635}} AS c1",
   :template-tags {"#1635" {:id "#1635", :name "#1635", :display-name "#1635", :type "card", :card-id 1635}}},
  :database 1},
 :display :table,
 :name "ADWLKXGUZBQXFNDOBWYY",
 :visualization_settings {}}


expected: [1;31m{[0m[1;33m:database[0m [36m1[0m,
           [1;33m:native[0m [1;31m{[0m[1;33m:params[0m [1;31m[][0m,
                    [1;33m:query[0m [1;35m"SELECT COUNT(*) FROM (SELECT * FROM (SELECT \"PUBLIC\".\"VENUES\".\"ID\" AS \"ID\", \"PUBLIC\".\"VENUES\".\"NAME\" AS \"NAME\", \"PUBLIC\".\"VENUES\".\"CATEGORY_ID\" AS \"CATEGORY_ID\", \"PUBLIC\".\"VENUES\".\"LATITUDE\" AS \"LATITUDE\", \"PUBLIC\".\"VENUES\".\"LONGITUDE\" AS \"LONGITUDE\", \"PUBLIC\".\"VENUES\".\"PRICE\" AS \"PRICE\" FROM \"PUBLIC\".\"VENUES\" LIMIT 1048575) AS c1) AS c2"[0m[1;31m}[0m,
           [1;33m:type[0m [1;33m:native[0m[1;31m}[0m
  actual: [1;31m{[0m[1;33m:database[0m [36m1[0m,
           [1;33m:native[0m [1;31m{[0m[1;33m:params[0m [1;31m[][0m,
                    [1;33m:query[0m [1;35m"SELECT COUNT(*) FROM (SELECT * FROM (SELECT \"PUBLIC\".\"VENUES\".\"ID\" AS \"ID\", \"PUBLIC\".\"VENUES\".\"NAME\" AS \"NAME\", \"PUBLIC\".\"VENUES\".\"CATEGORY_ID\" AS \"CATEGORY_ID\", \"PUBLIC\".\"VENUES\".\"LATITUDE\" AS \"LATITUDE\", \"PUBLIC\".\"VENUES\".\"LONGITUDE\" AS \"LONGITUDE\", \"PUBLIC\".\"VENUES\".\"PRICE\" AS \"PRICE\" FROM \"PUBLIC\".\"VENUES\" LIMIT 2000) AS c1) AS c2"[0m[1;31m}[0m,
           [1;33m:type[0m [1;33m:native[0m[1;31m}[0m
    diff: - [1;31m{[0m[1;33m:native[0m [1;31m{[0m[1;33m:query[0m [1;35m"SELECT COUNT(*) FROM (SELECT * FROM (SELECT \"PUBLIC\".\"VENUES\".\"ID\" AS \"ID\", \"PUBLIC\".\"VENUES\".\"NAME\" AS \"NAME\", \"PUBLIC\".\"VENUES\".\"CATEGORY_ID\" AS \"CATEGORY_ID\", \"PUBLIC\".\"VENUES\".\"LATITUDE\" AS \"LATITUDE\", \"PUBLIC\".\"VENUES\".\"LONGITUDE\" AS \"LONGITUDE\", \"PUBLIC\".\"VENUES\".\"PRICE\" AS \"PRICE\" FROM \"PUBLIC\".\"VENUES\" LIMIT 1048575) AS c1) AS c2"[0m[1;31m}[0m[1;31m}[0m
          + [1;31m{[0m[1;33m:native[0m [1;31m{[0m[1;33m:query[0m [1;35m"SELECT COUNT(*) FROM (SELECT * FROM (SELECT \"PUBLIC\".\"VENUES\".\"ID\" AS \"ID\", \"PUBLIC\".\"VENUES\".\"NAME\" AS \"NAME\", \"PUBLIC\".\"VENUES\".\"CATEGORY_ID\" AS \"CATEGORY_ID\", \"PUBLIC\".\"VENUES\".\"LATITUDE\" AS \"LATITUDE\", \"PUBLIC\".\"VENUES\".\"LONGITUDE\" AS \"LONGITUDE\", \"PUBLIC\".\"VENUES\".\"PRICE\" AS \"PRICE\" FROM \"PUBLIC\".\"VENUES\" LIMIT 2000) AS c1) AS c2"[0m[1;31m}[0m[1;31m}[0m

LONG TEST in metabase.query-processor.pivot-test/pivots-should-not-return-expressions-test
Test took 1.825 seconds seconds to run

LONG TEST in metabase.query-processor.pivot-test/allow-other-rfs-test
Test took 1.853 seconds seconds to run

LONG TEST in metabase.query-processor.streaming-test/join-export-test
Test took 1.650 seconds seconds to run

LONG TEST in metabase.query-processor.streaming-test/remapped-columns-test
Test took 1.734 seconds seconds to run

LONG TEST in metabase.query-processor.util.add-alias-info-test/uniquify-aliases-test
Test took 2.743 seconds seconds to run

LONG TEST in metabase.query-processor.util.add-alias-info-test/query->expected-cols-test
Test took 2.807 seconds seconds to run

LONG TEST in metabase.query-processor.util.add-alias-info-test/multiple-joins-test
Test took 2.824 seconds seconds to run

FAIL in metabase.sample-data-test/sync-sample-database-test (sample_data_test.clj:83)
Make sure the Sample Database is getting synced correctly. For example PEOPLE.NAME should be has_field_values = search instead of `list`. 
with temporary :model/Database with attributes
{:details
 {:db
  "file:/Users/ryancronin/Workspaces/metabase/metabase-fork/plugins/sample-database.db;USER=GUEST;PASSWORD=guest;ACCESS_MODE_DATA=r"},
 :engine :h2,
 :is_sample false,
 :name "Sample Database"}


expected: [1;31m{[0m[1;33m:active[0m [32mtrue[0m,
           [1;33m:base_type[0m [1;33m:type/Text[0m,
           [1;33m:database_type[0m [1;35m"CHARACTER VARYING"[0m,
           [1;33m:description[0m [1;35m"The name of the user who owns an account"[0m,
           [1;33m:display_name[0m [1;35m"Name"[0m,
           [1;33m:fingerprint[0m [1;31m{[0m[1;33m:global[0m [1;31m{[0m[1;33m:distinct-count[0m [36m2499[0m, [1;33m:nil%[0m [36m0.0[0m[1;31m}[0m,
                         [1;33m:type[0m [1;31m{[0m[1;33m:type/Text[0m [1;31m{[0m[1;33m:average-length[0m [36m13.532[0m,
                                            [1;33m:percent-email[0m [36m0.0[0m,
                                            [1;33m:percent-json[0m [36m0.0[0m,
                                            [1;33m:percent-state[0m [36m0.0[0m,
                                            [1;33m:percent-url[0m [36m0.0[0m[1;31m}[0m[1;31m}[0m[1;31m}[0m,
           [1;33m:has_field_values[0m [1;33m:search[0m,
           [1;33m:name[0m [1;35m"NAME"[0m,
           [1;33m:preview_display[0m [32mtrue[0m,
           [1;33m:semantic_type[0m [1;33m:type/Name[0m,
           [1;33m:visibility_type[0m [1;33m:normal[0m[1;31m}[0m
  actual: [1;31m{[0m[1;33m:active[0m [32mtrue[0m,
           [1;33m:base_type[0m [1;33m:type/Text[0m,
           [1;33m:database_type[0m [1;35m"CHARACTER VARYING"[0m,
           [1;33m:description[0m [1;35m"The name of the user who owns an account"[0m,
           [1;33m:display_name[0m [1;35m"Name"[0m,
           [1;33m:fingerprint[0m [1;31m{[0m[1;33m:global[0m [1;31m{[0m[1;33m:distinct-count[0m [36m1999[0m, [1;33m:nil%[0m [36m0.0[0m[1;31m}[0m,
                         [1;33m:type[0m [1;31m{[0m[1;33m:type/Text[0m [1;31m{[0m[1;33m:average-length[0m [36m13.535[0m,
                                            [1;33m:percent-email[0m [36m0.0[0m,
                                            [1;33m:percent-json[0m [36m0.0[0m,
                                            [1;33m:percent-state[0m [36m0.0[0m,
                                            [1;33m:percent-url[0m [36m0.0[0m[1;31m}[0m[1;31m}[0m[1;31m}[0m,
           [1;33m:has_field_values[0m [1;33m:search[0m,
           [1;33m:name[0m [1;35m"NAME"[0m,
           [1;33m:preview_display[0m [32mtrue[0m,
           [1;33m:semantic_type[0m [1;33m:type/Name[0m,
           [1;33m:visibility_type[0m [1;33m:normal[0m[1;31m}[0m
    diff: - [1;31m{[0m[1;33m:fingerprint[0m [1;31m{[0m[1;33m:global[0m [1;31m{[0m[1;33m:distinct-count[0m [36m2499[0m[1;31m}[0m,
                           [1;33m:type[0m [1;31m{[0m[1;33m:type/Text[0m [1;31m{[0m[1;33m:average-length[0m [36m13.532[0m[1;31m}[0m[1;31m}[0m[1;31m}[0m[1;31m}[0m
          + [1;31m{[0m[1;33m:fingerprint[0m [1;31m{[0m[1;33m:global[0m [1;31m{[0m[1;33m:distinct-count[0m [36m1999[0m[1;31m}[0m,
                           [1;33m:type[0m [1;31m{[0m[1;33m:type/Text[0m [1;31m{[0m[1;33m:average-length[0m [36m13.535[0m[1;31m}[0m[1;31m}[0m[1;31m}[0m[1;31m}[0m

LONG TEST in metabase.sample-data-test/sync-sample-database-test
Test took 2.912 seconds seconds to run

LONG TEST in metabase.sample-data-test/extract-sample-database-test
Test took 3.076 seconds seconds to run

LONG TEST in metabase.sample-data-test/write-rows-sample-database-test
Test took 2.736 seconds seconds to run

LONG TEST in metabase.sample-data-test/ddl-sample-database-test
Test took 2.633 seconds seconds to run

LONG TEST in metabase.setup-test/has-user-setup-cached-test
Test took 1.518 seconds seconds to run

FAIL in metabase.shared.formatting.time-test/format-time-test (time_test.cljc:7)
(= "1:02 AM" (time/format-time "01:02:03.456+07:00"))
expected: [1;35m"1:02 AM"[0m
  actual: [1;35m"1:02 AM"[0m


FAIL in metabase.shared.formatting.time-test/format-time-test (time_test.cljc:7)
(= "1:02 AM" (time/format-time "01:02"))
expected: [1;35m"1:02 AM"[0m
  actual: [1;35m"1:02 AM"[0m


FAIL in metabase.shared.formatting.time-test/format-time-test (time_test.cljc:7)
(= "10:29 PM" (time/format-time "22:29:59.26816+01:00"))
expected: [1;35m"10:29 PM"[0m
  actual: [1;35m"10:29 PM"[0m


FAIL in metabase.shared.formatting.time-test/format-time-test (time_test.cljc:7)
(= "10:29 PM" (time/format-time "22:29:59.412459+01:00"))
expected: [1;35m"10:29 PM"[0m
  actual: [1;35m"10:29 PM"[0m


FAIL in metabase.shared.formatting.time-test/format-time-test (time_test.cljc:7)
(= "7:14 PM" (time/format-time "19:14:42.926221+01:00"))
expected: [1;35m"7:14 PM"[0m
  actual: [1;35m"7:14 PM"[0m


FAIL in metabase.shared.formatting.time-test/format-time-test (time_test.cljc:7)
(= "7:14 PM" (time/format-time "19:14:42.13202+01:00"))
expected: [1;35m"7:14 PM"[0m
  actual: [1;35m"7:14 PM"[0m


FAIL in metabase.shared.formatting.time-test/format-time-test (time_test.cljc:7)
(= "1:38 PM" (time/format-time "13:38:58.987352+01:00"))
expected: [1;35m"1:38 PM"[0m
  actual: [1;35m"1:38 PM"[0m


FAIL in metabase.shared.formatting.time-test/format-time-test (time_test.cljc:7)
(= "1:38 PM" (time/format-time "13:38:58.001001+01:00"))
expected: [1;35m"1:38 PM"[0m
  actual: [1;35m"1:38 PM"[0m


FAIL in metabase.shared.formatting.time-test/format-time-test (time_test.cljc:7)
(= "5:01 PM" (time/format-time "17:01:23+01:00"))
expected: [1;35m"5:01 PM"[0m
  actual: [1;35m"5:01 PM"[0m


FAIL in metabase.sync.sync-metadata.fields-test/dont-splice-inactive-columns-into-queries-test (fields_test.clj:105)
make sure that inactive columns don't end up getting spliced into queries! This test arguably belongs in the query processor tests since it's ultimately checking to make sure columns marked as `:active` = `false` aren't getting put in queries with implicit `:fields` clauses, but since this could be seen as covering both QP and sync (my and others' assumption when first coming across bug #6146 was that this was a sync issue), this test can stay here for now along with the other test we have testing sync after dropping a column.
expected: [1;31m{[0m[1;33m:after-sync[0m [1;35m"SELECT \"PUBLIC\".\"birds\".\"species\" AS \"species\" FROM \"PUBLIC\".\"birds\" LIMIT 1048575"[0m,
           [1;33m:before-sync[0m [1;35m"SELECT \"PUBLIC\".\"birds\".\"species\" AS \"species\", \"PUBLIC\".\"birds\".\"example_name\" AS \"example_name\" FROM \"PUBLIC\".\"birds\" LIMIT 1048575"[0m[1;31m}[0m
  actual: [1;31m{[0m[1;33m:after-sync[0m [1;35m"SELECT \"PUBLIC\".\"birds\".\"species\" AS \"species\" FROM \"PUBLIC\".\"birds\" LIMIT 2000"[0m,
           [1;33m:before-sync[0m [1;35m"SELECT \"PUBLIC\".\"birds\".\"species\" AS \"species\", \"PUBLIC\".\"birds\".\"example_name\" AS \"example_name\" FROM \"PUBLIC\".\"birds\" LIMIT 2000"[0m[1;31m}[0m


FAIL in metabase.util.date-2-test/format-human-readable-test (date_2_test.clj:202)

with user locale :en-US java.time.ZonedDateTime #t "2021-04-02T14:42:09.524392-07:00[US/Pacific]"
expected: [1;31m([0m[1;34mcontains?[0m expected actual[1;31m)[0m
  actual: [1;31m([0m[1;34mnot[0m
           [1;31m([0m[1;34mcontains?[0m
            [1;31m#{[0m[1;35m"April 2, 2021 2:42:09 PM (Pacific Daylight Time)"[0m
              [1;35m"April 2, 2021, 2:42:09 PM (Pacific Daylight Time)"[0m[1;31m}[0m
            [1;35m"April 2, 2021, 2:42:09 PM (Pacific Daylight Time)"[0m[1;31m)[0m[1;31m)[0m

FAIL in metabase.util.date-2-test/format-human-readable-test (date_2_test.clj:202)

with user locale :en-US java.time.OffsetDateTime #t "2021-04-02T14:42:09.524392-07:00"
expected: [1;31m([0m[1;34mcontains?[0m expected actual[1;31m)[0m
  actual: [1;31m([0m[1;34mnot[0m
           [1;31m([0m[1;34mcontains?[0m
            [1;31m#{[0m[1;35m"April 2, 2021 2:42:09 PM (GMT-07:00)"[0m
              [1;35m"April 2, 2021, 2:42:09 PM (GMT-07:00)"[0m[1;31m}[0m
            [1;35m"April 2, 2021, 2:42:09 PM (GMT-07:00)"[0m[1;31m)[0m[1;31m)[0m

FAIL in metabase.util.date-2-test/format-human-readable-test (date_2_test.clj:202)

with user locale :en-US java.time.LocalDateTime #t "2021-04-02T14:42:09.524392"
expected: [1;31m([0m[1;34mcontains?[0m expected actual[1;31m)[0m
  actual: [1;31m([0m[1;34mnot[0m
           [1;31m([0m[1;34mcontains?[0m
            [1;31m#{[0m[1;35m"April 2, 2021 2:42:09 PM"[0m [1;35m"April 2, 2021, 2:42:09 PM"[0m[1;31m}[0m
            [1;35m"April 2, 2021, 2:42:09 PM"[0m[1;31m)[0m[1;31m)[0m

FAIL in metabase.util.date-2-test/format-human-readable-test (date_2_test.clj:203)

with user locale :en-US java.time.OffsetTime #t "14:42:09.524392-07:00"
expected: [1;35m"2:42:09 PM (GMT-07:00)"[0m
  actual: [1;35m"2:42:09 PM (GMT-07:00)"[0m


FAIL in metabase.util.date-2-test/format-human-readable-test (date_2_test.clj:203)

with user locale :en-US java.time.LocalTime #t "14:42:09.524392"
expected: [1;35m"2:42:09 PM"[0m
  actual: [1;35m"2:42:09 PM"[0m


Ran 3857 tests in 540.705 seconds
37586 assertions, 51 failures, 0 errors.
{:test 3857,
 :pass 37535,
 :fail 51,
 :error 0,
 :type :summary,
 :duration 540704.900291,
 :single-threaded 3017,
 :parallel 840}
Ran 840 tests in parallel, 3017 single-threaded.
Finding and running tests took 9.5 mins.
Tests failed.
