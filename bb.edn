{:min-bb-version "1.12.197"
 ;; we put path as bin, and everything is in the ./mage subdirectory,
 ;; so the namespaces are mage.cli, mage.format, etc.
 :paths          ["mage" "test" "bin/lint-migrations-file/src"]
 :deps           {metosin/malli {:mvn/version "0.17.0"}
                  table/table   {:mvn/version "0.5.0"}}
 :tasks
 {:requires [[mage.cli :as cli]]
  :init (do (defmacro task! "Binds the parsed command line arguments to `parsed`."
              [& body]
              ;; Can't use ` in this file because it is strictly edn!
              (list 'let
                    (vector 'parsed (list 'cli/parse! (list 'current-task)))
                    (cons 'do body))))

  cljfmt-staged
  {:doc      "Runs cljfmt on staged files"
   :requires [[mage.format :as format]]
   :examples [["./bin/mage cljfmt-staged" "Format staged files"]
              ["./bin/mage cljfmt-staged -c" "Check staged files"]]
   :options  [["-c" "--force-check" "Check staged files"]]
   :task     (task! (format/staged parsed))}

  cljfmt-files
  {:doc        "Runs cljfmt on the given files/directories"
   :requires   [[mage.format :as format]]
   :examples   [["./bin/mage cljfmt-files src/metabase/events.clj" "Format events.clj"]
                ["./bin/mage cljfmt-files src" "Format all files in src"]
                ["./bin/mage cljfmt-files -c src" "Check all files in src"]]
   :options    [["-c" "--force-check" "Check staged files"]]
   :arg-schema [:sequential [:string {:description "Files or directories to format."}]]
   :task       (task! (format/files parsed))}

  cljfmt-all
  {:doc      "Runs cljfmt on all (clojure) files"
   :requires [[mage.format :as format]]
   :examples [["./bin/mage cljfmt-all" "Format all files"]]
   :options  [["-c" "--force-check" "Check staged files"]]
   :task     (task! (format/all parsed))}

  cljfmt-updated
  {:doc        "Runs cljfmt on all (Clojure) files relative to a git ref (default HEAD)"
   :requires   [[mage.format :as format]]
   :examples   [["./bin/mage cljfmt-updated" "Format updated files relative to HEAD"]
                ["./bin/mage cljfmt-updated master" "Format updated files relative to master"]]
   :options    [["-c" "--force-check" "Check staged files"]]
   :arg-schema [:or [:tuple] [:tuple :string]]
   :task       (task! (format/updated parsed))}

  kondo
  {:doc      "Runs Kondo against a file, directory, or everything we usually lint"
   :examples [["./bin/mage kondo" "run Kondo against everything we usually lint"]
              ["./bin/mage kondo src/metabase/db.clj" "run Kondo against a file"]
              ["./bin/mage kondo src/metabase/db.clj src/metabase/config.clj" "run Kondo against 2 files"]
              ["./bin/mage kondo src/metabase/api/macros" "run Kondo against a directory"]]
   :requires [[mage.kondo :as kondo]]
   :task     (task! (kondo/kondo (:arguments parsed)))}

  kondo-updated
  {:doc      "Runs kondo against files changed compared to a git ref"
   :examples [["./bin/mage kondo-updated" "run Kondo on files with changes relative to HEAD"]
              ["./bin/mage kondo-updated master" "run Kondo on files with changes relative to master"]]
   :requires [[mage.kondo :as kondo]]
   :task     (task! (kondo/kondo-updated (:arguments parsed)))}

  check
  {:doc      "Checks whether we can compile all source files (and finds circular dependencies)"
   :examples [["./bin/mage check"]]
   :requires [[mage.check]]
   :task     (task! (mage.check/check (:arguments parsed)))}

  start-maildev
  {:doc      "Start Maildev"
   :examples [["./bin/mage start-maildev -h" "print help for start-maildev"]]
   :requires [[mage.start-maildev :as start-maildev]]
   :task     (task! (start-maildev/start-maildev!))}

  start-db
  {:doc        "Start a db on a default port in docker"
   :examples   [["./bin/mage start-db postgres latest" "start the latest postgres db we support"]
                ["./bin/mage start-db mysql oldest" "start the oldest mysql db we support"]]
   :requires   [[mage.start-db :as start-db]]
   :arg-schema [:tuple
                [:enum :postgres :mysql :mariadb :mongo]
                [:enum :oldest :latest]]
   :db-info      {:postgres {:ports {:oldest 5432  :latest 5433}  :eol-url "https://endoflife.date/api/postgres.json"}
                  :mysql    {:ports {:oldest 3308  :latest 3309}  :eol-url "https://endoflife.date/api/mysql.json"}
                  :mariadb  {:ports {:oldest 3306  :latest 3307}  :eol-url "https://endoflife.date/api/mariadb.json"}
                  :mongo    {:ports {:oldest 27017 :latest 27018} :eol-url "https://endoflife.date/api/mongodb.json"}}
   :usage-fn   start-db/usage
   :task       (task!
                (let [[db version] (:arguments parsed)]
                  (start-db/start-db (:db-info (current-task)) db version)))}

  nrepl
  {:doc      "Starts the babashka nrepl: helpful for for mage development"
   :requires [[babashka.nrepl.server :as nrepl.server]
              [mage.color :as c]]
   :examples [["./bin/mage nrepl" "Starts the nrepl server"]]
   :task     (task!
               (spit ".nrepl-port" 1667)
               (nrepl.server/start-server!)
               (deref (promise)))}

  lint-migrations
  {:doc        "Lint migrations files"
   :requires   [[lint-migrations-file]
                [babashka.process :as p]]
   :examples   [["./bin/mage lint-migrations" "Lint all migrations and print report"]]
   :task       (do (cli/parse! (current-task))
                   (p/shell "bin/pre-lint-migrations-file.sh")
                   (lint-migrations-file/-main))}

  jar-download
  {:doc        "Given a version, downloads a metabase jar"
   :examples   [["./bin/mage jar-download 50" "Download the latest enterprise version of release 50 to ~/path/to/my/metabase/jars"]
                ["./bin/mage jar-download 1.45.2 -r" "Download and run metabase_1.45.2.jar"]
                ["./bin/mage jar-download 1.45.2 -d ~/path/to/my/jars" "Download metabase_1.45.2.jar to ~/path/to/my/jars, deleting if it exists"]
                ["JARS=~/my-stuff ./bin/mage jar-download 1.45.2" "Download metabase_1.45.2.jar to ~/my-stuff"]]
   :requires   [[mage.jar-download :as jar-download]]
   :options    [["-r" "--run" "run the new jar after downloading it"]
                ["-d" "--delete" "delete the old jar if found, by default does not re-download it"]]
   :usage-fn  (fn [_] "note: If you get an error about 'Invalid or corrupt jarfile', run this command again with the -d option.")
   :arg-schema [:or
                [:tuple [:string {:desc "version"}]]
                [:tuple [:string {:desc "version"}] [:string {:desc "path"}]]]
   :task       (task! (jar-download/jar-download parsed))}

  setup-stats-repl
  {:doc "Connect to the stats repl"
   :examples [["./bin/mage connect-stats-repl" "Connects to the stats repl"]]
   :requires [[mage.stats-repl :as stats-repl]]
   :task     (stats-repl/connect (cli/parse! (current-task)))}

  setup-autocomplete
  {:doc      "Prints instructions to setup autocomplete"
   :examples [["./bin/mage setup-autocomplete" "Shows a link to instructions to make autocomplete work."]]
   :requires [[mage.autotab :as autotab]]
   :arg-schema [:or
                [:tuple]
                [:tuple [:enum "bash" "zsh" "fish"]]]
   :task     (task! (autotab/instructions parsed))}

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Private Tasks:
  ;; - hidden from `./bin/mage` listing and `bb tasks`
  ;; - start with a `-`

  -repl
  {:doc      "Eval a string of clojure code in the backend dev server"
   :requires [[babashka.process :as process]
              [mage.color :as c]
              [mage.be-dev :refer [nrepl-eval]]]
   :examples [["./bin/mage -repl '(+ 1 1)'"
               "Eval a form in the backend dev server in the user namespace"]
              ["./bin/mage -repl --namespace metabase.app-db.connection @application-db-counter"
               "Eval a form in the backend dev server in the 'metabase.app-db.connection' namespace"]
              ["mage -repl --port 59498 --namespace metabase.app-db.connection '(read-string \"::hello\")'"
               "Evaluate a keyword inside a namespace"]]
   :options [["-n" "--namespace NAMESPACE" "Namespace to use for the task"]
             ["-p" "--port PORT" "Port to use for the task, defaults to value in .nrepl-port"]]
   :task     (let [parsed (cli/parse! (current-task))
                   code (first (:arguments parsed))
                   port (or (:port (:options parsed))
                            (slurp ".nrepl-port")
                            (do (println (c/red "No port specified, and no .nrepl-port file found."))
                                (System/exit 1)))
                   nns (or (:namespace (:options parsed)) "user")]
               (nrepl-eval nns code port))}

  -check-readable
  {:doc      "Check that code is readable parens a file"
   :requires [[mage.readability-check :as readability]]
   :arg-schema [:or
                [:tuple [:string {:description "File to check"}]]
                [:tuple
                 [:string {:description "File to check"}]
                 [:int {:description "A line in the file" :min 1}]]]
   :examples [["./bin/mage -check-readable dev/src/dev.clj"
               "Check file for readability"]
              ["./bin/mage -check-readable dev/src/dev.clj 300"
               "Check top level form containing line 300 for readability"]]
   :task     (let [{:keys [arguments]} (cli/parse! (current-task))]
               (apply readability/check arguments))}

  -example-calculator
  {;; `:doc` is a short docstring for the task, will be listed in `./bin/mage -h` and other help info
   :doc        "The sample task docstring"
   ;; examples get printed out when you pass -h or --help.
   :examples   [["./bin/mage -example-calculator 1 + 99" "evaluates to 100"]
                ["./bin/mage -example-calculator 100 - 99" "evaluates to 1"]]
   ;; The task is the actual code that runs when you run the task.
   :task       (task!
                (println "Parsed input:") (prn parsed)
                (let [{:keys [arguments data]} (cli/parse! (current-task))
                      [a op b]                 arguments]
                  (println a (name op) b "=" (c/blue (({:+ + :- -} op) a b)))))
   ;; (optional) `:require` lazily libraries for just your task:
   :requires   [[mage.color :as c]]
   ;; (optional) `:options` are passed to [[clojure.tools.cli/parse-opts]].
   ;; See: https://clojure.github.io/tools.cli/index.html#clojure.tools.cli/parse-opts
   :options    [["-a" "--a-cli-flag" "Check staged files (not actually used)"]
                ["-p" "--port PORT" "Some port we care about in -example (not actually used)"]]
   ;; (optional) `:arg-schema` is a malli schema for the arguments passed to the task, after the options
   :arg-schema [:tuple :int [:enum :+ :-] :int]
   ;; (optional) `:usage-fn` is a function called with the current-task map
   ;; and returns a string containing extra-detailed usage information.
   :usage-fn   (fn [{:keys [doc]}]
                 (println "Optional extra usage information, if you want.")
                 (println "Reversed docstring:" (apply str (reverse doc))))
   ;; (optional) Any other keys are completely allowed. Put things to lookup or that you want to be easy to change
   ;; here. These will be returned from `(current-task)`. See: start-db for an example of using `:ports` to define a
   ;; map of ports.
   :data       {:a [:b :c] :b [:d]}}

  -test {:doc      "run all mage tests"
         :requires [[mage.core-test]
                    [clojure.test :refer [run-tests]]]
         :task     (run-tests 'mage.core-test)}

  -test-examples
  {:doc      "Runs every example and checks that it exits with 0"
   :requires [[mage.examples-test :as examples-test]]
   :task     (System/exit (if (= :ok (examples-test/run-tests)) 0 1))}}}
