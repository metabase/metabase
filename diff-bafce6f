commit bafce6ffe7ee93618f50df831147cb14d2e2517c
Author: Alexander Polyankin <alexander.polyankin@metabase.com>
Date:   Thu Nov 3 18:39:38 2022 +0200

    Migrate ResetPassword form to formik (#26214)

diff --git a/frontend/src/metabase/auth/actions.ts b/frontend/src/metabase/auth/actions.ts
index 58678fd19e..a8c99466b3 100644
--- a/frontend/src/metabase/auth/actions.ts
+++ b/frontend/src/metabase/auth/actions.ts
@@ -97,13 +97,18 @@ export const resetPassword = createThunkAction(
   },
 );
 
-export const VALIDATE_PASSWORD = "metabase/auth/VALIDATE_PASSWORD";
-export const validatePassword = createThunkAction(
-  VALIDATE_PASSWORD,
-  (password: string) => async () => {
+export const validatePassword = async (password: string) => {
+  const error = MetabaseSettings.passwordComplexityDescription(password);
+  if (error) {
+    return error;
+  }
+
+  try {
     await UtilApi.password_check({ password });
-  },
-);
+  } catch (error) {
+    return getIn(error, ["data", "errors", "password"]);
+  }
+};
 
 export const VALIDATE_PASSWORD_TOKEN = "metabase/auth/VALIDATE_TOKEN";
 export const validatePasswordToken = createThunkAction(
diff --git a/frontend/src/metabase/auth/components/ResetPassword/ResetPassword.styled.tsx b/frontend/src/metabase/auth/components/ResetPassword/ResetPassword.styled.tsx
index 53c4971e33..c036766b4a 100644
--- a/frontend/src/metabase/auth/components/ResetPassword/ResetPassword.styled.tsx
+++ b/frontend/src/metabase/auth/components/ResetPassword/ResetPassword.styled.tsx
@@ -1,21 +1,5 @@
 import styled from "@emotion/styled";
 import { color } from "metabase/lib/colors";
-import Icon from "metabase/components/Icon";
-
-export const FormTitle = styled.div`
-  color: ${color("text-dark")};
-  font-size: 1.25rem;
-  font-weight: 700;
-  line-height: 1.5rem;
-  text-align: center;
-  margin-bottom: 1rem;
-`;
-
-export const FormMessage = styled.div`
-  color: ${color("text-dark")};
-  text-align: center;
-  margin-bottom: 1.5rem;
-`;
 
 export const InfoBody = styled.div`
   display: flex;
diff --git a/frontend/src/metabase/auth/components/ResetPassword/ResetPassword.tsx b/frontend/src/metabase/auth/components/ResetPassword/ResetPassword.tsx
index 5fb0b8786a..1b06235071 100644
--- a/frontend/src/metabase/auth/components/ResetPassword/ResetPassword.tsx
+++ b/frontend/src/metabase/auth/components/ResetPassword/ResetPassword.tsx
@@ -1,25 +1,18 @@
-import React, { useCallback, useEffect, useMemo, useState } from "react";
+import React, { useCallback, useEffect, useState } from "react";
 import { t } from "ttag";
-import { getIn } from "icepick";
-import Settings from "metabase/lib/settings";
-import Users from "metabase/entities/users";
+import Button from "metabase/core/components/Button";
 import Link from "metabase/core/components/Link";
 import AuthLayout from "../../containers/AuthLayout";
+import ResetPasswordForm from "../ResetPasswordForm";
 import { ResetPasswordData } from "../../types";
-import {
-  FormMessage,
-  FormTitle,
-  InfoBody,
-  InfoMessage,
-  InfoTitle,
-} from "./ResetPassword.styled";
+import { InfoBody, InfoMessage, InfoTitle } from "./ResetPassword.styled";
 
 type ViewType = "none" | "form" | "success" | "expired";
 
 export interface ResetPasswordProps {
   token: string;
   onResetPassword: (token: string, password: string) => void;
-  onValidatePassword: (password: string) => void;
+  onValidatePassword: (password: string) => Promise<string | undefined>;
   onValidatePasswordToken: (token: string) => void;
   onShowToast: (toast: { message: string }) => void;
   onRedirect: (url: string) => void;
@@ -44,18 +37,6 @@ const ResetPassword = ({
     }
   }, [token, onValidatePasswordToken]);
 
-  const handlePasswordChange = useCallback(
-    async ({ password }: ResetPasswordData) => {
-      try {
-        await onValidatePassword(password);
-        return {};
-      } catch (error) {
-        return getPasswordError(error);
-      }
-    },
-    [onValidatePassword],
-  );
-
   const handlePasswordSubmit = useCallback(
     async ({ password }: ResetPasswordData) => {
       await onResetPassword(token, password);
@@ -73,7 +54,7 @@ const ResetPassword = ({
     <AuthLayout>
       {view === "form" && (
         <ResetPasswordForm
-          onPasswordChange={handlePasswordChange}
+          onValidatePassword={onValidatePassword}
           onSubmit={handlePasswordSubmit}
         />
       )}
@@ -82,36 +63,6 @@ const ResetPassword = ({
   );
 };
 
-interface ResetPasswordFormProps {
-  onPasswordChange: (data: ResetPasswordData) => void;
-  onSubmit: (data: ResetPasswordData) => void;
-}
-
-const ResetPasswordForm = ({
-  onPasswordChange,
-  onSubmit,
-}: ResetPasswordFormProps): JSX.Element => {
-  const passwordDescription = useMemo(
-    () => Settings.passwordComplexityDescription(),
-    [],
-  );
-
-  return (
-    <div>
-      <FormTitle>{t`New password`}</FormTitle>
-      <FormMessage>{t`To keep your data secure, passwords ${passwordDescription}`}</FormMessage>
-      <Users.Form
-        form={Users.forms.password_reset}
-        asyncValidate={onPasswordChange}
-        asyncBlurFields={["password"]}
-        submitTitle={t`Save new password`}
-        submitFullWidth
-        onSubmit={onSubmit}
-      />
-    </div>
-  );
-};
-
 const ResetPasswordExpired = (): JSX.Element => {
   return (
     <InfoBody>
@@ -119,16 +70,11 @@ const ResetPasswordExpired = (): JSX.Element => {
       <InfoMessage>
         {t`For security reasons, password reset links expire after a little while. If you still need to reset your password, you can request a new reset email.`}
       </InfoMessage>
-      <Link
-        className="Button Button--primary"
-        to={"/auth/forgot_password"}
-      >{t`Request a new reset email`}</Link>
+      <Button as={Link} primary to={"/auth/forgot_password"}>
+        {t`Request a new reset email`}
+      </Button>
     </InfoBody>
   );
 };
 
-const getPasswordError = (error: unknown) => {
-  return getIn(error, ["data", "errors"]);
-};
-
 export default ResetPassword;
diff --git a/frontend/src/metabase/auth/components/ResetPassword/ResetPassword.unit.spec.tsx b/frontend/src/metabase/auth/components/ResetPassword/ResetPassword.unit.spec.tsx
index 833d2257ef..040aaeb929 100644
--- a/frontend/src/metabase/auth/components/ResetPassword/ResetPassword.unit.spec.tsx
+++ b/frontend/src/metabase/auth/components/ResetPassword/ResetPassword.unit.spec.tsx
@@ -11,8 +11,10 @@ describe("ResetPassword", () => {
 
     render(<ResetPassword {...props} />);
 
-    const message = await screen.findByText("New password");
-    expect(message).toBeInTheDocument();
+    await waitFor(() => {
+      expect(props.onValidatePasswordToken).toHaveBeenCalledWith(props.token);
+      expect(screen.getByText("New password")).toBeInTheDocument();
+    });
   });
 
   it("should show an error message when token validation fails", async () => {
@@ -22,36 +24,40 @@ describe("ResetPassword", () => {
 
     render(<ResetPassword {...props} />);
 
-    const message = await screen.findByText("Whoops, that's an expired link");
-    expect(message).toBeInTheDocument();
+    await waitFor(() => {
+      expect(props.onValidatePasswordToken).toHaveBeenCalledWith(props.token);
+      expect(screen.getByText(/that's an expired link/)).toBeInTheDocument();
+    });
   });
 
   it("should show a success message when the form is submitted", async () => {
-    const onShowToast = jest.fn();
-    const onRedirect = jest.fn();
-
     const props = getProps({
       onResetPassword: jest.fn().mockResolvedValue({}),
+      onValidatePassword: jest.fn().mockResolvedValue(undefined),
       onValidatePasswordToken: jest.fn().mockResolvedValue({}),
-      onShowToast,
-      onRedirect,
     });
 
-    render(
-      <ResetPassword
-        {...props}
-        onShowToast={onShowToast}
-        onRedirect={onRedirect}
-      />,
-    );
+    render(<ResetPassword {...props} />);
 
-    const button = await screen.findByText("Save new password");
+    await waitFor(() => {
+      expect(props.onValidatePasswordToken).toHaveBeenCalledWith(props.token);
+      expect(screen.getByText("New password")).toBeInTheDocument();
+    });
 
-    userEvent.click(button);
+    userEvent.type(screen.getByLabelText("Create a password"), "test");
+    userEvent.type(screen.getByLabelText("Confirm your password"), "test");
 
     await waitFor(() => {
-      expect(onRedirect).toHaveBeenCalledWith("/");
-      expect(onShowToast).toHaveBeenCalledWith({
+      expect(props.onValidatePassword).toHaveBeenCalledWith("test");
+      expect(screen.getByText("Save new password")).toBeEnabled();
+    });
+
+    userEvent.click(screen.getByText("Save new password"));
+
+    await waitFor(() => {
+      expect(props.onResetPassword).toHaveBeenCalledWith(props.token, "test");
+      expect(props.onRedirect).toHaveBeenCalledWith("/");
+      expect(props.onShowToast).toHaveBeenCalledWith({
         message: "You've updated your password.",
       });
     });
@@ -70,20 +76,6 @@ const getProps = (opts?: Partial<ResetPasswordProps>): ResetPasswordProps => {
   };
 };
 
-interface FormMockProps {
-  submitTitle: string;
-  onSubmit: () => void;
-}
-
-const FormMock = ({ submitTitle, onSubmit }: FormMockProps) => {
-  return <button onClick={onSubmit}>{submitTitle}</button>;
-};
-
-jest.mock("metabase/entities/users", () => ({
-  forms: { password_reset: jest.fn() },
-  Form: FormMock,
-}));
-
 interface AuthLayoutMockProps {
   children?: ReactNode;
 }
diff --git a/frontend/src/metabase/auth/components/ResetPasswordForm/ResetPasswordForm.styled.tsx b/frontend/src/metabase/auth/components/ResetPasswordForm/ResetPasswordForm.styled.tsx
new file mode 100644
index 0000000000..7f150701de
--- /dev/null
+++ b/frontend/src/metabase/auth/components/ResetPasswordForm/ResetPasswordForm.styled.tsx
@@ -0,0 +1,17 @@
+import styled from "@emotion/styled";
+import { color } from "metabase/lib/colors";
+
+export const PasswordFormTitle = styled.div`
+  color: ${color("text-dark")};
+  font-size: 1.25rem;
+  font-weight: 700;
+  line-height: 1.5rem;
+  text-align: center;
+  margin-bottom: 1rem;
+`;
+
+export const PasswordFormMessage = styled.div`
+  color: ${color("text-dark")};
+  text-align: center;
+  margin-bottom: 1.5rem;
+`;
diff --git a/frontend/src/metabase/auth/components/ResetPasswordForm/ResetPasswordForm.tsx b/frontend/src/metabase/auth/components/ResetPasswordForm/ResetPasswordForm.tsx
new file mode 100644
index 0000000000..8c23566064
--- /dev/null
+++ b/frontend/src/metabase/auth/components/ResetPasswordForm/ResetPasswordForm.tsx
@@ -0,0 +1,91 @@
+import React, { useMemo } from "react";
+import { t } from "ttag";
+import * as Yup from "yup";
+import _ from "underscore";
+import MetabaseSettings from "metabase/lib/settings";
+import Form from "metabase/core/components/Form";
+import FormProvider from "metabase/core/components/FormProvider";
+import FormInput from "metabase/core/components/FormInput";
+import FormSubmitButton from "metabase/core/components/FormSubmitButton";
+import FormErrorMessage from "metabase/core/components/FormErrorMessage";
+import { ResetPasswordData } from "metabase/auth/types";
+import {
+  PasswordFormMessage,
+  PasswordFormTitle,
+} from "./ResetPasswordForm.styled";
+
+const ResetPasswordSchema = Yup.object({
+  password: Yup.string()
+    .required(t`required`)
+    .test(async (value = "", context) => {
+      const error = await context.options.context?.onValidatePassword(value);
+      return error ? context.createError({ message: error }) : true;
+    }),
+  password_confirm: Yup.string()
+    .required(t`required`)
+    .oneOf([Yup.ref("password")], t`passwords do not match`),
+});
+
+interface ResetPasswordFormProps {
+  onValidatePassword: (password: string) => Promise<string | undefined>;
+  onSubmit: (data: ResetPasswordData) => void;
+}
+
+const ResetPasswordForm = ({
+  onValidatePassword,
+  onSubmit,
+}: ResetPasswordFormProps): JSX.Element => {
+  const initialValues = useMemo(
+    () => ({ password: "", password_confirm: "" }),
+    [],
+  );
+
+  const passwordDescription = useMemo(
+    () => MetabaseSettings.passwordComplexityDescription(),
+    [],
+  );
+
+  const validationContext = useMemo(
+    () => ({ onValidatePassword: _.memoize(onValidatePassword) }),
+    [onValidatePassword],
+  );
+
+  return (
+    <div>
+      <PasswordFormTitle>{t`New password`}</PasswordFormTitle>
+      <PasswordFormMessage>
+        {t`To keep your data secure, passwords ${passwordDescription}`}
+      </PasswordFormMessage>
+      <FormProvider
+        initialValues={initialValues}
+        validationSchema={ResetPasswordSchema}
+        validationContext={validationContext}
+        onSubmit={onSubmit}
+      >
+        <Form>
+          <FormInput
+            name="password"
+            type="password"
+            title={t`Create a password`}
+            placeholder={t`Shhh...`}
+            autoComplete="new-password"
+            autoFocus
+            fullWidth
+          />
+          <FormInput
+            name="password_confirm"
+            type="password"
+            title={t`Confirm your password`}
+            placeholder={t`Shhh... but one more time so we get it right`}
+            autoComplete="new-password"
+            fullWidth
+          />
+          <FormSubmitButton title={t`Save new password`} primary fullWidth />
+          <FormErrorMessage />
+        </Form>
+      </FormProvider>
+    </div>
+  );
+};
+
+export default ResetPasswordForm;
diff --git a/frontend/src/metabase/auth/components/ResetPasswordForm/index.ts b/frontend/src/metabase/auth/components/ResetPasswordForm/index.ts
new file mode 100644
index 0000000000..21ff6c5a72
--- /dev/null
+++ b/frontend/src/metabase/auth/components/ResetPasswordForm/index.ts
@@ -0,0 +1 @@
+export { default } from "./ResetPasswordForm";
diff --git a/frontend/src/metabase/auth/containers/ResetPasswordApp/ResetPasswordApp.tsx b/frontend/src/metabase/auth/containers/ResetPasswordApp/ResetPasswordApp.tsx
index 5ee05f253a..7b721650d1 100644
--- a/frontend/src/metabase/auth/containers/ResetPasswordApp/ResetPasswordApp.tsx
+++ b/frontend/src/metabase/auth/containers/ResetPasswordApp/ResetPasswordApp.tsx
@@ -10,11 +10,11 @@ import {
 
 const mapStateToProps = (state: any, props: any) => ({
   token: props.params.token,
+  onValidatePassword: validatePassword,
 });
 
 const mapDispatchToProps = {
   onResetPassword: resetPassword,
-  onValidatePassword: validatePassword,
   onValidatePasswordToken: validatePasswordToken,
   onShowToast: addUndo,
   onRedirect: replace,
diff --git a/frontend/src/metabase/entities/users/forms.js b/frontend/src/metabase/entities/users/forms.js
index b848f82906..70cbea3617 100644
--- a/frontend/src/metabase/entities/users/forms.js
+++ b/frontend/src/metabase/entities/users/forms.js
@@ -138,9 +138,6 @@ export default {
       },
     ],
   },
-  password_reset: {
-    fields: [...getPasswordFields()],
-  },
   newsletter: {
     fields: [
       {
