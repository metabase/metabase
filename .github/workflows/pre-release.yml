name: Release 2 - Pre-release testing
run-name: Pre-release Testing of ${{ github.event.workflow_run.name }}

on:
  workflow_run:
    workflows: [Release 1 - Build Release Artifact]
    types: [completed]

jobs:
  release-artifact:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    strategy:
      matrix:
        edition: [oss, ee]
    outputs:
      ee_version: ${{ steps.version-properties.outputs.ee_version }}
      oss_version: ${{ steps.version-properties.outputs.oss_version }}
      commit: ${{ steps.version-properties.outputs.commit }}
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: 'Download artifact'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');

            const allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: context.payload.workflow_run.id,
            });

            const matchArtifact = allArtifacts.data.artifacts.find((artifact) => {
              return artifact.name.includes('-${{ matrix.edition }}-');
            });

            if (!matchArtifact) {
              throw new Error('No artifact found');
            }

            const download = await github.rest.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });

            fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/mb.zip`, Buffer.from(download.data));
      - name: Unzip Metabase artifact containing an uberjar
        run: unzip mb.zip
      - name: Extract the version.properties file from the JAR
        run: |
          jar xf metabase.jar version.properties
          mv version.properties resources/
      - name: Reveal Metabase ${{ matrix.edition }} properties
        id: version-properties
        run: |
          cat ./resources/version.properties
          echo "commit=$(cat ./COMMIT-ID)" >> $GITHUB_OUTPUT

          version=$(grep -o '^tag=.*' ./resources/version.properties | cut -d'=' -f2)

          if [[ "${{ matrix.edition }}" == "ee" ]]; then
            echo "ee_version=$version" >> $GITHUB_OUTPUT
          else
            echo "oss_version=$version" >> $GITHUB_OUTPUT
          fi
        shell: bash
      - name: Upload Metabase ${{ matrix.edition }} JAR as artifact
        uses: actions/upload-artifact@v3
        with:
          name: metabase-${{ matrix.edition }}-uberjar
          path: |
            ./metabase.jar
            ./COMMIT-ID
            ./SHA256.sum

  check-uberjar-health:
    needs: [release-artifact]
    runs-on: ubuntu-22.04
    name: Is ${{ matrix.edition }} (java ${{ matrix.java-version }}) healthy?
    timeout-minutes: 10
    strategy:
      matrix:
        edition: [oss, ee]
        java-version: [11, 17]
    steps:
    - name: Prepare JRE (Java Run-time Environment)
      uses: actions/setup-java@v3
      with:
        java-package: jre
        java-version: ${{ matrix.java-version }}
        distribution: 'temurin'
    - run: java -version
    - uses: actions/download-artifact@v3
      name: Retrieve uberjar artifact
      with:
        name: metabase-${{ matrix.edition }}-uberjar
    - name: Launch uberjar (and keep it running)
      run: java -jar ./metabase.jar &
    - name: Wait for Metabase to start
      run: while ! curl -s 'http://localhost:3000/api/health' | grep '{"status":"ok"}'; do sleep 1; done

  run-sanity-check:
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    needs: [release-artifact, check-uberjar-health]
    strategy:
      matrix:
        edition: [oss, ee]
    env:
      MB_EDITION: ${{ matrix.edition }}
      DISPLAY: ""
      CYPRESS_ALL_FEATURES_TOKEN: ${{ secrets.ENTERPRISE_TOKEN }}
      CYPRESS_NO_FEATURES_TOKEN: ${{ secrets.E2E_STARTER_TOKEN }}
      MB_SNOWPLOW_AVAILABLE: true
      MB_SNOWPLOW_URL: "http://localhost:9090" # Snowplow micro
      TERM: xterm
    services:
      maildev:
        image: maildev/maildev:2.0.5
        ports:
          - "1080:1080"
          - "1025:1025"
        credentials:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
    steps:
    - name: Check out the code
      uses: actions/checkout@v3
      with:
        ref: ${{ needs.release-artifact.outputs.commit }}
    - name: Prepare front-end environment
      uses: ./.github/actions/prepare-frontend
    - name: Prepare JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: 11
        distribution: "temurin"
    - name: Prepare Cypress environment
      uses: ./.github/actions/prepare-cypress
    - name: Run Snowplow micro
      uses: ./.github/actions/run-snowplow-micro
    - uses: actions/download-artifact@v3
      name: Retrieve uberjar artifact for ${{ matrix.edition }}
      with:
        name: metabase-${{ matrix.edition }}-uberjar
    - name: Get the version info
      run: |
        jar xf metabase.jar version.properties
        mv version.properties resources/
    - name: Run a few important Cypress tests as sanity check
      run: |
        mkdir -p ./target/uberjar && cp metabase.jar ./target/uberjar/metabase.jar
        yarn test-cypress-run --folder onboarding

    - name: Upload Cypress Artifacts upon failure
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: cypress-failed-tests-recording
        path: |
          ./cypress
          ./logs/test.log
        if-no-files-found: ignore

  containerize:
    needs: [release-artifact, run-sanity-check]
    runs-on: ubuntu-22.04
    timeout-minutes: 15
    strategy:
      matrix:
        edition: [oss, ee]
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    outputs:
      image_tag: ${{ steps.target.outputs.image_tag }}
    steps:
    - name: Get the version
      run: |
        if [[ "${{ matrix.edition }}" == "ee" ]]; then
          echo "VERSION=${{ needs.release-artifact.outputs.ee_version }}" >> $GITHUB_ENV
        else
          echo "VERSION=${{ needs.release-artifact.outputs.oss_version }}" >> $GITHUB_ENV
        fi
    - name: Check out the code
      uses: actions/checkout@v3
      with:
        ref: ${{ needs.release-artifact.outputs.commit }}
    - uses: actions/download-artifact@v3
      name: Retrieve uberjar artifact
      with:
        name: metabase-${{ matrix.edition }}-uberjar
    - name: Move the Uberjar to the context dir
      run: mv metabase.jar bin/docker/.
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v2
      with:
        driver-opts: network=host
    - name: Build ${{ matrix.edition }} container
      uses: docker/build-push-action@v3
      with:
        context: bin/docker/.
        platforms: linux/amd64
        network: host
        tags: localhost:5000/local-metabase:${{ env.VERSION }}
        no-cache: true
        push: true

    - name: Launch container
      run: docker run --rm -dp 3000:3000 localhost:5000/local-metabase:${{ env.VERSION }}
      timeout-minutes: 5
    - name: Wait for Metabase to start
      run: while ! curl -s 'http://localhost:3000/api/health' | grep '{"status":"ok"}'; do sleep 1; done
      timeout-minutes: 3

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_RELEASE_USERNAME }}
        password: ${{ secrets.DOCKERHUB_RELEASE_TOKEN }}
    - name: Retag and push container image to ${{ vars.DOCKERHUB_OWNER }} staging Docker Hub repo
      id: target
      run: |
        # SHA-1 truncated to 7 digits should be enough
        SHORT_HASH=${COMMIT:0:7}

        IMAGE_TAG=$VERSION-$SHORT_HASH
        CONTAINER_IMAGE=${{ vars.DOCKERHUB_OWNER }}/${{ vars.DOCKERHUB_STAGING_REPO }}:$IMAGE_TAG

        echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

        echo "Retag local image for staging"
        docker tag localhost:5000/local-metabase:$VERSION $CONTAINER_IMAGE

        echo "Pushing container image $CONTAINER_IMAGE ..."
        docker push $CONTAINER_IMAGE

        echo "Finished!"
      shell: bash
      env:
        COMMIT: ${{ needs.release-artifact.outputs.commit }}

  verify-docker-pull:
    runs-on: ubuntu-22.04
    needs: [release-artifact, containerize]
    timeout-minutes: 15
    strategy:
      matrix:
        edition: [oss, ee]
    env:
      IMAGE_TAG: ${{ needs.containerize.outputs.image_tag }}
    steps:
    - name: Login to Docker Hub # authenticated, to avoid being rate-throttled
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_RELEASE_USERNAME }}
        password: ${{ secrets.DOCKERHUB_RELEASE_TOKEN }}
    - name: Pull the container image
      run: |
        CONTAINER_IMAGE=${{ vars.DOCKERHUB_OWNER }}/${{ vars.DOCKERHUB_STAGING_REPO }}:$IMAGE_TAG
        echo "Pulling container image $CONTAINER_IMAGE ..."
        docker pull $CONTAINER_IMAGE
        echo "Successful!"
    - name: Launch container
      run: |
        CONTAINER_IMAGE=${{ vars.DOCKERHUB_OWNER }}/${{ vars.DOCKERHUB_STAGING_REPO }}:$IMAGE_TAG
        docker run --rm -dp 3000:3000 $CONTAINER_IMAGE
      timeout-minutes: 5
    - name: Wait for Metabase to start
      run: while ! curl -s 'http://localhost:3000/api/health' | grep '{"status":"ok"}'; do sleep 1; done
      timeout-minutes: 3
