name: Driver Tests - Tier 1 (Fast)

on:
  workflow_call:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref && github.ref || github.run_id }}-tier1
  cancel-in-progress: true

jobs:
  # Tier 1: Fast drivers (5-15 minutes, no complex setup)
  be-tests-h2:
    runs-on: ubuntu-22.04
    timeout-minutes: 20
    env:
      CI: 'true'
    name: H2
    steps:
    - uses: actions/checkout@v4
    - name: Test H2 driver
      uses: ./.github/actions/test-driver
      with:
        junit-name: 'be-tests-h2'
        test-args: >-
          :only-tags [:mb/driver-tests]
    - name: Upload Test Results
      uses: ./.github/actions/upload-test-results
      if: always()
      with:
        input-path: ./target/junit/
        output-name: ${{ github.job }}
        bucket: ${{ vars.AWS_S3_TEST_RESULTS_BUCKET }}
        aws-access-key-id: ${{ secrets.AWS_TEST_RESULTS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_TEST_RESULTS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}
        trunk-api-token: ${{ secrets.TRUNK_API_TOKEN }}

  be-tests-sqlite:
    runs-on: ubuntu-22.04
    timeout-minutes: 20
    env:
      CI: 'true'
      DRIVERS: sqlite
    name: SQLite
    steps:
    - uses: actions/checkout@v4
    - name: Test SQLite driver
      uses: ./.github/actions/test-driver
      with:
        junit-name: 'be-tests-sqlite-ee'
        test-args: >-
          :only-tags [:mb/driver-tests]
    - name: Upload Test Results
      uses: ./.github/actions/upload-test-results
      if: always()
      with:
        input-path: ./target/junit/
        output-name: ${{ github.job }}
        bucket: ${{ vars.AWS_S3_TEST_RESULTS_BUCKET }}
        aws-access-key-id: ${{ secrets.AWS_TEST_RESULTS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_TEST_RESULTS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}
        trunk-api-token: ${{ secrets.TRUNK_API_TOKEN }}

  be-tests-postgres-latest:
    runs-on: ubuntu-22.04
    timeout-minutes: 20
    env:
      CI: 'true'
      DRIVERS: postgres
      MB_DB_TYPE: postgres
      MB_DB_PORT: 5432
      MB_DB_HOST: localhost
      MB_DB_DBNAME: mb_test
      MB_DB_USER: mb_test
      MB_POSTGRESQL_TEST_USER: mb_test
      MB_POSTGRES_SSL_TEST_SSL: 'true'
      MB_POSTGRES_SSL_TEST_SSL_MODE: verify-full
      MB_POSTGRES_SSL_TEST_SSL_ROOT_CERT_PATH: 'test-resources/certificates/us-east-2-bundle.pem'
    services:
      postgres:
        image: postgres:latest
        ports:
          - "5432:5432"
        env:
          POSTGRES_USER: mb_test
          POSTGRES_DB: mb_test
          POSTGRES_HOST_AUTH_METHOD: trust
    name: PostgreSQL Latest
    steps:
    - uses: actions/checkout@v4
    - name: Test PostgreSQL Latest
      uses: ./.github/actions/test-driver
      with:
        junit-name: 'be-tests-postgres-latest-ee'
        test-args: >-
          :only-tags [:mb/driver-tests]
    - name: Upload Test Results
      uses: ./.github/actions/upload-test-results
      if: always()
      with:
        input-path: ./target/junit/
        output-name: ${{ github.job }}
        bucket: ${{ vars.AWS_S3_TEST_RESULTS_BUCKET }}
        aws-access-key-id: ${{ secrets.AWS_TEST_RESULTS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_TEST_RESULTS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}
        trunk-api-token: ${{ secrets.TRUNK_API_TOKEN }}

  be-tests-mysql-latest:
    runs-on: ubuntu-22.04
    timeout-minutes: 20
    services:
      mysql:
        image: mysql:latest
        ports:
          - "3306:3306"
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: true
          MYSQL_DATABASE: circle_test
    env:
      CI: 'true'
      DRIVERS: mysql
      MB_DB_TYPE: mysql
      MB_DB_HOST: localhost
      MB_DB_PORT: 3306
      MB_DB_DBNAME: circle_test
      MB_DB_USER: root
      MB_MYSQL_TEST_USER: root
      MB_MYSQL_SSL_TEST_SSL: 'true'
      MB_MYSQL_SSL_TEST_HOST: ${{ secrets.MYSQL_RDS_SSL_INSTANCE_HOST }}
      MB_MYSQL_SSL_TEST_ADDITIONAL_OPTIONS: 'verifyServerCertificate=true'
      MB_MYSQL_SSL_TEST_SSL_CERT: ${{ secrets.MB_MYSQL_SSL_TEST_SSL_CERT }}
      MB_MYSQL_SSL_TEST_USER: metabase
      MB_MYSQL_SSL_TEST_PASSWORD: ${{ secrets.MYSQL_RDS_SSL_INSTANCE_PASSWORD }}
    name: MySQL Latest
    steps:
      - uses: actions/checkout@v4
      - name: Test MySQL Latest
        uses: ./.github/actions/test-driver
        with:
          junit-name: 'be-tests-mysql-latest-ee'
          test-args: >-
            :only-tags [:mb/driver-tests]
      - name: Upload Test Results
        uses: ./.github/actions/upload-test-results
        if: always()
        with:
          input-path: ./target/junit/
          output-name: ${{ github.job }}
          bucket: ${{ vars.AWS_S3_TEST_RESULTS_BUCKET }}
          aws-access-key-id: ${{ secrets.AWS_TEST_RESULTS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_TEST_RESULTS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
          trunk-api-token: ${{ secrets.TRUNK_API_TOKEN }}

  tier1-results:
    needs:
      - be-tests-h2
      - be-tests-sqlite
      - be-tests-postgres-latest
      - be-tests-mysql-latest
    runs-on: ubuntu-latest
    timeout-minutes: 5
    name: tier1-results
    if: always() && !cancelled()
    steps:
      - name: Check tier 1 status
        uses: actions/github-script@v7
        env:
          needs: ${{ toJson(needs) }}
        with:
          script: | #js
            const needs = JSON.parse(process.env.needs);
            const jobs = Object.entries(needs).map(([jobName, jobValues]) => ({
              name: jobName,
              result: jobValues.result
            }));
            
            if (jobs.every(job => (job.result === 'skipped' || job.result === 'success'))) {
              console.log("✅ Tier 1 (Fast) drivers passed!");
              process.exit(0);
            } else {
              console.log("❌ Tier 1 (Fast) drivers failed:");
              jobs.forEach((job) => {
                if (job.result !== 'success') {
                  console.log(`${job.name} - ${job.result}`);
                }
              });
              process.exit(1);
            }