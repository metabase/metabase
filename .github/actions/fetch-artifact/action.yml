name: Fetch artifact
description: Fetches a specific artifact and downloads it to the current directory

inputs:
  name:
    description: The name of the artifact to fetch
    required: true
  output-name:
    description: Optional custom name for the output jar file (defaults to metabase.jar)
    required: false
    default: "metabase.jar"
  extract-path:
    description: Directory path where the jar should be extracted (defaults to current directory)
    required: false
    default: "."

runs:
  using: "composite"
  steps:
    - name: find_release_artifact
      id: find_release_artifact
      uses: actions/github-script@v7
      with:
        result-encoding: string
        script: | # js
          const fs = require('fs');

          const artifacts = await github.rest.actions.listArtifactsForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            name: "${{ inputs.name }}",
            per_page: 1,
          });

          if (!artifacts.data?.artifacts?.[0]?.id) {
            throw new Error(`No artifacts found for: ${{ inputs.name }}`);
          }

          const artifact_id = artifacts.data.artifacts[0].id;

          const download = await github.rest.actions.downloadArtifact({
            owner: context.repo.owner,
            repo: context.repo.repo,
            artifact_id: artifact_id,
            archive_format: 'zip',
          });

          fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/mb.zip`, Buffer.from(download.data));

    - name: unzip uberjar artifact
      shell: bash
      run: unzip mb.zip
    - name: Process the Uberjar
      shell: bash
      run: | # bash
        OUTPUT_NAME="${{ inputs.output-name }}"
        EXTRACT_PATH="${{ inputs.extract-path }}"

        # Function to determine the final JAR path
        get_jar_path() {
          if [ "$EXTRACT_PATH" == "." ]; then
            echo "$OUTPUT_NAME"
          else
            echo "$EXTRACT_PATH/$OUTPUT_NAME"
          fi
        }

        # Create target directory if it doesn't exist
        if [ "$EXTRACT_PATH" != "." ]; then
          mkdir -p "$EXTRACT_PATH"
        fi

        # Find the source jar file
        if [ -e "metabase.jar" ]; then
          SOURCE_JAR="metabase.jar"
        elif [ -e "target/uberjar/metabase.jar" ]; then
          SOURCE_JAR="target/uberjar/metabase.jar"
        else
          echo "Could not find the metabase.jar file"
          exit 1
        fi

        # Get the target path
        TARGET_PATH=$(get_jar_path)

        # Move the jar if source and target differ
        if [ "$SOURCE_JAR" == "$TARGET_PATH" ]; then
          echo "Jar is already at the correct location: $TARGET_PATH"
        else
          echo "Moving $SOURCE_JAR to $TARGET_PATH"
          mv "$SOURCE_JAR" "$TARGET_PATH"
        fi

        # Export the path for subsequent steps
        echo "JAR_PATH=$TARGET_PATH" >> $GITHUB_ENV

    - name: Verify that this is a valid JAR file
      shell: bash
      run: |
        echo "Verifying JAR at: $JAR_PATH"
        file --mime-type "$JAR_PATH"

    - name: Reveal its version.properties
      shell: bash
      run: |
        echo "Extracting version.properties from: $JAR_PATH"
        jar xf "$JAR_PATH" version.properties && cat version.properties
