name: E2E Tests

on:
  # We'll record runs using Replay.io and their browser on a schedule as an experiment
  schedule:
    - cron: '0 */8 * * *'
  push:
    branches:
      - "master"
      - 'release-**'
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref && github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  test-run-id:
    runs-on: ubuntu-22.04
    outputs:
      testRunId: ${{ steps.testRunId.outputs.testRunId }}
    steps:
      - id: testRunId
        run: echo testRunId=$(npx uuid) >> "$GITHUB_OUTPUT"

  e2e-tests:
    needs: test-run-id
    if: |
      always()
    runs-on: ubuntu-22.04
    timeout-minutes: 60
    name: e2e-tests-${{ matrix.folder }}${{ matrix.context }}-${{ matrix.edition }}
    env:
      MB_EDITION: ${{ matrix.edition }}
      DISPLAY: ""
      QA_DB_ENABLED: true
      MB_PREMIUM_EMBEDDING_TOKEN: ${{ secrets.ENTERPRISE_TOKEN }}
      MB_SNOWPLOW_AVAILABLE: true
      MB_SNOWPLOW_URL: "http://localhost:9090" # Snowplow micro
      ELECTRON_EXTRA_LAUNCH_ARGS: "--remote-debugging-port=40500" # deploysentinel
      TZ: US/Pacific # to make node match the instance tz
    strategy:
      fail-fast: false
      matrix:
        java-version: [11]
        edition: [ee]
        folder:
          - "admin"
          - "binning"
          - "collections"
          - "custom-column"
          - "dashboard"
          - "dashboard-filters"
          - "downloads"
          - "embedding"
          - "filters"
          - "joins"
          - "models"
          - "native"
          - "native-filters"
          - "onboarding"
          - "organization"
          - "permissions"
          - "question"
          - "sharing"
          - "visualizations"
        include:
          - edition: oss
            context: grep
            java-version: 11
    services:
      maildev:
        image: maildev/maildev:2.0.5
        ports:
          - "1080:1080"
          - "1025:1025"
        credentials:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      openldap:
        image: osixia/openldap:1.5.0
        ports:
          - "389:389"
        credentials:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      postgres-sample:
        image: metabase/qa-databases:postgres-sample-12
        ports:
          - "5404:5432"
        credentials:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      mongo-sample:
        image: metabase/qa-databases:mongo-sample-4.4
        ports:
          - 27004:27017
        credentials:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      mysql-sample:
        image: metabase/qa-databases:mysql-sample-8
        ports:
          - 3304:3306
        credentials:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v3
      - name: Download Metabase uberjar from a previously stored artifact
        run: |
          curl -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/metabase/metabase/actions/artifacts/726241236/zip \
            -o mb.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Unzip Metabase artifact containing an uberjar
        run: unzip mb.zip
      - name: Prepare front-end environment
        uses: ./.github/actions/prepare-frontend
      - name: Prepare JDK ${{ matrix.java-version }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java-version }}
          distribution: "temurin"
      - name: Prepare Cypress environment
        uses: ./.github/actions/prepare-cypress
      - name: Run Snowplow micro
        uses: ./.github/actions/run-snowplow-micro

      - name: Get the version info
        run: |
          jar xf target/uberjar/metabase.jar version.properties
          mv version.properties resources/


      # REPLAY.IO specific jobs
      - name: Install Replay.io browser
        run: npx @replayio/cypress install

      - name: Run OSS-specific Cypress tests using Replay.io browser
        if: matrix.edition == 'oss'
        run: |
          yarn run test-cypress-run \
          --env grepTags=@OSS \
          --spec './e2e/test/scenarios/**/*.cy.spec.js' \
          --browser "replay-chromium"
        env:
          TERM: xterm
          CYPRESS_REPLAYIO_ENABLED: 1
          RECORD_REPLAY_METADATA_FILE: /tmp/replay-metadata.json
          RECORD_REPLAY_METADATA_TEST_RUN_ID: ${{ needs.test-run-id.outputs.testRunId }}
          RECORD_REPLAY_DISABLE_ASSERTS: 1

      - name: Run EE Cypress tests on ${{ matrix.folder }} using Replay.io browser
        if: matrix.edition == 'ee'
        run: |
          yarn run test-cypress-run \
          --env grepTags="-@quarantine" \
          --folder ${{ matrix.folder }} \
          --browser "replay-chromium"
        env:
          TERM: xterm
          CYPRESS_REPLAYIO_ENABLED: 1
          RECORD_REPLAY_METADATA_FILE: /tmp/replay-metadata.json
          RECORD_REPLAY_METADATA_TEST_RUN_ID: ${{ needs.test-run-id.outputs.testRunId }}
          RECORD_REPLAY_DISABLE_ASSERTS: 1

      - name: Upload Replay.io recordings
        if: always()
        uses: replayio/action-upload@v0.4.7
        with:
          api-key: rwk_gXbvYctIcR6RZyEzUvby3gtkO4esrB2L321lkY8FSuQ
          public: true

      - name: Upload Cypress Artifacts upon failure
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cypress-recording-${{ matrix.folder }}${{ matrix.context }}-${{ matrix.edition }}
          path: |
            ./cypress
            ./logs/test.log
          if-no-files-found: ignore
