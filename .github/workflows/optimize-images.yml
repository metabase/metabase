name: Auto-Optimize Docs PNG Images

on:
  push:
    paths:
      - 'docs/**/*.png'

jobs:
  optimize-images:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Install pngcrush and bc
      run: |
        sudo apt-get update
        sudo apt-get install -y pngcrush bc

    - name: Get changed PNG files
      id: changed-files
      uses: tj-actions/changed-files@ed68ef82c095e0d48ec87eccea555d944a631a4c # v46
      with:
        files: |
          docs/**/*.png

    - name: Optimize changed PNG files
      if: steps.changed-files.outputs.any_changed == 'true'
      id: optimize
      run: |
        echo "Optimizing PNG files with pngcrush..."
        echo "Branch:" $(git_current_branch)

        # Initialize tracking variables
        total_files=0
        total_before=0
        total_after=0

        for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
          echo "Processing: $file"
          before_size=$(stat -c%s "$file")

          # Use pngcrush with maximum lossless compression settings
          # -rem alla removes all ancillary chunks (metadata)
          # -brute tries all filter types and compression levels
          # -ow overwrites the original file
          pngcrush -rem alla -brute -ow "$file"

          after_size=$(stat -c%s "$file")
          echo "  > Before: ${before_size} bytes, After: ${after_size} bytes"

          # Track totals
          total_files=$((total_files + 1))
          total_before=$((total_before + before_size))
          total_after=$((total_after + after_size))
        done

        # Calculate savings
        total_saved=$((total_before - total_after))

        # Output results for use in commit message
        echo "files_optimized=${total_files}" >> "$GITHUB_OUTPUT"
        echo "bytes_saved=${total_saved}" >> "$GITHUB_OUTPUT"
        echo "total_before=${total_before}" >> "$GITHUB_OUTPUT"
        echo "total_after=${total_after}" >> "$GITHUB_OUTPUT"

        echo "Optimization complete"
        echo "Files processed: ${total_files}"
        echo "Total bytes saved: ${total_saved} (${total_before} -> ${total_after})"

    - name: Check for changes after optimization
      if: steps.changed-files.outputs.any_changed == 'true'
      id: check_changes
      run: |
        git add ${{ steps.changed-files.outputs.all_changed_files }}
        if git diff --quiet --cached; then
          echo "has_changes=false" >> "$GITHUB_OUTPUT"
          echo "No changes detected after optimization"
        else
          echo "has_changes=true" >> "$GITHUB_OUTPUT"
          echo "Changes detected after optimization"
          git diff --cached --stat
        fi

    - name: Commit optimized images
      if: steps.changed-files.outputs.any_changed == 'true' && steps.check_changes.outputs.has_changes == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.METABASE_AUTOMATION_USER_TOKEN }}
      run: |
        git config --global user.email "github-automation@metabase.com"
        git config --global user.name "Metabase Automation"
        git add docs/**/*.png

        # Format bytes saved for human readability
        bytes_saved="${{ steps.optimize.outputs.bytes_saved }}"
        bytes_before="${{ steps.optimize.outputs.total_before }}"
        if [ "$bytes_saved" -gt 1048576 ]; then
          # Convert to MB
          size_saved=$(echo "scale=1; $bytes_saved / 1048576" | bc)
          size_unit="MB"
        elif [ "$bytes_saved" -gt 1024 ]; then
          # Convert to KB
          size_saved=$(echo "scale=1; $bytes_saved / 1024" | bc)
          size_unit="KB"
        else
          size_saved="$bytes_saved"
          size_unit="bytes"
        fi

        # Calculate percentage reduction
        if [ "$bytes_before" -gt 0 ]; then
          percentage=$(echo "scale=1; $bytes_saved * 100 / $bytes_before" | bc)
          git commit -m "Optimized ${{ steps.optimize.outputs.files_optimized }} images, saved ${size_saved} ${size_unit} (${percentage}% smaller)"
        else
          git commit -m "Optimized ${{ steps.optimize.outputs.files_optimized }} images, saved ${size_saved} ${size_unit}"
        fi
        git push
        echo 'Files optimized:'
        echo ${{ steps.changed-files.outputs.all_changed_files }}
        echo 'Applied: pngcrush -rem alla -brute -ow'

    - name: Output summary
      if: steps.changed-files.outputs.any_changed == 'true'
      run: |
        if [ "${{ steps.check_changes.outputs.has_changes }}" = "false" ]; then
          echo "PNG files were already optimized - no changes needed"
        else
          echo "PNG files optimized and committed successfully"
        fi
