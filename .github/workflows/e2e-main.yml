name: E2E Tests

on:
  push:
    branches:
      - "master"
      - 'release-**'
    paths-ignore:
      - "docs/**"
      - "**.md"
      - ".circleci/**"
      - "**.unit.spec.*"
      - "**_test.clj"

jobs:

  build:
    runs-on: ubuntu-20.04
    timeout-minutes: 25
    strategy:
      matrix:
        edition: [oss, ee]
    env:
      MB_EDITION: ${{ matrix.edition }}
      INTERACTIVE: false
    steps:
    - uses: actions/checkout@v3
    - name: Prepare front-end environment
      uses: ./.github/actions/prepare-frontend
    - name: Prepare back-end environment
      uses: ./.github/actions/prepare-backend

    - run: ./bin/build version
    - run: ./bin/build translations
    - run: ./bin/build frontend
    - run: ./bin/build licenses
    - run: ./bin/build drivers
    - run: ./bin/build uberjar

    - name: Prepare uberjar artifact
      uses: ./.github/actions/prepare-uberjar-artifact

  e2e-tests:
    runs-on: ubuntu-20.04
    timeout-minutes: 45
    needs: build
    name: e2e-tests-${{ matrix.folder }}${{ matrix.context }}-${{ matrix.edition }}
    env:
      MB_EDITION: ${{ matrix.edition }}
      DISPLAY: ""
      QA_DB_ENABLED: true
      MB_PREMIUM_EMBEDDING_TOKEN: ${{ secrets.ENTERPRISE_TOKEN }}
      MB_SNOWPLOW_AVAILABLE: true
      MB_SNOWPLOW_URL: "http://localhost:9090"  # Snowplow micro
      ELECTRON_EXTRA_LAUNCH_ARGS: '--remote-debugging-port=40500' # deploysentinel
    strategy:
      fail-fast: false
      matrix:
        java-version: [11]
        edition: [ee]
        folder:
          - "admin"
          - "binning"
          - "collections"
          - "custom-column"
          - "dashboard"
          - "dashboard-filters"
          - "downloads"
          - "embedding"
          - "filters"
          - "joins"
          - "models"
          - "native"
          - "native-filters"
          - "onboarding"
          - "organization"
          - "permissions"
          - "question"
          - "sharing"
          - "visualizations"
        include:
          - edition: oss
            context: grep
            java-version: 11
    services:
      maildev:
        image: maildev/maildev:1.1.0
        ports:
          - "80:80"
          - "25:25"
        credentials:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      openldap:
        image: osixia/openldap:1.5.0
        ports:
          - "389:389"
        credentials:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      postgres-sample:
        image: metabase/qa-databases:postgres-sample-12
        ports:
          - "5432:5432"
        credentials:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      mongo-sample:
        image: metabase/qa-databases:mongo-sample-4.0
        ports:
          - 27017:27017
        credentials:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      mysql-sample:
        image: metabase/qa-databases:mysql-sample-8
        ports:
          - 3306:3306
        credentials:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
    steps:
    - uses: actions/checkout@v3
    # Test runs will be recorded using Deploysentinel on `master` only
    - name: Set conditional ENVs
      if: github.ref == 'refs/heads/master'
      run: |
        echo "CYPRESS_DEPLOYSENTINEL_KEY=${{ secrets.CYPRESS_DEPLOYSENTINEL_KEY }}" >> $GITHUB_ENV
    - name: Prepare front-end environment
      uses: ./.github/actions/prepare-frontend
    - name: Prepare JDK ${{ matrix.java-version }}
      uses: actions/setup-java@v3
      with:
        java-version: ${{ matrix.java-version }}
        distribution: 'temurin'
    - name: Prepare cypress environment
      uses: ./.github/actions/prepare-cypress
    - name: Run Snowplow micro
      uses: ./.github/actions/run-snowplow-micro

    - uses: actions/download-artifact@v3
      name: Retrieve uberjar artifact for ${{ matrix.edition }}
      with:
        name: metabase-${{ matrix.edition }}-uberjar
    - name: Get the version info
      run: |
        jar xf target/uberjar/metabase.jar version.properties
        mv version.properties resources/

    - name: Run OSS-specific Cypress tests
      if: matrix.edition == 'oss'
      run: |
        yarn run test-cypress-run \
        --env grepTags=@OSS \
        --spec './frontend/test/metabase/scenarios/**/*.cy.spec.js'
      env:
        TERM: xterm

    # These are EE-specific and version-agnostic tests
    - name: Run Cypress E2E tests against EE uberjar
      if: matrix.edition == 'ee'
      run: |
        yarn run test-cypress-run \
          --folder ${{ matrix.folder }}
      env:
        TERM: xterm

    - name: Upload Cypress Artifacts upon failure
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: cypress-recording-${{ matrix.folder }}${{ matrix.context }}-${{ matrix.edition }}
        path: |
          ./cypress
          ./logs/test.log
        if-no-files-found: ignore

  visual-regression-tests:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-20.04
    timeout-minutes: 45
    needs: build
    name: percy-screenshot-recording-${{ matrix.edition }}
    env:
      MB_EDITION: ${{ matrix.edition }}
      MB_PREMIUM_EMBEDDING_TOKEN: ${{ secrets.ENTERPRISE_TOKEN }}
    strategy:
      matrix:
        java-version: [11]
        edition: [ee]
    services:
      maildev:
        image: maildev/maildev:1.1.0
        ports:
          - "80:80"
          - "25:25"
        credentials:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
    steps:
    - uses: actions/checkout@v3
    - name: Prepare front-end environment
      uses: ./.github/actions/prepare-frontend
    - name: Prepare JDK ${{ matrix.java-version }}
      uses: actions/setup-java@v3
      with:
        java-version: ${{ matrix.java-version }}
        distribution: 'temurin'
    - name: Prepare Cypress environment
      uses: ./.github/actions/prepare-cypress

    - uses: actions/download-artifact@v3
      name: Retrieve uberjar artifact for ${{ matrix.edition }}
      with:
        name: metabase-${{ matrix.edition }}-uberjar
    - name: Get the version info
      run: |
        jar xf target/uberjar/metabase.jar version.properties
        mv version.properties resources/
    - name: Percy Test
      run: yarn run test-visual-run
      env:
        PERCY_TOKEN: ${{ secrets.PERCY_TOKEN }}
