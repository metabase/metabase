(ns metabase.test.data.oracle
  (:require [clojure.java.jdbc :as jdbc]
            [clojure.string :as s]
            [environ.core :refer [env]]
            [korma.core :as k]
            [metabase.driver.generic-sql :as sql]
            (metabase.test.data [generic-sql :as generic]
                                [interface :as i])
            [metabase.util :as u])
  (:import metabase.driver.oracle.OracleDriver))

(defn- get-db-env-var
  " Look up the relevant connection param from corresponding env var or throw an exception if it's not set.

     (get-db-env-var :user) ; Look up `MB_ORACLE_USER`"
  [env-var & [default]]
  (or (env (keyword (format "mb-oracle-%s" (name env-var))))
      default
      (throw (Exception. (format "In order to test Oracle, you must specify the env var MB_ORACLE_%s."
                                 (s/upper-case (name env-var)))))))

;; Similar to SQL Server, Oracle on AWS doesn't let you create different databases; like Redshift, we'll create a 'session-schema'
(defonce ^:const session-schema-number (rand-int 200))
(defonce ^:const session-schema        (str "CAM_" session-schema-number))

(def ^:private ^:const session-password "very_secure_password")

(defn- db-connection-details-for-username-and-password [username password]
  {:host         (get-db-env-var :host "oracle-dev-norcal.cawvfhnz9drs.us-west-1.rds.amazonaws.com")
   :port         (Integer/parseInt (get-db-env-var :port "1521"))
   :user         username
   :password     password
   :sid          "ORCL"
   :short-lived? false})

(def ^:private master-db-connection-details
  (delay (db-connection-details-for-username-and-password (get-db-env-var :user "cam") (get-db-env-var :password "4Cr4QnU4yHM3zQWQ"))))

(def ^:private session-db-connection-details
  (delay (db-connection-details-for-username-and-password session-schema session-password)))


(def ^:private ^:const field-base-type->sql-type
  {:BigIntegerField "NUMBER(*,0)"
   :BooleanField    "NUMBER(1)"
   :CharField       "VARCHAR2(254)"
   :DateField       "DATE"
   :DateTimeField   "TIMESTAMP WITH TIME ZONE"
   :DecimalField    "DECIMAL"
   :FloatField      "BINARY_FLOAT"
   :IntegerField    "INTEGER"
   :TextField       "TEXT"})

(defn- drop-table-if-exists-sql [_ _ {:keys [table-name]}]
  (format "BEGIN
             EXECUTE IMMEDIATE 'DROP TABLE \"%s\".\"%s\" CASCADE CONSTRAINTS'⅋
           EXCEPTION
             WHEN OTHERS THEN
               IF SQLCODE != -942 THEN
                 RAISE⅋
               END IF⅋
           END⅋"
          session-schema
          table-name))

(defn- qualified-name-components
  ([_ db-name]
   [db-name])
  ([_ _ table-name]
   [session-schema table-name])
  ([_ _ table-name field-name]
   [session-schema table-name field-name]))

(extend OracleDriver
  generic/IGenericSQLDatasetLoader
  (merge generic/DefaultsMixin
         {:create-db-sql             (constantly nil)
          :drop-db-if-exists-sql     (constantly nil)
          :drop-table-if-exists-sql  drop-table-if-exists-sql
          :execute-sql!              generic/sequentially-execute-sql!
          :field-base-type->sql-type (fn [_ base-type] (field-base-type->sql-type base-type))
          :load-data!                generic/load-data-one-at-a-time-parallel!
          :pk-sql-type               (constantly "INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL") ; LOL
          :qualified-name-components qualified-name-components})

  i/IDatasetLoader
  (merge generic/IDatasetLoaderMixin
         {:database->connection-details (fn [& _]
                                          @master-db-connection-details)
          :engine                       (constantly :oracle)}))


;; TL;DR Oracle schema == Oracle user. Create new user for session-schema
(def ^:private execute-when-testing-oracle!
  (partial generic/execute-when-testing! :oracle (fn [] (sql/connection-details->spec (OracleDriver.) @master-db-connection-details))))

(defn- create-session-user!
  {:expectations-options :before-run}
  []
  (try
    (execute-when-testing-oracle! (format "DROP USER %s CASCADE" session-schema))
    (catch Throwable _))
  (execute-when-testing-oracle! (format "CREATE USER %s IDENTIFIED BY %s DEFAULT TABLESPACE USERS QUOTA UNLIMITED ON USERS" session-schema session-password)))

(defn- destroy-session-user!
  {:expectations-options :after-run}
  []
  (execute-when-testing-oracle! (format "DROP USER %s CASCADE" session-schema)))
