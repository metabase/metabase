name: Build Uberjar

# This workflow builds an uberjar and pushes it to dockerhub for any branch, either on-demand,
# or automatically for the listed branches

concurrency:
  group: uberjar-${{ github.ref }}
  cancel-in-progress: false

on:
  push:
    branches:
      - master
      - metabot-v3-main
      - internal-tools
    paths-ignore:
      # config files
      - ".**"
      # documentation
      - "docs/**"
      - "**.md"
      # this covers both BE and FE unit tests, as well as E2E tests
      - "**test/**"
      - "**_test.clj"
      - "**/frontend/**.unit.*"
  workflow_dispatch:
    inputs:
      commit:
        description: "Optional full-length commit SHA-1 hash"
  workflow_call:
    inputs:
      source_changed:
        description: "Whether source code has changed"
        type: boolean
        default: true

jobs:
  check-existing-artifacts:
    runs-on: ubuntu-22.04
    timeout-minutes: 5
    outputs:
      ee_exists: ${{ steps.check-ee.outcome == 'success' }}
      oss_exists: ${{ steps.check-oss.outcome == 'success' }}
      should_build: ${{ steps.decide.outputs.should_build }}
    steps:
      - name: Check out the code
        uses: actions/checkout@v4
      - name: Try to fetch existing EE artifact
        id: check-ee
        continue-on-error: true
        uses: ./.github/actions/fetch-artifact
        with:
          name: metabase-ee-${{ github.event.inputs.commit || github.event.pull_request.head.sha || github.sha }}-uberjar
          output-name: metabase-ee.jar

      - name: Try to fetch existing OSS artifact
        id: check-oss
        continue-on-error: true
        uses: ./.github/actions/fetch-artifact
        with:
          name: metabase-oss-${{ github.event.inputs.commit || github.event.pull_request.head.sha || github.sha }}-uberjar
          output-name: metabase-oss.jar

      - name: Decide if build is needed
        id: decide
        run: |
          SOURCE_CHANGED="${{ inputs.source_changed == true }}"
          EE_EXISTS="${{ steps.check-ee.outcome == 'success' }}"
          OSS_EXISTS="${{ steps.check-oss.outcome == 'success' }}"

          echo "Source changed: $SOURCE_CHANGED"
          echo "EE exists: $EE_EXISTS"
          echo "OSS exists: $OSS_EXISTS"

          # Build if source changed OR artifacts don't exist
          if [[ "$SOURCE_CHANGED" == "true" ]] || [[ "$EE_EXISTS" == "false" ]] || [[ "$OSS_EXISTS" == "false" ]]; then
            SHOULD_BUILD="true"
            echo "Will build: source_changed=$SOURCE_CHANGED, ee_exists=$EE_EXISTS, oss_exists=$OSS_EXISTS"
          else
            SHOULD_BUILD="false"
            echo "Skipping build: artifacts exist and no source changes"
          fi

          echo "should_build=$SHOULD_BUILD" >> $GITHUB_OUTPUT

  # if this is on a release branch, we need to check the build requirements
  get-build-requirements:
    if: |
      !cancelled() &&
      contains(github.ref, 'release-x')
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    outputs:
      java_version: ${{ fromJson(steps.dependencies.outputs.result).java_version }}
      node_version: ${{ fromJson(steps.dependencies.outputs.result).node_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: release
      - name: Prepare build scripts
        run: cd ${{ github.workspace }}/release && yarn && yarn build
      - name: Get build dependencies
        uses: actions/github-script@v7
        id: dependencies
        with:
          script: | # js
            const { getBuildRequirements, getVersionFromReleaseBranch } = require('${{ github.workspace }}/release/dist/index.cjs');

            const version = getVersionFromReleaseBranch('${{ github.ref }}');
            const requirements = getBuildRequirements(version);

            return {
              java_version: requirements.java,
              node_version: requirements.node,
            };


  build:
    needs:
      [check-existing-artifacts, get-build-requirements]
    if: always() && !cancelled() && needs.check-existing-artifacts.outputs.should_build == 'true' && (needs.get-build-requirements.result == 'success' || needs.get-build-requirements.result == 'skipped')
    name: Build MB ${{ matrix.edition }}
    runs-on: ubuntu-22.04
    timeout-minutes: 15
    strategy:
      matrix:
        edition: ["ee", "oss"]
    env:
      MB_EDITION: ${{ matrix.edition }}
      INTERACTIVE: false
      SKIP_LICENSES: ${{ github.event_name == 'pull_request' }}  # faster builds for dev
    steps:
      - name: Check out the code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.commit }}
      - name: Prepare front-end environment
        uses: ./.github/actions/prepare-frontend
        with:
          node-version: "${{ needs.get-build-requirements.outputs.node_version || '22' }}"
      - name: Prepare back-end environment
        uses: ./.github/actions/prepare-backend
        with:
          m2-cache-key: uberjar
          java-version: "${{ needs.get-build-requirements.outputs.java_version || 21 }}"
      - name: Build
        run: ./bin/build.sh
      - name: Prepare uberjar artifact
        uses: ./.github/actions/prepare-uberjar-artifact
        with:
          name: metabase-${{ matrix.edition }}-${{ github.event.inputs.commit || github.event.pull_request.head.sha || github.sha }}-uberjar

  check-jar-health:
    runs-on: ubuntu-22.04
    name: Is ${{ matrix.edition }} (java ${{ matrix.java-version }}) healthy?
    needs: [build, check-existing-artifacts]
    if: always() && !cancelled() && (needs.build.result == 'success' || (needs.check-existing-artifacts.outputs.should_build == 'false' && needs.check-existing-artifacts.outputs.ee_exists == 'true' && needs.check-existing-artifacts.outputs.oss_exists == 'true'))
    timeout-minutes: 10
    strategy:
      matrix:
        edition: ["ee", "oss"]
        java-version: [21]
    steps:
      - name: Check out the code
        uses: actions/checkout@v4
      - name: Prepare JRE (Java Run-time Environment)
        uses: actions/setup-java@v4
        with:
          java-package: jre
          java-version: ${{ matrix.java-version }}
          distribution: "temurin"
      - run: java -version
      - name: Retrieve uberjar artifact
        uses: ./.github/actions/fetch-artifact
        with:
          name: metabase-${{ matrix.edition }}-${{ github.event.inputs.commit || github.event.pull_request.head.sha || github.sha }}-uberjar
      - name: Launch uberjar
        run: >-
          java --add-opens java.base/java.nio=ALL-UNNAMED -jar ./metabase.jar &
      - name: Wait for Metabase to start
        run: while ! curl 'http://localhost:3000/api/health' | grep '{"status":"ok"}'; do sleep 1; done
