name: Add Issue References to PR

on:
  pull_request:
    types: [opened, edited, synchronize]

jobs:
  add-issue-references:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install node-fetch@3

      - name: Add Issue References
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const pr = context.payload.pull_request;

            // Get PR URL to query Linear API
            const prUrl = pr.html_url;

            const linearApiKey = process.env.LINEAR_API_KEY;
            if (!linearApiKey) {
              console.log('Linear API key not configured');
              return;
            }

            const nodeFetch = await import('node-fetch');

            // Query Linear API to find tasks linked to this PR
            const query = `
              query {
                attachmentSearch(filter: {url: {eq: "${prUrl}"}}) {
                  nodes {
                    issue {
                      id
                      identifier
                      attachments {
                        nodes {
                          url
                        }
                      }
                    }
                  }
                }
              }
            `;

            const response = await nodeFetch('https://api.linear.app/graphql', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'Authorization': linearApiKey
              },
              body: JSON.stringify({ query })
            });

            const data = await response.json();

            if (!data.data || !data.data.attachmentSearch || data.data.attachmentSearch.nodes.length === 0) {
              console.log('No Linear tasks linked to this PR');
              return;
            }

            // Extract GitHub issue numbers from all attachments in the linked Linear task
            const issueNumbers = [];
            for (const node of data.data.attachmentSearch.nodes) {
              const linearTask = node.issue;
              console.log(`Found linked Linear task: ${linearTask.identifier}`);

              for (const attachment of linearTask.attachments.nodes) {
                const url = attachment.url;
                const match = url.match(/github\.com\/.*\/.*\/issues\/(\d+)/);
                if (match) {
                  issueNumbers.push(match[1]);
                }
              }
            }

            if (issueNumbers.length === 0) {
              console.log('No GitHub issues linked to the Linear task');
              return;
            }

            // Generate closing references
            const closingRefs = issueNumbers.map(num => `closes #${num}`).join(' ');

            // Check if the PR body already contains these references
            let newBody = pr.body || '';
            let shouldUpdate = false;

            for (const num of issueNumbers) {
              if (!newBody.includes(`closes #${num}`) && !newBody.includes(`Closes #${num}`)) {
                shouldUpdate = true;
                break;
              }
            }

            if (shouldUpdate) {
              // Add references to the end of the PR body
              if (newBody.trim()) {
                newBody += '\n\n';
              }
              newBody += `<!-- Added by GitHub Action -->\n${closingRefs}`;

              // Update the PR
              await github.rest.pulls.update({
                owner,
                repo,
                pull_number: pr.number,
                body: newBody
              });

              console.log(`Updated PR #${pr.number} with issue references: ${closingRefs}`);
            } else {
              console.log('PR already contains all closing references');
            }
        env:
          LINEAR_API_KEY: ${{ secrets.LINEAR_API_KEY }}
